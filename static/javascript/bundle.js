(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){


//
// Generated on Tue Dec 16 2014 12:13:47 GMT+0100 (CET) by Charlie Robbins, Paolo Fragomeni & the Contributors (Using Codesurgeon).
// Version 1.2.6
//

(function (exports) {

/*
 * browser.js: Browser specific functionality for director.
 *
 * (C) 2011, Charlie Robbins, Paolo Fragomeni, & the Contributors.
 * MIT LICENSE
 *
 */

var dloc = document.location;

function dlocHashEmpty() {
  // Non-IE browsers return '' when the address bar shows '#'; Director's logic
  // assumes both mean empty.
  return dloc.hash === '' || dloc.hash === '#';
}

var listener = {
  mode: 'modern',
  hash: dloc.hash,
  history: false,

  check: function () {
    var h = dloc.hash;
    if (h != this.hash) {
      this.hash = h;
      this.onHashChanged();
    }
  },

  fire: function () {
    if (this.mode === 'modern') {
      this.history === true ? window.onpopstate() : window.onhashchange();
    }
    else {
      this.onHashChanged();
    }
  },

  init: function (fn, history) {
    var self = this;
    this.history = history;

    if (!Router.listeners) {
      Router.listeners = [];
    }

    function onchange(onChangeEvent) {
      for (var i = 0, l = Router.listeners.length; i < l; i++) {
        Router.listeners[i](onChangeEvent);
      }
    }

    //note IE8 is being counted as 'modern' because it has the hashchange event
    if ('onhashchange' in window && (document.documentMode === undefined
      || document.documentMode > 7)) {
      // At least for now HTML5 history is available for 'modern' browsers only
      if (this.history === true) {
        // There is an old bug in Chrome that causes onpopstate to fire even
        // upon initial page load. Since the handler is run manually in init(),
        // this would cause Chrome to run it twise. Currently the only
        // workaround seems to be to set the handler after the initial page load
        // http://code.google.com/p/chromium/issues/detail?id=63040
        setTimeout(function() {
          window.onpopstate = onchange;
        }, 500);
      }
      else {
        window.onhashchange = onchange;
      }
      this.mode = 'modern';
    }
    else {
      //
      // IE support, based on a concept by Erik Arvidson ...
      //
      var frame = document.createElement('iframe');
      frame.id = 'state-frame';
      frame.style.display = 'none';
      document.body.appendChild(frame);
      this.writeFrame('');

      if ('onpropertychange' in document && 'attachEvent' in document) {
        document.attachEvent('onpropertychange', function () {
          if (event.propertyName === 'location') {
            self.check();
          }
        });
      }

      window.setInterval(function () { self.check(); }, 50);

      this.onHashChanged = onchange;
      this.mode = 'legacy';
    }

    Router.listeners.push(fn);

    return this.mode;
  },

  destroy: function (fn) {
    if (!Router || !Router.listeners) {
      return;
    }

    var listeners = Router.listeners;

    for (var i = listeners.length - 1; i >= 0; i--) {
      if (listeners[i] === fn) {
        listeners.splice(i, 1);
      }
    }
  },

  setHash: function (s) {
    // Mozilla always adds an entry to the history
    if (this.mode === 'legacy') {
      this.writeFrame(s);
    }

    if (this.history === true) {
      window.history.pushState({}, document.title, s);
      // Fire an onpopstate event manually since pushing does not obviously
      // trigger the pop event.
      this.fire();
    } else {
      dloc.hash = (s[0] === '/') ? s : '/' + s;
    }
    return this;
  },

  writeFrame: function (s) {
    // IE support...
    var f = document.getElementById('state-frame');
    var d = f.contentDocument || f.contentWindow.document;
    d.open();
    d.write("<script>_hash = '" + s + "'; onload = parent.listener.syncHash;<script>");
    d.close();
  },

  syncHash: function () {
    // IE support...
    var s = this._hash;
    if (s != dloc.hash) {
      dloc.hash = s;
    }
    return this;
  },

  onHashChanged: function () {}
};

var Router = exports.Router = function (routes) {
  if (!(this instanceof Router)) return new Router(routes);

  this.params   = {};
  this.routes   = {};
  this.methods  = ['on', 'once', 'after', 'before'];
  this.scope    = [];
  this._methods = {};

  this._insert = this.insert;
  this.insert = this.insertEx;

  this.historySupport = (window.history != null ? window.history.pushState : null) != null

  this.configure();
  this.mount(routes || {});
};

Router.prototype.init = function (r) {
  var self = this
    , routeTo;
  this.handler = function(onChangeEvent) {
    var newURL = onChangeEvent && onChangeEvent.newURL || window.location.hash;
    var url = self.history === true ? self.getPath() : newURL.replace(/.*#/, '');
    self.dispatch('on', url.charAt(0) === '/' ? url : '/' + url);
  };

  listener.init(this.handler, this.history);

  if (this.history === false) {
    if (dlocHashEmpty() && r) {
      dloc.hash = r;
    } else if (!dlocHashEmpty()) {
      self.dispatch('on', '/' + dloc.hash.replace(/^(#\/|#|\/)/, ''));
    }
  }
  else {
    if (this.convert_hash_in_init) {
      // Use hash as route
      routeTo = dlocHashEmpty() && r ? r : !dlocHashEmpty() ? dloc.hash.replace(/^#/, '') : null;
      if (routeTo) {
        window.history.replaceState({}, document.title, routeTo);
      }
    }
    else {
      // Use canonical url
      routeTo = this.getPath();
    }

    // Router has been initialized, but due to the chrome bug it will not
    // yet actually route HTML5 history state changes. Thus, decide if should route.
    if (routeTo || this.run_in_init === true) {
      this.handler();
    }
  }

  return this;
};

Router.prototype.explode = function () {
  var v = this.history === true ? this.getPath() : dloc.hash;
  if (v.charAt(1) === '/') { v=v.slice(1) }
  return v.slice(1, v.length).split("/");
};

Router.prototype.setRoute = function (i, v, val) {
  var url = this.explode();

  if (typeof i === 'number' && typeof v === 'string') {
    url[i] = v;
  }
  else if (typeof val === 'string') {
    url.splice(i, v, s);
  }
  else {
    url = [i];
  }

  listener.setHash(url.join('/'));
  return url;
};

//
// ### function insertEx(method, path, route, parent)
// #### @method {string} Method to insert the specific `route`.
// #### @path {Array} Parsed path to insert the `route` at.
// #### @route {Array|function} Route handlers to insert.
// #### @parent {Object} **Optional** Parent "routes" to insert into.
// insert a callback that will only occur once per the matched route.
//
Router.prototype.insertEx = function(method, path, route, parent) {
  if (method === "once") {
    method = "on";
    route = function(route) {
      var once = false;
      return function() {
        if (once) return;
        once = true;
        return route.apply(this, arguments);
      };
    }(route);
  }
  return this._insert(method, path, route, parent);
};

Router.prototype.getRoute = function (v) {
  var ret = v;

  if (typeof v === "number") {
    ret = this.explode()[v];
  }
  else if (typeof v === "string"){
    var h = this.explode();
    ret = h.indexOf(v);
  }
  else {
    ret = this.explode();
  }

  return ret;
};

Router.prototype.destroy = function () {
  listener.destroy(this.handler);
  return this;
};

Router.prototype.getPath = function () {
  var path = window.location.pathname;
  if (path.substr(0, 1) !== '/') {
    path = '/' + path;
  }
  return path;
};
function _every(arr, iterator) {
  for (var i = 0; i < arr.length; i += 1) {
    if (iterator(arr[i], i, arr) === false) {
      return;
    }
  }
}

function _flatten(arr) {
  var flat = [];
  for (var i = 0, n = arr.length; i < n; i++) {
    flat = flat.concat(arr[i]);
  }
  return flat;
}

function _asyncEverySeries(arr, iterator, callback) {
  if (!arr.length) {
    return callback();
  }
  var completed = 0;
  (function iterate() {
    iterator(arr[completed], function(err) {
      if (err || err === false) {
        callback(err);
        callback = function() {};
      } else {
        completed += 1;
        if (completed === arr.length) {
          callback();
        } else {
          iterate();
        }
      }
    });
  })();
}

function paramifyString(str, params, mod) {
  mod = str;
  for (var param in params) {
    if (params.hasOwnProperty(param)) {
      mod = params[param](str);
      if (mod !== str) {
        break;
      }
    }
  }
  return mod === str ? "([._a-zA-Z0-9-%()]+)" : mod;
}

function regifyString(str, params) {
  var matches, last = 0, out = "";
  while (matches = str.substr(last).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/)) {
    last = matches.index + matches[0].length;
    matches[0] = matches[0].replace(/^\*/, "([_.()!\\ %@&a-zA-Z0-9-]+)");
    out += str.substr(0, matches.index) + matches[0];
  }
  str = out += str.substr(last);
  var captures = str.match(/:([^\/]+)/ig), capture, length;
  if (captures) {
    length = captures.length;
    for (var i = 0; i < length; i++) {
      capture = captures[i];
      if (capture.slice(0, 2) === "::") {
        str = capture.slice(1);
      } else {
        str = str.replace(capture, paramifyString(capture, params));
      }
    }
  }
  return str;
}

function terminator(routes, delimiter, start, stop) {
  var last = 0, left = 0, right = 0, start = (start || "(").toString(), stop = (stop || ")").toString(), i;
  for (i = 0; i < routes.length; i++) {
    var chunk = routes[i];
    if (chunk.indexOf(start, last) > chunk.indexOf(stop, last) || ~chunk.indexOf(start, last) && !~chunk.indexOf(stop, last) || !~chunk.indexOf(start, last) && ~chunk.indexOf(stop, last)) {
      left = chunk.indexOf(start, last);
      right = chunk.indexOf(stop, last);
      if (~left && !~right || !~left && ~right) {
        var tmp = routes.slice(0, (i || 1) + 1).join(delimiter);
        routes = [ tmp ].concat(routes.slice((i || 1) + 1));
      }
      last = (right > left ? right : left) + 1;
      i = 0;
    } else {
      last = 0;
    }
  }
  return routes;
}

var QUERY_SEPARATOR = /\?.*/;

Router.prototype.configure = function(options) {
  options = options || {};
  for (var i = 0; i < this.methods.length; i++) {
    this._methods[this.methods[i]] = true;
  }
  this.recurse = options.recurse || this.recurse || false;
  this.async = options.async || false;
  this.delimiter = options.delimiter || "/";
  this.strict = typeof options.strict === "undefined" ? true : options.strict;
  this.notfound = options.notfound;
  this.resource = options.resource;
  this.history = options.html5history && this.historySupport || false;
  this.run_in_init = this.history === true && options.run_handler_in_init !== false;
  this.convert_hash_in_init = this.history === true && options.convert_hash_in_init !== false;
  this.every = {
    after: options.after || null,
    before: options.before || null,
    on: options.on || null
  };
  return this;
};

Router.prototype.param = function(token, matcher) {
  if (token[0] !== ":") {
    token = ":" + token;
  }
  var compiled = new RegExp(token, "g");
  this.params[token] = function(str) {
    return str.replace(compiled, matcher.source || matcher);
  };
  return this;
};

Router.prototype.on = Router.prototype.route = function(method, path, route) {
  var self = this;
  if (!route && typeof path == "function") {
    route = path;
    path = method;
    method = "on";
  }
  if (Array.isArray(path)) {
    return path.forEach(function(p) {
      self.on(method, p, route);
    });
  }
  if (path.source) {
    path = path.source.replace(/\\\//ig, "/");
  }
  if (Array.isArray(method)) {
    return method.forEach(function(m) {
      self.on(m.toLowerCase(), path, route);
    });
  }
  path = path.split(new RegExp(this.delimiter));
  path = terminator(path, this.delimiter);
  this.insert(method, this.scope.concat(path), route);
};

Router.prototype.path = function(path, routesFn) {
  var self = this, length = this.scope.length;
  if (path.source) {
    path = path.source.replace(/\\\//ig, "/");
  }
  path = path.split(new RegExp(this.delimiter));
  path = terminator(path, this.delimiter);
  this.scope = this.scope.concat(path);
  routesFn.call(this, this);
  this.scope.splice(length, path.length);
};

Router.prototype.dispatch = function(method, path, callback) {
  var self = this, fns = this.traverse(method, path.replace(QUERY_SEPARATOR, ""), this.routes, ""), invoked = this._invoked, after;
  this._invoked = true;
  if (!fns || fns.length === 0) {
    this.last = [];
    if (typeof this.notfound === "function") {
      this.invoke([ this.notfound ], {
        method: method,
        path: path
      }, callback);
    }
    return false;
  }
  if (this.recurse === "forward") {
    fns = fns.reverse();
  }
  function updateAndInvoke() {
    self.last = fns.after;
    self.invoke(self.runlist(fns), self, callback);
  }
  after = this.every && this.every.after ? [ this.every.after ].concat(this.last) : [ this.last ];
  if (after && after.length > 0 && invoked) {
    if (this.async) {
      this.invoke(after, this, updateAndInvoke);
    } else {
      this.invoke(after, this);
      updateAndInvoke();
    }
    return true;
  }
  updateAndInvoke();
  return true;
};

Router.prototype.invoke = function(fns, thisArg, callback) {
  var self = this;
  var apply;
  if (this.async) {
    apply = function(fn, next) {
      if (Array.isArray(fn)) {
        return _asyncEverySeries(fn, apply, next);
      } else if (typeof fn == "function") {
        fn.apply(thisArg, (fns.captures || []).concat(next));
      }
    };
    _asyncEverySeries(fns, apply, function() {
      if (callback) {
        callback.apply(thisArg, arguments);
      }
    });
  } else {
    apply = function(fn) {
      if (Array.isArray(fn)) {
        return _every(fn, apply);
      } else if (typeof fn === "function") {
        return fn.apply(thisArg, fns.captures || []);
      } else if (typeof fn === "string" && self.resource) {
        self.resource[fn].apply(thisArg, fns.captures || []);
      }
    };
    _every(fns, apply);
  }
};

Router.prototype.traverse = function(method, path, routes, regexp, filter) {
  var fns = [], current, exact, match, next, that;
  function filterRoutes(routes) {
    if (!filter) {
      return routes;
    }
    function deepCopy(source) {
      var result = [];
      for (var i = 0; i < source.length; i++) {
        result[i] = Array.isArray(source[i]) ? deepCopy(source[i]) : source[i];
      }
      return result;
    }
    function applyFilter(fns) {
      for (var i = fns.length - 1; i >= 0; i--) {
        if (Array.isArray(fns[i])) {
          applyFilter(fns[i]);
          if (fns[i].length === 0) {
            fns.splice(i, 1);
          }
        } else {
          if (!filter(fns[i])) {
            fns.splice(i, 1);
          }
        }
      }
    }
    var newRoutes = deepCopy(routes);
    newRoutes.matched = routes.matched;
    newRoutes.captures = routes.captures;
    newRoutes.after = routes.after.filter(filter);
    applyFilter(newRoutes);
    return newRoutes;
  }
  if (path === this.delimiter && routes[method]) {
    next = [ [ routes.before, routes[method] ].filter(Boolean) ];
    next.after = [ routes.after ].filter(Boolean);
    next.matched = true;
    next.captures = [];
    return filterRoutes(next);
  }
  for (var r in routes) {
    if (routes.hasOwnProperty(r) && (!this._methods[r] || this._methods[r] && typeof routes[r] === "object" && !Array.isArray(routes[r]))) {
      current = exact = regexp + this.delimiter + r;
      if (!this.strict) {
        exact += "[" + this.delimiter + "]?";
      }
      match = path.match(new RegExp("^" + exact));
      if (!match) {
        continue;
      }
      if (match[0] && match[0] == path && routes[r][method]) {
        next = [ [ routes[r].before, routes[r][method] ].filter(Boolean) ];
        next.after = [ routes[r].after ].filter(Boolean);
        next.matched = true;
        next.captures = match.slice(1);
        if (this.recurse && routes === this.routes) {
          next.push([ routes.before, routes.on ].filter(Boolean));
          next.after = next.after.concat([ routes.after ].filter(Boolean));
        }
        return filterRoutes(next);
      }
      next = this.traverse(method, path, routes[r], current);
      if (next.matched) {
        if (next.length > 0) {
          fns = fns.concat(next);
        }
        if (this.recurse) {
          fns.push([ routes[r].before, routes[r].on ].filter(Boolean));
          next.after = next.after.concat([ routes[r].after ].filter(Boolean));
          if (routes === this.routes) {
            fns.push([ routes["before"], routes["on"] ].filter(Boolean));
            next.after = next.after.concat([ routes["after"] ].filter(Boolean));
          }
        }
        fns.matched = true;
        fns.captures = next.captures;
        fns.after = next.after;
        return filterRoutes(fns);
      }
    }
  }
  return false;
};

Router.prototype.insert = function(method, path, route, parent) {
  var methodType, parentType, isArray, nested, part;
  path = path.filter(function(p) {
    return p && p.length > 0;
  });
  parent = parent || this.routes;
  part = path.shift();
  if (/\:|\*/.test(part) && !/\\d|\\w/.test(part)) {
    part = regifyString(part, this.params);
  }
  if (path.length > 0) {
    parent[part] = parent[part] || {};
    return this.insert(method, path, route, parent[part]);
  }
  if (!part && !path.length && parent === this.routes) {
    methodType = typeof parent[method];
    switch (methodType) {
     case "function":
      parent[method] = [ parent[method], route ];
      return;
     case "object":
      parent[method].push(route);
      return;
     case "undefined":
      parent[method] = route;
      return;
    }
    return;
  }
  parentType = typeof parent[part];
  isArray = Array.isArray(parent[part]);
  if (parent[part] && !isArray && parentType == "object") {
    methodType = typeof parent[part][method];
    switch (methodType) {
     case "function":
      parent[part][method] = [ parent[part][method], route ];
      return;
     case "object":
      parent[part][method].push(route);
      return;
     case "undefined":
      parent[part][method] = route;
      return;
    }
  } else if (parentType == "undefined") {
    nested = {};
    nested[method] = route;
    parent[part] = nested;
    return;
  }
  throw new Error("Invalid route context: " + parentType);
};



Router.prototype.extend = function(methods) {
  var self = this, len = methods.length, i;
  function extend(method) {
    self._methods[method] = true;
    self[method] = function() {
      var extra = arguments.length === 1 ? [ method, "" ] : [ method ];
      self.on.apply(self, extra.concat(Array.prototype.slice.call(arguments)));
    };
  }
  for (i = 0; i < len; i++) {
    extend(methods[i]);
  }
};

Router.prototype.runlist = function(fns) {
  var runlist = this.every && this.every.before ? [ this.every.before ].concat(_flatten(fns)) : _flatten(fns);
  if (this.every && this.every.on) {
    runlist.push(this.every.on);
  }
  runlist.captures = fns.captures;
  runlist.source = fns.source;
  return runlist;
};

Router.prototype.mount = function(routes, path) {
  if (!routes || typeof routes !== "object" || Array.isArray(routes)) {
    return;
  }
  var self = this;
  path = path || [];
  if (!Array.isArray(path)) {
    path = path.split(self.delimiter);
  }
  function insertOrMount(route, local) {
    var rename = route, parts = route.split(self.delimiter), routeType = typeof routes[route], isRoute = parts[0] === "" || !self._methods[parts[0]], event = isRoute ? "on" : rename;
    if (isRoute) {
      rename = rename.slice((rename.match(new RegExp("^" + self.delimiter)) || [ "" ])[0].length);
      parts.shift();
    }
    if (isRoute && routeType === "object" && !Array.isArray(routes[route])) {
      local = local.concat(parts);
      self.mount(routes[route], local);
      return;
    }
    if (isRoute) {
      local = local.concat(rename.split(self.delimiter));
      local = terminator(local, self.delimiter);
    }
    self.insert(event, local, routes[route]);
  }
  for (var route in routes) {
    if (routes.hasOwnProperty(route)) {
      insertOrMount(route, path.slice(0));
    }
  }
};



}(typeof exports === "object" ? exports : window));
},{}],3:[function(require,module,exports){
module.exports = {
  XmlEntities: require('./lib/xml-entities.js'),
  Html4Entities: require('./lib/html4-entities.js'),
  Html5Entities: require('./lib/html5-entities.js'),
  AllHtmlEntities: require('./lib/html5-entities.js')
};

},{"./lib/html4-entities.js":4,"./lib/html5-entities.js":5,"./lib/xml-entities.js":6}],4:[function(require,module,exports){
var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'Oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'oelig', 'oelig', 'scaron', 'scaron', 'yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];

var alphaIndex = {};
var numIndex = {};

var i = 0;
var length = HTML_ALPHA.length;
while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
}

/**
 * @constructor
 */
function Html4Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.decode = function(str) {
    if (str.length === 0) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1).toLowerCase() === 'x' ?
                parseInt(entity.substr(2), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.decode = function(str) {
    return new Html4Entities().decode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encode = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var alpha = numIndex[str.charCodeAt(i)];
        result += alpha ? "&" + alpha + ";" : str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encode = function(str) {
    return new Html4Entities().encode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonUTF = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var cc = str.charCodeAt(i);
        var alpha = numIndex[cc];
        if (alpha) {
            result += "&" + alpha + ";";
        } else if (cc < 32 || cc > 126) {
            result += "&#" + cc + ";";
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonUTF = function(str) {
    return new Html4Entities().encodeNonUTF(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonASCII = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonASCII = function(str) {
    return new Html4Entities().encodeNonASCII(str);
};

module.exports = Html4Entities;

},{}],5:[function(require,module,exports){
var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['CloseCurlyDoubleQuote', [8221]], ['CloseCurlyQuote', [8217]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];

var alphaIndex = {};
var charIndex = {};

createIndexes(alphaIndex, charIndex);

/**
 * @constructor
 */
function Html5Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.decode = function(str) {
    if (str.length === 0) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1) === 'x' ?
                parseInt(entity.substr(2).toLowerCase(), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.decode = function(str) {
    return new Html5Entities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encode = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var charInfo = charIndex[str.charCodeAt(i)];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        result += str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encode = function(str) {
    return new Html5Entities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonUTF = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var charInfo = charIndex[c];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonUTF = function(str) {
    return new Html5Entities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonASCII = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonASCII = function(str) {
    return new Html5Entities().encodeNonASCII(str);
 };

/**
 * @param {Object} alphaIndex Passed by reference.
 * @param {Object} charIndex Passed by reference.
 */
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    var _results = [];
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            _results.push(addChar && (charInfo[chr2] = alpha));
        } else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            _results.push(addChar && (charInfo[''] = alpha));
        }
    }
}

module.exports = Html5Entities;

},{}],6:[function(require,module,exports){
var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};

var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};

var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};

/**
 * @constructor
 */
function XmlEntities() {}

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encode = function(str) {
    if (str.length === 0) {
        return '';
    }
    return str.replace(/<|>|"|'|&/g, function(s) {
        return CHAR_S_INDEX[s];
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encode = function(str) {
    return new XmlEntities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.decode = function(str) {
    if (str.length === 0) {
        return '';
    }
    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {
        if (s.charAt(1) === '#') {
            var code = s.charAt(2).toLowerCase() === 'x' ?
                parseInt(s.substr(3), 16) :
                parseInt(s.substr(2));

            if (isNaN(code) || code < -32768 || code > 65535) {
                return '';
            }
            return String.fromCharCode(code);
        }
        return ALPHA_INDEX[s] || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.decode = function(str) {
    return new XmlEntities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonUTF = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var alpha = CHAR_INDEX[c];
        if (alpha) {
            result += "&" + alpha + ";";
            i++;
            continue;
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonUTF = function(str) {
    return new XmlEntities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonASCII = function(str) {
    var strLenght = str.length;
    if (strLenght === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLenght) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonASCII = function(str) {
    return new XmlEntities().encodeNonASCII(str);
 };

module.exports = XmlEntities;

},{}],7:[function(require,module,exports){
'use strict';

module.exports = require('react/lib/ReactDOM');

},{"react/lib/ReactDOM":42}],8:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 * @typechecks static-only
 */

'use strict';

var ReactMount = require('./ReactMount');

var findDOMNode = require('./findDOMNode');
var focusNode = require('fbjs/lib/focusNode');

var Mixin = {
  componentDidMount: function () {
    if (this.props.autoFocus) {
      focusNode(findDOMNode(this));
    }
  }
};

var AutoFocusUtils = {
  Mixin: Mixin,

  focusDOMComponent: function () {
    focusNode(ReactMount.getNode(this._rootNodeID));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactMount":72,"./findDOMNode":115,"fbjs/lib/focusNode":145}],9:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBeforeInput: null }),
      captured: keyOf({ onBeforeInputCapture: null })
    },
    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionEnd: null }),
      captured: keyOf({ onCompositionEndCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionStart: null }),
      captured: keyOf({ onCompositionStartCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionUpdate: null }),
      captured: keyOf({ onCompositionUpdateCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventConstants":21,"./EventPropagators":25,"./FallbackCompositionState":26,"./SyntheticCompositionEvent":97,"./SyntheticInputEvent":101,"fbjs/lib/ExecutionEnvironment":137,"fbjs/lib/keyOf":155}],10:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],11:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactPerf = require('./ReactPerf');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function (styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function (node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
  setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))

},{"./CSSProperty":10,"./ReactPerf":78,"./dangerousStyleValue":112,"_process":1,"fbjs/lib/ExecutionEnvironment":137,"fbjs/lib/camelizeStyleName":139,"fbjs/lib/hyphenateStyleName":150,"fbjs/lib/memoizeStringOnly":157,"fbjs/lib/warning":162}],12:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
}).call(this,require('_process'))

},{"./Object.assign":29,"./PooledClass":30,"_process":1,"fbjs/lib/invariant":151}],13:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onChange: null }),
      captured: keyOf({ onChangeCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
      if (targetID) {
        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventConstants":21,"./EventPluginHub":22,"./EventPropagators":25,"./ReactUpdates":90,"./SyntheticEvent":99,"./getEventTarget":121,"./isEventSupported":126,"./isTextInputElement":127,"fbjs/lib/ExecutionEnvironment":137,"fbjs/lib/keyOf":155}],14:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function () {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;
},{}],15:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require('./Danger');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
var ReactPerf = require('./ReactPerf');

var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var invariant = require('fbjs/lib/invariant');

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.

  // fix render order error in safari
  // IE8 will throw error when index out of list size.
  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

  parentNode.insertBefore(childNode, beforeChild);
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function (updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup;
    // markupList is either a list of markup or just a list of elements
    if (markupList.length && typeof markupList[0] === 'string') {
      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
    } else {
      renderedMarkup = markupList;
    }

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
  updateTextContent: 'updateTextContent'
});

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))

},{"./Danger":18,"./ReactMultiChildUpdateTypes":74,"./ReactPerf":78,"./setInnerHTML":131,"./setTextContent":132,"_process":1,"fbjs/lib/invariant":151}],16:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };

      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseAttribute:
   *   Whether the property must be accessed and mutated using `*Attribute()`.
   *   (This includes anything that fails `<propName> in <element>`.)
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function (nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/invariant":151}],17:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactPerf = require('./ReactPerf');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

// Simplified subset
var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function (name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
      } else if (propertyInfo.mustUseAttribute) {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      } else {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseAttribute) {
        node.removeAttribute(propertyInfo.attributeName);
      } else {
        var propName = propertyInfo.propertyName;
        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
  setValueForProperty: 'setValueForProperty',
  setValueForAttribute: 'setValueForAttribute',
  deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))

},{"./DOMProperty":16,"./ReactPerf":78,"./quoteAttributeValueForBrowser":129,"_process":1,"fbjs/lib/warning":162}],18:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Danger: Discarding unexpected node:', renderNode);
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

    var newChild;
    if (typeof markup === 'string') {
      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    } else {
      newChild = markup;
    }
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/ExecutionEnvironment":137,"fbjs/lib/createNodesFromMarkup":142,"fbjs/lib/emptyFunction":143,"fbjs/lib/getMarkupWrap":147,"fbjs/lib/invariant":151}],19:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":155}],20:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var ReactMount = require('./ReactMount');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({ onMouseEnter: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  },
  mouseLeave: {
    registrationName: keyOf({ onMouseLeave: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    var fromID = '';
    var toID = '';
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      fromID = topLevelTargetID;
      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
      if (to) {
        toID = ReactMount.getID(to);
      } else {
        to = win;
      }
      to = to || win;
    } else {
      from = win;
      to = topLevelTarget;
      toID = topLevelTargetID;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":21,"./EventPropagators":25,"./ReactMount":72,"./SyntheticMouseEvent":103,"fbjs/lib/keyOf":155}],21:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topAbort: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"fbjs/lib/keyMirror":154}],22:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function (InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function () {
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function (id, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(id, registrationName, listener);
    }
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (id, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(id, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function (id) {
    for (var registrationName in listenerBank) {
      if (!listenerBank[registrationName][id]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }

      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}).call(this,require('_process'))

},{"./EventPluginRegistry":23,"./EventPluginUtils":24,"./ReactErrorUtils":63,"./accumulateInto":109,"./forEachAccumulated":117,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],23:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/invariant":151}],24:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('./EventConstants');
var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function (InjectedMount) {
    injection.Mount = InjectedMount;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, simulated, listener, domID) {
  var type = event.type || 'unknown-event';
  event.currentTarget = injection.Mount.getNode(domID);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
  }
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getNode: function (id) {
    return injection.Mount.getNode(id);
  },
  getID: function (node) {
    return injection.Mount.getID(node);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))

},{"./EventConstants":21,"./ReactErrorUtils":63,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],25:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');

var warning = require('fbjs/lib/warning');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))

},{"./EventConstants":21,"./EventPluginHub":22,"./accumulateInto":109,"./forEachAccumulated":117,"_process":1,"fbjs/lib/warning":162}],26:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./Object.assign":29,"./PooledClass":30,"./getTextContentAccessor":124}],27:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    challenge: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    inputMode: MUST_USE_ATTRIBUTE,
    integrity: null,
    is: MUST_USE_ATTRIBUTE,
    keyParams: MUST_USE_ATTRIBUTE,
    keyType: MUST_USE_ATTRIBUTE,
    kind: null,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    minLength: MUST_USE_ATTRIBUTE,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    nonce: MUST_USE_ATTRIBUTE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcLang: null,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    summary: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,
    wrap: null,

    /**
     * RDFa Properties
     */
    about: MUST_USE_ATTRIBUTE,
    datatype: MUST_USE_ATTRIBUTE,
    inlist: MUST_USE_ATTRIBUTE,
    prefix: MUST_USE_ATTRIBUTE,
    // property is also supported for OpenGraph in meta tags.
    property: MUST_USE_ATTRIBUTE,
    resource: MUST_USE_ATTRIBUTE,
    'typeof': MUST_USE_ATTRIBUTE,
    vocab: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: MUST_USE_ATTRIBUTE,
    autoCorrect: MUST_USE_ATTRIBUTE,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: null,
    // color is for Safari mask-icon link
    color: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: null,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: MUST_USE_ATTRIBUTE,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoComplete: 'autocomplete',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    autoSave: 'autosave',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":16,"fbjs/lib/ExecutionEnvironment":137}],28:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require('./ReactPropTypes');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))

},{"./ReactPropTypeLocations":80,"./ReactPropTypes":81,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],29:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;
},{}],30:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/invariant":151}],31:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

'use strict';

var ReactDOM = require('./ReactDOM');
var ReactDOMServer = require('./ReactDOMServer');
var ReactIsomorphic = require('./ReactIsomorphic');

var assign = require('./Object.assign');
var deprecated = require('./deprecated');

// `version` will be added here by ReactIsomorphic.
var React = {};

assign(React, ReactIsomorphic);

assign(React, {
  // ReactDOM
  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

  // ReactDOMServer
  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
});

React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

module.exports = React;
},{"./Object.assign":29,"./ReactDOM":42,"./ReactDOMServer":52,"./ReactIsomorphic":70,"./deprecated":113}],32:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var ReactInstanceMap = require('./ReactInstanceMap');

var findDOMNode = require('./findDOMNode');
var warning = require('fbjs/lib/warning');

var didWarnKey = '_getDOMNodeDidWarn';

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function () {
    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
    this.constructor[didWarnKey] = true;
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;
}).call(this,require('_process'))

},{"./ReactInstanceMap":69,"./findDOMNode":115,"_process":1,"fbjs/lib/warning":162}],33:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ReactPerf = require('./ReactPerf');
var ViewportMetrics = require('./ViewportMetrics');

var assign = require('./Object.assign');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
  putListener: 'putListener',
  deleteListener: 'deleteListener'
});

module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":21,"./EventPluginHub":22,"./EventPluginRegistry":23,"./Object.assign":29,"./ReactEventEmitterMixin":64,"./ReactPerf":78,"./ViewportMetrics":108,"./isEventSupported":126}],34:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, null);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, transaction, context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, null);
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))

},{"./ReactReconciler":83,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":133,"./traverseAllChildren":134,"_process":1,"fbjs/lib/warning":162}],35:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":30,"./ReactElement":59,"./traverseAllChildren":134,"fbjs/lib/emptyFunction":143}],36:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

var warnedSetProps = false;
function warnSetProps() {
  if (!warnedSetProps) {
    warnedSetProps = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
  }
}

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
    }
    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
    }
    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
    }
    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = (name in RESERVED_SPEC_KEYS);
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

    var isInherited = (name in Constructor);
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function (partialProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueSetProps(this, partialProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function (newProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueReplaceProps(this, newProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function () {};
assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactComponent":37,"./ReactElement":59,"./ReactNoopUpdateQueue":76,"./ReactPropTypeLocationNames":79,"./ReactPropTypeLocations":80,"_process":1,"fbjs/lib/emptyObject":144,"fbjs/lib/invariant":151,"fbjs/lib/keyMirror":154,"fbjs/lib/keyOf":155,"fbjs/lib/warning":162}],37:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
    setProps: ['setProps', 'Instead, call render again at the top level.']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}).call(this,require('_process'))

},{"./ReactNoopUpdateQueue":76,"./canDefineProperty":111,"_process":1,"fbjs/lib/emptyObject":144,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],38:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactMount = require('./ReactMount');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;
},{"./ReactDOMIDOperations":47,"./ReactMount":72}],39:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/invariant":151}],40:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactPerf = require('./ReactPerf');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  return Component(this.props, this.context, this.updater);
};

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst;
    var renderedElement;

    // This is a way to detect if Component is a stateless arrow function
    // component, which is not newable. It might not be 100% reliable but is
    // something we can do until we start detecting that Component extends
    // React.Component. We already assume that typeof Component === 'function'.
    var canInstantiate = ('prototype' in Component);

    if (canInstantiate) {
      if (process.env.NODE_ENV !== 'production') {
        ReactCurrentOwner.current = this;
        try {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
      }
    }

    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
      renderedElement = inst;
      inst = new StatelessComponent(Component);
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
      } else {
        // We support ES6 inheriting from React.Component, the module pattern,
        // and stateless components, but not ES6 classes that don't extend
        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
      }
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    if (inst.componentWillMount) {
      inst.componentWillMount();
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    this._renderedComponent = this._instantiateReactComponent(renderedElement);

    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function () {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      inst.componentWillUnmount();
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
    this._instance = null;

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var maskedContext = null;
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      if (process.env.NODE_ENV !== 'production') {
        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function (newProps) {
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.propTypes) {
        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function (propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // top-level render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
          }
        }
      }
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;

    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
    var nextProps;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement === nextParentElement) {
      // Skip checking prop types again -- we don't read inst.props to avoid
      // warning for DOM component props in this upgrade
      nextProps = nextParentElement.props;
    } else {
      nextProps = this._processProps(nextParentElement.props);
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    ReactCurrentOwner.current = this;
    try {
      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactCurrentOwner.current = null;
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent',
  _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactComponentEnvironment":39,"./ReactCurrentOwner":41,"./ReactElement":59,"./ReactInstanceMap":69,"./ReactPerf":78,"./ReactPropTypeLocationNames":79,"./ReactPropTypeLocations":80,"./ReactReconciler":83,"./ReactUpdateQueue":89,"./shouldUpdateReactComponent":133,"_process":1,"fbjs/lib/emptyObject":144,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],41:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],42:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  findDOMNode: findDOMNode,
  render: render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

    // shams
    Object.create, Object.freeze];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
        break;
      }
    }
  }
}

module.exports = React;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":41,"./ReactDOMTextComponent":53,"./ReactDefaultInjection":56,"./ReactInstanceHandles":68,"./ReactMount":72,"./ReactPerf":78,"./ReactReconciler":83,"./ReactUpdates":90,"./ReactVersion":91,"./findDOMNode":115,"./renderSubtreeIntoContainer":130,"_process":1,"fbjs/lib/ExecutionEnvironment":137,"fbjs/lib/warning":162}],43:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var mouseListenerNames = {
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,

  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
};

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = {
  getNativeProps: function (inst, props, context) {
    if (!props.disabled) {
      return props;
    }

    // Copy the props, except the mouse listeners
    var nativeProps = {};
    for (var key in props) {
      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
        nativeProps[key] = props[key];
      }
    }

    return nativeProps;
  }
};

module.exports = ReactDOMButton;
},{}],44:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventConstants = require('./EventConstants');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMButton = require('./ReactDOMButton');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactMount = require('./ReactMount');
var ReactMultiChild = require('./ReactMultiChild');
var ReactPerf = require('./ReactPerf');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var keyOf = require('fbjs/lib/keyOf');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var CHILDREN = keyOf({ children: null });
var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });

var ELEMENT_NODE_TYPE = 1;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

var legacyPropsDescriptor;
if (process.env.NODE_ENV !== 'production') {
  legacyPropsDescriptor = {
    props: {
      enumerable: false,
      get: function () {
        var component = this._reactInternalComponent;
        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
        return component._currentElement.props;
      }
    }
  };
}

function legacyGetDOMNode() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return this;
}

function legacyIsMounted() {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return !!component;
}

function legacySetStateEtc() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
}

function legacySetProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function legacyReplaceProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined becauses undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (process.env.NODE_ENV !== 'production') {
    if (voidElementTags[component._tag]) {
      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
    }
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
}

function enqueuePutListener(id, registrationName, listener, transaction) {
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
    listenTo(registrationName, doc);
  }
  transaction.getReactMountReady().enqueue(putListener, {
    id: id,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
  var node = ReactMount.getNode(inst._rootNodeID);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

  switch (inst._tag) {
    case 'iframe':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
        }
      }

      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
      break;
  }
}

function mountReadyInputWrapper() {
  ReactDOMInput.mountReadyWrapper(this);
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = ({}).hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
    validatedTagCache[tag] = true;
  }
}

function processChildContextDev(context, inst) {
  // Pass down our tag name to child components for validation purposes
  context = assign({}, context);
  var info = context[validateDOMNesting.ancestorInfoContextKey];
  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
  return context;
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag.toLowerCase();
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._nodeWithLegacyProperties = null;
  if (process.env.NODE_ENV !== 'production') {
    this._unprocessedContextDev = null;
    this._processedContextDev = null;
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function (element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (rootID, transaction, context) {
    this._rootNodeID = rootID;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getNativeProps(this, props, context);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, context);
        props = ReactDOMInput.getNativeProps(this, props, context);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, context);
        props = ReactDOMOption.getNativeProps(this, props, context);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, context);
        props = ReactDOMSelect.getNativeProps(this, props, context);
        context = ReactDOMSelect.processChildContext(this, props, context);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, context);
        props = ReactDOMTextarea.getNativeProps(this, props, context);
        break;
    }

    assertValidProps(this, props);
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      this._unprocessedContextDev = context;
      this._processedContextDev = processChildContextDev(context, this);
      context = this._processedContextDev;
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement(this._currentElement.type);
      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
      // Populate node cache
      ReactMount.getID(el);
      this._updateDOMProperties({}, props, transaction, el);
      this._createInitialChildren(transaction, props, context, el);
      mountImage = el;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
      // falls through
      case 'button':
      case 'select':
      case 'textarea':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (propKey !== CHILDREN) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, el) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        setInnerHTML(el, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        setTextContent(el, contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          el.appendChild(mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
        break;
    }

    if (process.env.NODE_ENV !== 'production') {
      // If the context is reference-equal to the old one, pass down the same
      // processed object so the update bailout in ReactReconciler behaves
      // correctly (and identically in dev and prod). See #5005.
      if (this._unprocessedContextDev !== context) {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
      }
      context = this._processedContextDev;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction, null);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    if (!canDefineProperty && this._nodeWithLegacyProperties) {
      this._nodeWithLegacyProperties.props = nextProps;
    }

    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.deleteValueForProperty(node, propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        if (propKey === CHILDREN) {
          nextProp = null;
        }
        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      if (!node) {
        node = ReactMount.getNode(this._rootNodeID);
      }
      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function () {
    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
        ReactDOMInput.unmountWrapper(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
        break;
    }

    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._wrapperState = null;
    if (this._nodeWithLegacyProperties) {
      var node = this._nodeWithLegacyProperties;
      node._reactInternalComponent = null;
      this._nodeWithLegacyProperties = null;
    }
  },

  getPublicInstance: function () {
    if (!this._nodeWithLegacyProperties) {
      var node = ReactMount.getNode(this._rootNodeID);

      node._reactInternalComponent = this;
      node.getDOMNode = legacyGetDOMNode;
      node.isMounted = legacyIsMounted;
      node.setState = legacySetStateEtc;
      node.replaceState = legacySetStateEtc;
      node.forceUpdate = legacySetStateEtc;
      node.setProps = legacySetProps;
      node.replaceProps = legacyReplaceProps;

      if (process.env.NODE_ENV !== 'production') {
        if (canDefineProperty) {
          Object.defineProperties(node, legacyPropsDescriptor);
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
      } else {
        // updateComponent will update this property on subsequent renders
        node.props = this._currentElement.props;
      }

      this._nodeWithLegacyProperties = node;
    }
    return this._nodeWithLegacyProperties;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))

},{"./AutoFocusUtils":8,"./CSSPropertyOperations":11,"./DOMProperty":16,"./DOMPropertyOperations":17,"./EventConstants":21,"./Object.assign":29,"./ReactBrowserEventEmitter":33,"./ReactComponentBrowserEnvironment":38,"./ReactDOMButton":43,"./ReactDOMInput":48,"./ReactDOMOption":49,"./ReactDOMSelect":50,"./ReactDOMTextarea":54,"./ReactMount":72,"./ReactMultiChild":73,"./ReactPerf":78,"./ReactUpdateQueue":89,"./canDefineProperty":111,"./escapeTextContentForBrowser":114,"./isEventSupported":126,"./setInnerHTML":131,"./setTextContent":132,"./validateDOMNesting":135,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/keyOf":155,"fbjs/lib/shallowEqual":160,"fbjs/lib/warning":162}],45:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 * @typechecks static-only
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');

var mapObject = require('fbjs/lib/mapObject');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if (process.env.NODE_ENV !== 'production') {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hgroup: 'hgroup',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  image: 'image',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOMFactories;
}).call(this,require('_process'))

},{"./ReactElement":59,"./ReactElementValidator":60,"_process":1,"fbjs/lib/mapObject":156}],46:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: false
};

module.exports = ReactDOMFeatureFlags;
},{}],47:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var invariant = require('fbjs/lib/invariant');

/**
 * Errors for properties that should not be updated with `updatePropertyByID()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function (id, name, value) {
    var node = ReactMount.getNode(id);
    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":15,"./DOMPropertyOperations":17,"./ReactMount":72,"./ReactPerf":78,"_process":1,"fbjs/lib/invariant":151}],48:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getNativeProps: function (inst, props, context) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var nativeProps = assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null,
      onChange: _handleChange.bind(inst)
    };
  },

  mountReadyWrapper: function (inst) {
    // Can't be in mountWrapper or else server rendering leaks.
    instancesByReactID[inst._rootNodeID] = inst;
  },

  unmountWrapper: function (inst) {
    delete instancesByReactID[inst._rootNodeID];
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
    }

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactMount.getNode(this._rootNodeID);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React with non-React.
      var otherID = ReactMount.getID(otherNode);
      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
      var otherInstance = instancesByReactID[otherID];
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))

},{"./LinkedValueUtils":28,"./Object.assign":29,"./ReactDOMIDOperations":47,"./ReactMount":72,"./ReactUpdates":90,"_process":1,"fbjs/lib/invariant":151}],49:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactDOMSelect = require('./ReactDOMSelect');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = ReactDOMSelect.valueContextKey;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, context) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
    }

    // Look up whether this option is 'selected' via context
    var selectValue = context[valueContextKey];

    // If context key is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === '' + props.value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === '' + props.value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  getNativeProps: function (inst, props, context) {
    var nativeProps = assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      nativeProps.selected = inst._wrapperState.selected;
    }

    var content = '';

    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    ReactChildren.forEach(props.children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
      }
    });

    if (content) {
      nativeProps.children = content;
    }

    return nativeProps;
  }

};

module.exports = ReactDOMOption;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactChildren":35,"./ReactDOMSelect":50,"_process":1,"fbjs/lib/warning":162}],50:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    if (props.multiple) {
      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    } else {
      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactMount.getNode(inst._rootNodeID).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  valueContextKey: valueContextKey,

  getNativeProps: function (inst, props, context) {
    return assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };
  },

  processChildContext: function (inst, props, context) {
    // Pass down initial value so initial generated markup has correct
    // `selected` attributes
    var childContext = assign({}, context);
    childContext[valueContextKey] = inst._wrapperState.initialValue;
    return childContext;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // the context value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  this._wrapperState.pendingUpdate = true;
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))

},{"./LinkedValueUtils":28,"./Object.assign":29,"./ReactMount":72,"./ReactUpdates":90,"_process":1,"fbjs/lib/warning":162}],51:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":123,"./getTextContentAccessor":124,"fbjs/lib/ExecutionEnvironment":137}],52:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactServerRendering = require('./ReactServerRendering');
var ReactVersion = require('./ReactVersion');

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;
},{"./ReactDefaultInjection":56,"./ReactServerRendering":87,"./ReactVersion":91}],53:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactMount = require('./ReactMount');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setTextContent = require('./setTextContent');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    this._rootNodeID = rootID;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement('span');
      DOMPropertyOperations.setAttributeForID(el, rootID);
      // Populate node cache
      ReactMount.getID(el);
      setTextContent(el, this._stringText);
      return el;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var node = ReactMount.getNode(this._rootNodeID);
        DOMChildrenOperations.updateTextContent(node, nextStringText);
      }
    }
  },

  unmountComponent: function () {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":15,"./DOMPropertyOperations":17,"./Object.assign":29,"./ReactComponentBrowserEnvironment":38,"./ReactMount":72,"./escapeTextContentForBrowser":114,"./setTextContent":132,"./validateDOMNesting":135,"_process":1}],54:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getNativeProps: function (inst, props, context) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    var nativeProps = assign({}, props, {
      defaultValue: undefined,
      value: undefined,
      children: inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
      }
      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(props);

    inst._wrapperState = {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))

},{"./LinkedValueUtils":28,"./Object.assign":29,"./ReactDOMIDOperations":47,"./ReactUpdates":90,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],55:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);
    } else {
      transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./Object.assign":29,"./ReactUpdates":90,"./Transaction":107,"fbjs/lib/emptyFunction":143}],56:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var ClientReactRootIndex = require('./ClientReactRootIndex');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SelectEventPlugin = require('./SelectEventPlugin');
var ServerReactRootIndex = require('./ServerReactRootIndex');
var SimpleEventPlugin = require('./SimpleEventPlugin');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if (process.env.NODE_ENV !== 'production') {
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      var ReactDefaultPerf = require('./ReactDefaultPerf');
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};
}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":9,"./ChangeEventPlugin":13,"./ClientReactRootIndex":14,"./DefaultEventPluginOrder":19,"./EnterLeaveEventPlugin":20,"./HTMLDOMPropertyConfig":27,"./ReactBrowserComponentMixin":32,"./ReactComponentBrowserEnvironment":38,"./ReactDOMComponent":44,"./ReactDOMTextComponent":53,"./ReactDefaultBatchingStrategy":55,"./ReactDefaultPerf":57,"./ReactEventListener":65,"./ReactInjection":66,"./ReactInstanceHandles":68,"./ReactMount":72,"./ReactReconcileTransaction":82,"./SVGDOMPropertyConfig":92,"./SelectEventPlugin":93,"./ServerReactRootIndex":94,"./SimpleEventPlugin":95,"_process":1,"fbjs/lib/ExecutionEnvironment":137}],57:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var performanceNow = require('fbjs/lib/performanceNow');

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function () {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function () {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function () {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  getMeasurementsSummaryMap: function (measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
    return summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  printDOM: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function (item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result.type = item.type;
      result.args = JSON.stringify(item.args);
      return result;
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  _recordWrite: function (id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function (moduleName, fnName, func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0,
          created: {}
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function (update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
          });
        } else {
          // basic format
          var id = args[0];
          if (typeof id === 'object') {
            id = ReactMount.getID(args[0]);
          }
          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
      fnName === '_renderValidatedComponent')) {

        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          entry.created[rootNodeID] = true;
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;
},{"./DOMProperty":16,"./ReactDefaultPerfAnalysis":58,"./ReactMount":72,"./ReactPerf":78,"fbjs/lib/performanceNow":159}],58:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

'use strict';

var assign = require('./Object.assign');

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  SET_MARKUP: 'set innerHTML',
  TEXT_CONTENT: 'set textContent',
  'setValueForProperty': 'update attribute',
  'setValueForAttribute': 'update attribute',
  'deleteValueForProperty': 'remove attribute',
  'setValueForStyles': 'update styles',
  'replaceNodeWithMarkup': 'replace',
  'updateTextContent': 'set textContent'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  measurements.forEach(function (measurement) {
    Object.keys(measurement.writes).forEach(function (id) {
      measurement.writes[id].forEach(function (write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    });
  });
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function (a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function (a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    // check if component newly created
    if (measurement.created[id]) {
      isDirty = true;
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"./Object.assign":29}],59:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    Object.freeze(element.props);
    Object.freeze(element);
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

  if (process.env.NODE_ENV !== 'production') {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactCurrentOwner":41,"./canDefineProperty":111,"_process":1}],60:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactCurrentOwner = require('./ReactCurrentOwner');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
  if (addenda === null) {
    // we already showed the warning
    return;
  }
  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} messageType A key used for de-duping warnings.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 * @returns {?object} A set of addenda to use in the warning message, or null
 * if the warning has already been shown before (and shouldn't be shown again).
 */
function getAddendaForKeyUse(messageType, element, parentType) {
  var addendum = getDeclarationErrorAddendum();
  if (!addendum) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      addendum = ' Check the top-level render call using <' + parentName + '>.';
    }
  }

  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
  if (memoizer[addendum]) {
    return null;
  }
  memoizer[addendum] = true;

  var addenda = {
    parentOrOwner: addendum,
    url: ' See https://fb.me/react-warning-keys for more information.',
    childOwner: null
  };

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  return addenda;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":41,"./ReactElement":59,"./ReactPropTypeLocationNames":79,"./ReactPropTypeLocations":80,"./canDefineProperty":111,"./getIteratorFn":122,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],61:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactReconciler = require('./ReactReconciler');

var assign = require('./Object.assign');

var placeholderElement;

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function (component) {
    placeholderElement = ReactElement.createElement(component);
  }
};

var ReactEmptyComponent = function (instantiate) {
  this._currentElement = null;
  this._rootNodeID = null;
  this._renderedComponent = instantiate(placeholderElement);
};
assign(ReactEmptyComponent.prototype, {
  construct: function (element) {},
  mountComponent: function (rootID, transaction, context) {
    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
    this._rootNodeID = rootID;
    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
  },
  receiveComponent: function () {},
  unmountComponent: function (rootID, transaction, context) {
    ReactReconciler.unmountComponent(this._renderedComponent);
    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
    this._rootNodeID = null;
    this._renderedComponent = null;
  }
});

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{"./Object.assign":29,"./ReactElement":59,"./ReactEmptyComponentRegistry":62,"./ReactReconciler":83}],62:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponentRegistry
 */

'use strict';

// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

var ReactEmptyComponentRegistry = {
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID,
  deregisterNullComponentID: deregisterNullComponentID
};

module.exports = ReactEmptyComponentRegistry;
},{}],63:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
    return undefined;
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))

},{"_process":1}],64:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":22}],65:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  // TODO: Re-enable event.path handling
  //
  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
  //   // New browsers have a path attribute on native events
  //   handleTopLevelWithPath(bookKeeping);
  // } else {
  //   // Legacy browsers don't have a path attribute on native events
  //   handleTopLevelWithoutPath(bookKeeping);
  // }

  void handleTopLevelWithPath; // temporarily unused
  handleTopLevelWithoutPath(bookKeeping);
}

// Legacy browsers don't have a path attribute on native events
function handleTopLevelWithoutPath(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// New browsers have a path attribute on native events
function handleTopLevelWithPath(bookKeeping) {
  var path = bookKeeping.nativeEvent.path;
  var currentNativeTarget = path[0];
  var eventsFired = 0;
  for (var i = 0; i < path.length; i++) {
    var currentPathElement = path[i];
    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
      currentNativeTarget = path[i + 1];
    }
    // TODO: slow
    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
    if (reactParent === currentPathElement) {
      var currentPathElementID = ReactMount.getID(currentPathElement);
      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
      bookKeeping.ancestors.push(currentPathElement);

      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
      eventsFired++;
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

      // Jump to the root of this React render tree
      while (currentPathElementID !== newRootID) {
        i++;
        currentPathElement = path[i];
        currentPathElementID = ReactMount.getID(currentPathElement);
      }
    }
  }
  if (eventsFired === 0) {
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./Object.assign":29,"./PooledClass":30,"./ReactInstanceHandles":68,"./ReactMount":72,"./ReactUpdates":90,"./getEventTarget":121,"fbjs/lib/EventListener":136,"fbjs/lib/ExecutionEnvironment":137,"fbjs/lib/getUnboundedScrollPosition":148}],66:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactClass = require('./ReactClass');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactNativeComponent = require('./ReactNativeComponent');
var ReactPerf = require('./ReactPerf');
var ReactRootIndex = require('./ReactRootIndex');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":16,"./EventPluginHub":22,"./ReactBrowserEventEmitter":33,"./ReactClass":36,"./ReactComponentEnvironment":39,"./ReactEmptyComponent":61,"./ReactNativeComponent":75,"./ReactPerf":78,"./ReactRootIndex":85,"./ReactUpdates":90}],67:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":51,"fbjs/lib/containsNode":140,"fbjs/lib/focusNode":145,"fbjs/lib/getActiveElement":146}],68:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require('./ReactRootIndex');

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
  var traverseUp = isAncestorIDOf(stop, start);
  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function () {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;
}).call(this,require('_process'))

},{"./ReactRootIndex":85,"_process":1,"fbjs/lib/invariant":151}],69:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],70:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactIsomorphic
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactComponent = require('./ReactComponent');
var ReactClass = require('./ReactClass');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var assign = require('./Object.assign');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

module.exports = React;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactChildren":35,"./ReactClass":36,"./ReactComponent":37,"./ReactDOMFactories":45,"./ReactElement":59,"./ReactElementValidator":60,"./ReactPropTypes":81,"./ReactVersion":91,"./onlyChild":128,"_process":1}],71:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags and self-closing tags)
    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":110}],72:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var containsNode = require('fbjs/lib/containsNode');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if (process.env.NODE_ENV !== 'production') {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
  if (ReactDOMFeatureFlags.useCreateElement) {
    context = assign({}, context);
    if (container.nodeType === DOC_NODE_TYPE) {
      context[ownerDocumentContextKey] = container;
    } else {
      context[ownerDocumentContextKey] = container.ownerDocument;
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (context === emptyObject) {
      context = {};
    }
    var tag = container.nodeName.toLowerCase();
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
  }
  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* forceHTML */shouldReuseMarkup);
  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container) {
  ReactReconciler.unmountComponent(instance);

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(node) {
  var reactRootID = getReactRootID(node);
  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
}

/**
 * Returns the first (deepest) ancestor of a node which is rendered by this copy
 * of React.
 */
function findFirstReactDOMImpl(node) {
  // This node might be from another React instance, so we make sure not to
  // examine the node cache here
  for (; node && node.parentNode !== node; node = node.parentNode) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      continue;
    }
    var nodeID = internalGetID(node);
    if (!nodeID) {
      continue;
    }
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

    // If containersByReactRootID contains the container we find by crawling up
    // the tree, we know that this instance of React rendered the node.
    // nb. isValid's strategy (with containsNode) does not work because render
    // trees may be nested and we don't want a false positive in that case.
    var current = node;
    var lastID;
    do {
      lastID = internalGetID(current);
      current = current.parentNode;
      if (current == null) {
        // The passed-in node has been detached from the container it was
        // originally rendered into.
        return null;
      }
    } while (lastID !== reactRootID);

    if (current === containersByReactRootID[reactRootID]) {
      return node;
    }
  }
  return null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var TopLevelWrapper = function () {};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;
};

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function (nextComponent, container) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(componentInstance, container);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function (container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var containerID = internalGetID(container);
      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
      }

      return false;
    }
    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if (process.env.NODE_ENV !== 'production') {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function (id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if (process.env.NODE_ENV !== 'production') {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        process.env.NODE_ENV !== 'production' ? warning(
        // Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
        var containerChild = container.firstChild;
        if (containerChild && reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function (id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component rendered by this copy of React.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function (node) {
    return findFirstReactDOMImpl(node);
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function (ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    if (process.env.NODE_ENV !== 'production') {
      // This will throw on the next line; give an early warning
      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
    }

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }
        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
  },

  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      container.appendChild(markup);
    } else {
      setInnerHTML(container, markup);
    }
  },

  ownerDocumentContextKey: ownerDocumentContextKey,

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  isValid: isValid,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
}).call(this,require('_process'))

},{"./DOMProperty":16,"./Object.assign":29,"./ReactBrowserEventEmitter":33,"./ReactCurrentOwner":41,"./ReactDOMFeatureFlags":46,"./ReactElement":59,"./ReactEmptyComponentRegistry":62,"./ReactInstanceHandles":68,"./ReactInstanceMap":69,"./ReactMarkupChecksum":71,"./ReactPerf":78,"./ReactReconciler":83,"./ReactUpdateQueue":89,"./ReactUpdates":90,"./instantiateReactComponent":125,"./setInnerHTML":131,"./shouldUpdateReactComponent":133,"./validateDOMNesting":135,"_process":1,"fbjs/lib/containsNode":140,"fbjs/lib/emptyObject":144,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],73:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var flattenChildren = require('./flattenChildren');

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueInsertMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    content: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the markup of a node.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function enqueueSetMarkup(parentID, markup) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.SET_MARKUP,
    markupIndex: null,
    content: markup,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    content: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
      var nextChildren;
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements);
          } finally {
            ReactCurrentOwner.current = null;
          }
          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements);
      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChild(prevChildren[name]);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        this.setMarkup(nextMarkup);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChild(prevChild);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChild(prevChildren[name]);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function () {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, mountImage) {
      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function (textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Sets this markup string.
     *
     * @param {string} markup Markup to set.
     * @protected
     */
    setMarkup: function (markup) {
      enqueueSetMarkup(this._rootNodeID, markup);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;
}).call(this,require('_process'))

},{"./ReactChildReconciler":34,"./ReactComponentEnvironment":39,"./ReactCurrentOwner":41,"./ReactMultiChildUpdateTypes":74,"./ReactReconciler":83,"./flattenChildren":116,"_process":1}],74:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  SET_MARKUP: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":154}],75:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
}).call(this,require('_process'))

},{"./Object.assign":29,"_process":1,"fbjs/lib/invariant":151}],76:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    warnTDZ(publicInstance, 'setProps');
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    warnTDZ(publicInstance, 'replaceProps');
  }

};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/warning":162}],77:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/invariant":151}],78:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function (object, objectName, methodNames) {
    if (process.env.NODE_ENV !== 'production') {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function (objName, fnName, func) {
    if (process.env.NODE_ENV !== 'production') {
      var measuredFunc = null;
      var wrapper = function () {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function (measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;
}).call(this,require('_process'))

},{"_process":1}],79:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))

},{"_process":1}],80:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":154}],81:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('./getIteratorFn');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return '<<anonymous>>';
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"./ReactElement":59,"./ReactPropTypeLocationNames":79,"./getIteratorFn":122,"fbjs/lib/emptyFunction":143}],82:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactInputSelection = require('./ReactInputSelection');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(forceHTML) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":12,"./Object.assign":29,"./PooledClass":30,"./ReactBrowserEventEmitter":33,"./ReactDOMFeatureFlags":46,"./ReactInputSelection":67,"./Transaction":107}],83:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('./ReactRef');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;
},{"./ReactRef":84}],84:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return(
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":77}],85:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function (_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;
},{}],86:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 * @typechecks
 */

'use strict';

var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;
},{}],87:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
}).call(this,require('_process'))

},{"./ReactDefaultBatchingStrategy":55,"./ReactElement":59,"./ReactInstanceHandles":68,"./ReactMarkupChecksum":71,"./ReactServerBatchingStrategy":86,"./ReactServerRenderingTransaction":88,"./ReactUpdates":90,"./instantiateReactComponent":125,"_process":1,"fbjs/lib/emptyObject":144,"fbjs/lib/invariant":151}],88:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require('./PooledClass');
var CallbackQueue = require('./CallbackQueue');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = false;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./CallbackQueue":12,"./Object.assign":29,"./PooledClass":30,"./Transaction":107,"fbjs/lib/emptyFunction":143}],89:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
  },

  enqueueSetPropsInternal: function (internalInstance, partialProps) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    var props = assign({}, element.props, partialProps);
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
  },

  enqueueReplacePropsInternal: function (internalInstance, props) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactCurrentOwner":41,"./ReactElement":59,"./ReactInstanceMap":69,"./ReactUpdates":90,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],90:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
}

assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))

},{"./CallbackQueue":12,"./Object.assign":29,"./PooledClass":30,"./ReactPerf":78,"./ReactReconciler":83,"./Transaction":107,"_process":1,"fbjs/lib/invariant":151}],91:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '0.14.7';
},{}],92:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    xlinkActuate: MUST_USE_ATTRIBUTE,
    xlinkArcrole: MUST_USE_ATTRIBUTE,
    xlinkHref: MUST_USE_ATTRIBUTE,
    xlinkRole: MUST_USE_ATTRIBUTE,
    xlinkShow: MUST_USE_ATTRIBUTE,
    xlinkTitle: MUST_USE_ATTRIBUTE,
    xlinkType: MUST_USE_ATTRIBUTE,
    xmlBase: MUST_USE_ATTRIBUTE,
    xmlLang: MUST_USE_ATTRIBUTE,
    xmlSpace: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space'
  }
};

module.exports = SVGDOMPropertyConfig;
},{"./DOMProperty":16}],93:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSelect: null }),
      captured: keyOf({ onSelectCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (id, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventConstants":21,"./EventPropagators":25,"./ReactInputSelection":67,"./SyntheticEvent":99,"./isTextInputElement":127,"fbjs/lib/ExecutionEnvironment":137,"fbjs/lib/getActiveElement":146,"fbjs/lib/keyOf":155,"fbjs/lib/shallowEqual":160}],94:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function () {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;
},{}],95:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactMount = require('./ReactMount');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  abort: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onAbort: true }),
      captured: keyOf({ onAbortCapture: true })
    }
  },
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBlur: true }),
      captured: keyOf({ onBlurCapture: true })
    }
  },
  canPlay: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlay: true }),
      captured: keyOf({ onCanPlayCapture: true })
    }
  },
  canPlayThrough: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlayThrough: true }),
      captured: keyOf({ onCanPlayThroughCapture: true })
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onClick: true }),
      captured: keyOf({ onClickCapture: true })
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onContextMenu: true }),
      captured: keyOf({ onContextMenuCapture: true })
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCopy: true }),
      captured: keyOf({ onCopyCapture: true })
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCut: true }),
      captured: keyOf({ onCutCapture: true })
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDoubleClick: true }),
      captured: keyOf({ onDoubleClickCapture: true })
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrag: true }),
      captured: keyOf({ onDragCapture: true })
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnd: true }),
      captured: keyOf({ onDragEndCapture: true })
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnter: true }),
      captured: keyOf({ onDragEnterCapture: true })
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragExit: true }),
      captured: keyOf({ onDragExitCapture: true })
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragLeave: true }),
      captured: keyOf({ onDragLeaveCapture: true })
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragOver: true }),
      captured: keyOf({ onDragOverCapture: true })
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragStart: true }),
      captured: keyOf({ onDragStartCapture: true })
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrop: true }),
      captured: keyOf({ onDropCapture: true })
    }
  },
  durationChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDurationChange: true }),
      captured: keyOf({ onDurationChangeCapture: true })
    }
  },
  emptied: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEmptied: true }),
      captured: keyOf({ onEmptiedCapture: true })
    }
  },
  encrypted: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEncrypted: true }),
      captured: keyOf({ onEncryptedCapture: true })
    }
  },
  ended: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEnded: true }),
      captured: keyOf({ onEndedCapture: true })
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onError: true }),
      captured: keyOf({ onErrorCapture: true })
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onFocus: true }),
      captured: keyOf({ onFocusCapture: true })
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onInput: true }),
      captured: keyOf({ onInputCapture: true })
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyDown: true }),
      captured: keyOf({ onKeyDownCapture: true })
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyPress: true }),
      captured: keyOf({ onKeyPressCapture: true })
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyUp: true }),
      captured: keyOf({ onKeyUpCapture: true })
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoad: true }),
      captured: keyOf({ onLoadCapture: true })
    }
  },
  loadedData: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedData: true }),
      captured: keyOf({ onLoadedDataCapture: true })
    }
  },
  loadedMetadata: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedMetadata: true }),
      captured: keyOf({ onLoadedMetadataCapture: true })
    }
  },
  loadStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadStart: true }),
      captured: keyOf({ onLoadStartCapture: true })
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseDown: true }),
      captured: keyOf({ onMouseDownCapture: true })
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseMove: true }),
      captured: keyOf({ onMouseMoveCapture: true })
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOut: true }),
      captured: keyOf({ onMouseOutCapture: true })
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOver: true }),
      captured: keyOf({ onMouseOverCapture: true })
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseUp: true }),
      captured: keyOf({ onMouseUpCapture: true })
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPaste: true }),
      captured: keyOf({ onPasteCapture: true })
    }
  },
  pause: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPause: true }),
      captured: keyOf({ onPauseCapture: true })
    }
  },
  play: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlay: true }),
      captured: keyOf({ onPlayCapture: true })
    }
  },
  playing: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlaying: true }),
      captured: keyOf({ onPlayingCapture: true })
    }
  },
  progress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onProgress: true }),
      captured: keyOf({ onProgressCapture: true })
    }
  },
  rateChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onRateChange: true }),
      captured: keyOf({ onRateChangeCapture: true })
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onReset: true }),
      captured: keyOf({ onResetCapture: true })
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onScroll: true }),
      captured: keyOf({ onScrollCapture: true })
    }
  },
  seeked: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeked: true }),
      captured: keyOf({ onSeekedCapture: true })
    }
  },
  seeking: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeking: true }),
      captured: keyOf({ onSeekingCapture: true })
    }
  },
  stalled: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onStalled: true }),
      captured: keyOf({ onStalledCapture: true })
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSubmit: true }),
      captured: keyOf({ onSubmitCapture: true })
    }
  },
  suspend: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSuspend: true }),
      captured: keyOf({ onSuspendCapture: true })
    }
  },
  timeUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTimeUpdate: true }),
      captured: keyOf({ onTimeUpdateCapture: true })
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchCancel: true }),
      captured: keyOf({ onTouchCancelCapture: true })
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchEnd: true }),
      captured: keyOf({ onTouchEndCapture: true })
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchMove: true }),
      captured: keyOf({ onTouchMoveCapture: true })
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchStart: true }),
      captured: keyOf({ onTouchStartCapture: true })
    }
  },
  volumeChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onVolumeChange: true }),
      captured: keyOf({ onVolumeChangeCapture: true })
    }
  },
  waiting: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWaiting: true }),
      captured: keyOf({ onWaitingCapture: true })
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWheel: true }),
      captured: keyOf({ onWheelCapture: true })
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topAbort: eventTypes.abort,
  topBlur: eventTypes.blur,
  topCanPlay: eventTypes.canPlay,
  topCanPlayThrough: eventTypes.canPlayThrough,
  topClick: eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy: eventTypes.copy,
  topCut: eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag: eventTypes.drag,
  topDragEnd: eventTypes.dragEnd,
  topDragEnter: eventTypes.dragEnter,
  topDragExit: eventTypes.dragExit,
  topDragLeave: eventTypes.dragLeave,
  topDragOver: eventTypes.dragOver,
  topDragStart: eventTypes.dragStart,
  topDrop: eventTypes.drop,
  topDurationChange: eventTypes.durationChange,
  topEmptied: eventTypes.emptied,
  topEncrypted: eventTypes.encrypted,
  topEnded: eventTypes.ended,
  topError: eventTypes.error,
  topFocus: eventTypes.focus,
  topInput: eventTypes.input,
  topKeyDown: eventTypes.keyDown,
  topKeyPress: eventTypes.keyPress,
  topKeyUp: eventTypes.keyUp,
  topLoad: eventTypes.load,
  topLoadedData: eventTypes.loadedData,
  topLoadedMetadata: eventTypes.loadedMetadata,
  topLoadStart: eventTypes.loadStart,
  topMouseDown: eventTypes.mouseDown,
  topMouseMove: eventTypes.mouseMove,
  topMouseOut: eventTypes.mouseOut,
  topMouseOver: eventTypes.mouseOver,
  topMouseUp: eventTypes.mouseUp,
  topPaste: eventTypes.paste,
  topPause: eventTypes.pause,
  topPlay: eventTypes.play,
  topPlaying: eventTypes.playing,
  topProgress: eventTypes.progress,
  topRateChange: eventTypes.rateChange,
  topReset: eventTypes.reset,
  topScroll: eventTypes.scroll,
  topSeeked: eventTypes.seeked,
  topSeeking: eventTypes.seeking,
  topStalled: eventTypes.stalled,
  topSubmit: eventTypes.submit,
  topSuspend: eventTypes.suspend,
  topTimeUpdate: eventTypes.timeUpdate,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd: eventTypes.touchEnd,
  topTouchMove: eventTypes.touchMove,
  topTouchStart: eventTypes.touchStart,
  topVolumeChange: eventTypes.volumeChange,
  topWaiting: eventTypes.waiting,
  topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (id, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var node = ReactMount.getNode(id);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (id, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      onClickListeners[id].remove();
      delete onClickListeners[id];
    }
  }

};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))

},{"./EventConstants":21,"./EventPropagators":25,"./ReactMount":72,"./SyntheticClipboardEvent":96,"./SyntheticDragEvent":98,"./SyntheticEvent":99,"./SyntheticFocusEvent":100,"./SyntheticKeyboardEvent":102,"./SyntheticMouseEvent":103,"./SyntheticTouchEvent":104,"./SyntheticUIEvent":105,"./SyntheticWheelEvent":106,"./getEventCharCode":118,"_process":1,"fbjs/lib/EventListener":136,"fbjs/lib/emptyFunction":143,"fbjs/lib/invariant":151,"fbjs/lib/keyOf":155}],96:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":99}],97:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":99}],98:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":103}],99:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;
}).call(this,require('_process'))

},{"./Object.assign":29,"./PooledClass":30,"_process":1,"fbjs/lib/emptyFunction":143,"fbjs/lib/warning":162}],100:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":105}],101:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":99}],102:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":105,"./getEventCharCode":118,"./getEventKey":119,"./getEventModifierState":120}],103:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":105,"./ViewportMetrics":108,"./getEventModifierState":120}],104:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":105,"./getEventModifierState":120}],105:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":99,"./getEventTarget":121}],106:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":103}],107:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/invariant":151}],108:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],109:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))

},{"_process":1,"fbjs/lib/invariant":151}],110:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    for (; i < Math.min(i + 4096, m); i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],111:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))

},{"_process":1}],112:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":10}],113:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

'use strict';

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} fnName The name of the function
 * @param {string} newModule The module that fn will exist in
 * @param {string} newPackage The module that fn will exist in
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {function} The function that will warn once and then call fn
 */
function deprecated(fnName, newModule, newPackage, ctx, fn) {
  var warned = false;
  if (process.env.NODE_ENV !== 'production') {
    var newFn = function () {
      process.env.NODE_ENV !== 'production' ? warning(warned,
      // Require examples in this string must be split to prevent React's
      // build tools from mistaking them for real requires.
      // Otherwise the build tools will attempt to build a '%s' module.
      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
      warned = true;
      return fn.apply(ctx, arguments);
    };
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;
}).call(this,require('_process'))

},{"./Object.assign":29,"_process":1,"fbjs/lib/warning":162}],114:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],115:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMount = require('./ReactMount');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
}

module.exports = findDOMNode;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":41,"./ReactInstanceMap":69,"./ReactMount":72,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],116:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))

},{"./traverseAllChildren":134,"_process":1,"fbjs/lib/warning":162}],117:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;
},{}],118:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],119:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":118}],120:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],121:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],122:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],123:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],124:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":137}],125:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactNativeComponent = require('./ReactNativeComponent');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function () {};
assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  if (node === null || node === false) {
    instance = new ReactEmptyComponent(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactNativeComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}).call(this,require('_process'))

},{"./Object.assign":29,"./ReactCompositeComponent":40,"./ReactEmptyComponent":61,"./ReactNativeComponent":75,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],126:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":137}],127:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],128:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))

},{"./ReactElement":59,"_process":1,"fbjs/lib/invariant":151}],129:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":114}],130:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":72}],131:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function (node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function (node, html) {
    MSApp.execUnsafeLocalFunction(function () {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;
},{"fbjs/lib/ExecutionEnvironment":137}],132:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":114,"./setInnerHTML":131,"fbjs/lib/ExecutionEnvironment":137}],133:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;
},{}],134:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} text Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":41,"./ReactElement":59,"./ReactInstanceHandles":68,"./getIteratorFn":122,"_process":1,"fbjs/lib/invariant":151,"fbjs/lib/warning":162}],135:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    parentTag: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.parentTag = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    /*eslint-disable space-after-keywords */
    do {
      /*eslint-enable space-after-keywords */
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
      }
    }
  };

  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))

},{"./Object.assign":29,"_process":1,"fbjs/lib/emptyFunction":143,"fbjs/lib/warning":162}],136:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
}).call(this,require('_process'))

},{"./emptyFunction":143,"_process":1}],137:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],138:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

"use strict";

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],139:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":138}],140:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

'use strict';

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var outerNode = _x,
        innerNode = _x2;
    _again = false;

    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      _x = outerNode;
      _x2 = innerNode.parentNode;
      _again = true;
      continue _function;
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
}

module.exports = containsNode;
},{"./isTextNode":153}],141:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

'use strict';

var toArray = require('./toArray');

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./toArray":161}],142:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":137,"./createArrayFromMixed":141,"./getMarkupWrap":147,"./invariant":151,"_process":1}],143:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],144:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))

},{"_process":1}],145:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],146:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
'use strict';

function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],147:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

/*eslint-disable fb-www/unsafe-html */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":137,"./invariant":151,"_process":1}],148:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],149:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

'use strict';

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],150:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":149}],151:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))

},{"_process":1}],152:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],153:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

'use strict';

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":152}],154:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}).call(this,require('_process'))

},{"./invariant":151,"_process":1}],155:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
"use strict";

var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],156:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;
},{}],157:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],158:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":137}],159:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

'use strict';

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function () {
    return performance.now();
  };
} else {
  performanceNow = function () {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":158}],160:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],161:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;
}).call(this,require('_process'))

},{"./invariant":151,"_process":1}],162:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))

},{"./emptyFunction":143,"_process":1}],163:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":31}],164:[function(require,module,exports){
var React = require('react');
var Entities = require('html-entities').AllHtmlEntities;

module.exports = React.createClass({displayName: "exports",
	convertFromHex: function () {
		console.log( this.props.data )
		var hexEntities = this.props.data.bLetters; 
		hexEntities = hexEntities.split(";");
		hexEntities = hexEntities.slice(0, hexEntities.length-1)
		entities = new Entities();
		var arr = hexEntities.reduce(function(arr, curr){
 			var Char = entities.decode(""+curr+";")
 			arr.push( Char);
			return arr;
		}, []);

 		var bLetters = arr.join(" ")

 		return (bLetters)

	},
    render: function() {
        return (
            React.createElement("p", null, 
                this.convertFromHex()
            )
        );
    }
});

},{"html-entities":3,"react":163}],165:[function(require,module,exports){
module.exports={"adverbs":{"adverbs of time":{"english":"adverbs of time","type":"adverbs","bangla":"somoy ar kria besestion","bLetters":"সওমওয্ অর্ ক্রিঅ বএসএস্টিওন্","index":1,"img":{"05":"https://farm6.staticflickr.com/5213/5538113486_9d0b705f9d.jpg","04":"https://farm9.staticflickr.com/8256/8681910983_9985fe6c51.jpg","03":"https://farm6.staticflickr.com/5237/5827444904_162c9f9456.jpg","02":"https://farm4.staticflickr.com/3813/11817614263_1ec0a3a7af.jpg","01":"https://farm3.staticflickr.com/2453/3666499221_3064218048.jpg"}},"yesterday":{"english":"yesterday","type":"adverbs","bangla":"gotokal","bLetters":"গওটওকল্","index":3,"img":{"05":"https://farm3.staticflickr.com/2897/14125272752_aeb3d0c543.jpg","04":"https://farm7.staticflickr.com/6195/6083877595_8f44fc0f97.jpg","03":"https://farm5.staticflickr.com/4113/5203744828_9682d92189.jpg","02":"https://farm5.staticflickr.com/4110/4989347587_e3c077fe54.jpg","01":"https://farm3.staticflickr.com/2745/4429216284_789af8dec1.jpg"}},"today":{"english":"today","type":"adverbs","bangla":"aj, ajker din","bLetters":"অজ্, অজ্কএর্ ডিন্","index":5,"img":{"05":"https://farm4.staticflickr.com/3335/3327358811_1d66221f5b.jpg","04":"https://farm6.staticflickr.com/5335/17214040110_000f39e546.jpg","03":"https://farm8.staticflickr.com/7663/17401731295_6219a1d3dc.jpg","02":"https://farm8.staticflickr.com/7758/17194255207_f41e72aab4.jpg","01":"https://farm9.staticflickr.com/8796/17215500429_eca7e78d00.jpg"}},"tomorrow":{"english":"tomorrow","type":"adverbs","bangla":"agamikal","bLetters":"অগমিকল্","index":7,"img":{"05":"https://farm4.staticflickr.com/3317/3208351346_8919eee1e5.jpg","04":"https://farm7.staticflickr.com/6178/6132702914_39b5a0f02d.jpg","03":"https://farm8.staticflickr.com/7063/6865904389_85bfb07f77.jpg","02":"https://farm9.staticflickr.com/8039/8061873962_2dfc294af7.jpg","01":"https://farm4.staticflickr.com/3449/3295937737_8428fde05f.jpg"}},"now":{"english":"now","type":"adverbs","bangla":"akhon","bLetters":"অখওন্","index":9,"img":{"05":"https://farm8.staticflickr.com/7159/6532862041_c5ac63c3b1.jpg","04":"https://farm8.staticflickr.com/7579/16077334239_561536d26a.jpg","03":"https://farm3.staticflickr.com/2667/4019373778_9d76f3559c.jpg","02":"https://farm1.staticflickr.com/725/23847965666_fba146cb46.jpg","01":"https://farm4.staticflickr.com/3672/9470444516_f6f614e751.jpg"}},"then":{"english":"then","type":"adverbs","bangla":"tokhon","bLetters":"টওখওন্","index":11,"img":{"05":"https://farm7.staticflickr.com/6219/6278955078_ab8d4ec56b.jpg","04":"https://farm7.staticflickr.com/6239/6310082055_c2eacb4a13.jpg","03":"https://farm5.staticflickr.com/4115/4819578357_3d31b83550.jpg","02":"https://farm8.staticflickr.com/7032/6531495783_b4a4e780ce.jpg","01":"https://farm3.staticflickr.com/2480/5857071251_8f48004e46.jpg"}},"later":{"english":"later","type":"adverbs","bangla":"pore","bLetters":"পওরএ","index":13,"img":{"05":"https://farm9.staticflickr.com/8189/8111004321_59568269d8.jpg","04":"https://farm9.staticflickr.com/8457/8002039607_1c58e3349a.jpg","03":"https://farm9.staticflickr.com/8054/8135304275_7a5cd05328.jpg","02":"https://farm8.staticflickr.com/7279/7610272478_2f78d810a4.jpg","01":"https://farm4.staticflickr.com/3665/11851425924_cb2fb69097.jpg"}},"tonight":{"english":"tonight","type":"adverbs","bangla":"aj rat","bLetters":"অজ্ রট্","index":15,"img":{"05":"https://farm8.staticflickr.com/7399/11149302664_74bd5435ee.jpg","04":"https://farm3.staticflickr.com/2759/4178696465_813ec8b2f2.jpg","03":"https://farm9.staticflickr.com/8704/17187373202_62e204000b.jpg","02":"https://farm9.staticflickr.com/8181/8058388945_7344a2f82d.jpg","01":"https://farm4.staticflickr.com/3321/4586396740_eab6905469.jpg"}},"right now":{"english":"right now","type":"adverbs","bangla":"ekhonni","bLetters":"এখওন্নি","index":17,"img":{"05":"https://farm8.staticflickr.com/7299/16280093627_931a7c2c7e.jpg","04":"https://farm4.staticflickr.com/3520/3233185785_ef66b01cac.jpg","03":"https://farm9.staticflickr.com/8654/15755468223_9ecd0ccced.jpg","02":"https://farm9.staticflickr.com/8529/8501895300_c08ae5b8c8.jpg","01":"https://farm6.staticflickr.com/5003/5315217241_ccd2cbe40f.jpg"}},"last night":{"english":"last night","type":"adverbs","bangla":"goto rate","bLetters":"গওটও রটএ","index":19,"img":{"05":"https://farm6.staticflickr.com/5506/10941749713_a41a7ca256.jpg","04":"https://farm9.staticflickr.com/8314/8030414391_0b841d7981.jpg","03":"https://farm6.staticflickr.com/5119/5840956697_164d3af9e0.jpg","02":"https://farm4.staticflickr.com/3881/14688845872_4a094f719a.jpg","01":"https://farm9.staticflickr.com/8196/8371702516_3003aefea0.jpg"}},"this morning":{"english":"this morning","type":"adverbs","bangla":"ajker sokale","bLetters":"অজ্কএর্ সওকলএ","index":21,"img":{"05":"https://farm8.staticflickr.com/7161/6554061141_7eea23ecfc.jpg","04":"https://farm8.staticflickr.com/7387/16330513066_4cd0532286.jpg","03":"https://farm8.staticflickr.com/7201/6905180643_f602bfcb77.jpg","02":"https://farm4.staticflickr.com/3293/2595389342_430cd9cb77.jpg","01":"https://farm9.staticflickr.com/8640/15848726316_9499568620.jpg"}},"next week":{"english":"next week","type":"adverbs","bangla":"porer soptahe","bLetters":"পওরএর্ সওপ্টহএ","index":23,"img":{"05":"https://farm5.staticflickr.com/4030/4353209210_f9be55bbe6.jpg","04":"https://farm7.staticflickr.com/6080/6115732086_9a23d85a04.jpg","03":"https://farm3.staticflickr.com/2751/4181063679_dc4631447f.jpg","02":"https://farm8.staticflickr.com/7166/13401044663_1d4114e463.jpg","01":"https://farm4.staticflickr.com/3663/3339660542_1292acaf34.jpg"}},"already":{"english":"already","type":"adverbs","bangla":"iti moddhe","bLetters":"ইটি মওড্দএ","index":25,"img":{"05":"https://farm5.staticflickr.com/4150/5012133601_9a0679645a.jpg","04":"https://farm6.staticflickr.com/5603/15629651872_026561ac27.jpg","03":"https://farm4.staticflickr.com/3924/14725022545_e108e7eb9e.jpg","02":"https://farm7.staticflickr.com/6021/5996509912_255db6e158.jpg","01":"https://farm2.staticflickr.com/1044/1434643746_787be367e6.jpg"}},"recently":{"english":"recently","type":"adverbs","bangla":"somproti, somproti kale","bLetters":"সওম্প্রওটি, সওম্প্রওটি কলএ","index":27,"img":{"05":"https://farm8.staticflickr.com/7418/15769259824_e3fdb496c2.jpg","04":"https://farm8.staticflickr.com/7121/7085605327_c1a2e91b6d.jpg","03":"https://farm3.staticflickr.com/2525/3738557450_939e791324.jpg","02":"https://farm1.staticflickr.com/200/465705714_ddf9afb263.jpg","01":"https://farm8.staticflickr.com/7425/14185853945_a6b1b6afa7.jpg"}},"lately":{"english":"lately","type":"adverbs","bangla":"deri kore","bLetters":"ডএরি কওরএ","index":29,"img":{"05":"https://farm5.staticflickr.com/4111/4974288411_918343a0e0.jpg","04":"https://farm4.staticflickr.com/3935/15365281040_7f5cdfc3d4.jpg","03":"https://farm6.staticflickr.com/5142/5552728489_e30a5c3a26.jpg","02":"https://farm4.staticflickr.com/3206/2992668535_efc8f144c4.jpg","01":"https://farm1.staticflickr.com/154/396327351_512e9ad0c8.jpg"}},"soon":{"english":"soon","type":"adverbs","bangla":"shighro","bLetters":"শিঘ্রও","index":31,"img":{"05":"https://farm4.staticflickr.com/3310/3577415611_74cb4c6127.jpg","04":"https://farm3.staticflickr.com/2174/1919540444_e7842b4ee1.jpg","03":"https://farm6.staticflickr.com/5118/7074194011_efedbaebb1.jpg","02":"https://farm4.staticflickr.com/3658/3494276936_d42d2bca01.jpg","01":"https://farm8.staticflickr.com/7180/6994461693_a49bf10883.jpg"}},"immediately":{"english":"immediately","type":"adverbs","bangla":"tatkhonat, khub taratari","bLetters":"টট্খওনট্, খুব্ টরটরি","index":33,"img":{"05":"https://farm3.staticflickr.com/2380/2382859323_ae9ffc950c.jpg","04":"https://farm5.staticflickr.com/4068/4545735983_5b3cbe34be.jpg","03":"https://farm3.staticflickr.com/2029/2364661097_8f552b28db.jpg","02":"https://farm8.staticflickr.com/7418/15769259824_e3fdb496c2.jpg","01":"https://farm4.staticflickr.com/3454/3736886261_a45570a659.jpg"}},"still":{"english":"still","type":"adverbs","bangla":"akhono","bLetters":"অখওনও","index":35,"img":{"05":"https://farm1.staticflickr.com/155/337805507_6479682620.jpg","04":"https://farm4.staticflickr.com/3450/3249811529_ec3e4f488f.jpg","03":"https://farm9.staticflickr.com/8574/16825891602_dce31ba08a.jpg","02":"https://farm5.staticflickr.com/4015/4718010586_1582166a15.jpg","01":"https://farm3.staticflickr.com/2447/3642740917_c039d49ac4.jpg"}},"yet":{"english":"yet","type":"adverbs","bangla":"akhon porjonto","bLetters":"অখওন্ পওর্জওন্টও","index":37,"img":{"05":"https://farm7.staticflickr.com/6224/6341484521_dee23acb50.jpg","04":"https://farm7.staticflickr.com/6237/6341495793_818d9a9aed.jpg","03":"https://farm8.staticflickr.com/7033/6537490401_f9f568a4b7.jpg","02":"https://farm7.staticflickr.com/6112/6341491447_dc5cabc27c.jpg","01":"https://farm7.staticflickr.com/6057/6341498437_1d4d971b79.jpg"}},"ago":{"english":"ago","type":"adverbs","bangla":"purbe","bLetters":"পুর্বএ","index":39,"img":{"05":"https://farm4.staticflickr.com/3649/3600778669_51edf7eebe.jpg","04":"https://farm8.staticflickr.com/7204/6801818532_4740ba71cd.jpg","03":"https://farm9.staticflickr.com/8648/16493478392_6b2d4c8280.jpg","02":"https://farm3.staticflickr.com/2748/4263912227_ef12d26c9d.jpg","01":"https://farm4.staticflickr.com/3399/3662994983_6b19c42156.jpg"}},"adverbs of place":{"english":"adverbs of place","type":"adverbs","bangla":"somoyer kria besestion","bLetters":"সওমওযএর্ ক্রিঅ বএসএস্টিওন্","index":43,"img":{"05":"https://farm6.staticflickr.com/5291/5477603790_f3d8963fd0.jpg","04":"https://farm1.staticflickr.com/504/19191151692_1d99096438.jpg","03":"https://farm4.staticflickr.com/3145/2662264721_48198d9e77.jpg","02":"https://farm5.staticflickr.com/4023/4392429831_f3637848f3.jpg","01":"https://farm9.staticflickr.com/8009/7155774113_0521157f5f.jpg"}},"here":{"english":"here","type":"adverbs","bangla":"akhane","bLetters":"অখনএ","index":45,"img":{"05":"https://farm4.staticflickr.com/3231/2883305465_898abaf833.jpg","04":"https://farm3.staticflickr.com/2600/4046159943_2891ba9cb5.jpg","03":"https://farm8.staticflickr.com/7215/7309415650_398bc91e96.jpg","02":"https://farm1.staticflickr.com/410/18509664254_2aa450ce21.jpg","01":"https://farm9.staticflickr.com/8196/8118870964_a60a3d8487.jpg"}},"there":{"english":"there","type":"adverbs","bangla":"sekhane","bLetters":"সএখনএ","index":47,"img":{"05":"https://farm2.staticflickr.com/1379/1395766160_aaf848668a.jpg","04":"https://farm2.staticflickr.com/1302/4675986645_94e5524c57.jpg","03":"https://farm5.staticflickr.com/4097/4855301492_2ba6c176fa.jpg","02":"https://farm9.staticflickr.com/8289/7715197800_20a9ddfa12.jpg","01":"https://farm4.staticflickr.com/3517/3860031628_94aa676eb2.jpg"}},"over there":{"english":"over there","type":"adverbs","bangla":"oikhane ","bLetters":"ওইখনএ ","index":49,"img":{"05":"https://farm7.staticflickr.com/6203/6033568354_b36b739b76.jpg","04":"https://farm1.staticflickr.com/261/19859826884_8f74274384.jpg","03":"https://farm9.staticflickr.com/8504/8389521991_2bc4929326.jpg","02":"https://farm3.staticflickr.com/2582/3865155843_4e293e0e3d.jpg","01":"https://farm4.staticflickr.com/3087/2917960803_a8e483db26.jpg"}},"everywhere":{"english":"everywhere","type":"adverbs","bangla":"sorbotro","bLetters":"সওর্বওট্রও","index":51,"img":{"05":"https://farm8.staticflickr.com/7517/15721922963_0dcf1e3b3c.jpg","04":"https://farm3.staticflickr.com/2887/9404654494_6ec2230daf.jpg","03":"https://farm3.staticflickr.com/2564/3921731658_83203d58bc.jpg","02":"https://farm9.staticflickr.com/8249/8473922974_70423378a4.jpg","01":"https://farm1.staticflickr.com/566/22708213245_cf45ee235b.jpg"}},"anywhere":{"english":"anywhere","type":"adverbs","bangla":"jekono jaygay","bLetters":"জএকওনও জয্গয্","index":53,"img":{"05":"https://farm9.staticflickr.com/8369/8539387865_914ec87698.jpg","04":"https://farm4.staticflickr.com/3212/2941607161_3b7739703b.jpg","03":"https://farm4.staticflickr.com/3660/3608821098_bcf2513727.jpg","02":"https://farm3.staticflickr.com/2589/3977374660_e2bc37c17a.jpg","01":"https://farm9.staticflickr.com/8467/8379811895_eb7670879e.jpg"}},"nowhere":{"english":"nowhere","type":"adverbs","bangla":"kothao na","bLetters":"কওতও ন","index":55,"img":{"05":"https://farm5.staticflickr.com/4115/4886362042_4d3cfaf146.jpg","04":"https://farm5.staticflickr.com/4082/4793931211_963ee02452.jpg","03":"https://farm5.staticflickr.com/4134/4793930539_0d737f3095.jpg","02":"https://farm8.staticflickr.com/7150/6709621353_6ea7570c4b.jpg","01":"https://farm5.staticflickr.com/4095/4793929101_c69325865f.jpg"}},"home":{"english":"home","type":"adverbs","bangla":"bari","bLetters":"বরি","index":57,"img":{"05":"https://farm6.staticflickr.com/5098/5523205350_bd73212ee6.jpg","04":"https://farm4.staticflickr.com/3111/2767167884_1ffe9171ac.jpg","03":"https://farm1.staticflickr.com/93/232728971_74de6b6d03.jpg","02":"https://farm9.staticflickr.com/8522/8605166077_f67dfd53c5.jpg","01":"https://farm6.staticflickr.com/5012/5482398740_7450e5c0b9.jpg"}},"away":{"english":"away","type":"adverbs","bangla":"poth, rasta","bLetters":"পওত্, রস্ট","index":59,"img":{"05":"https://farm7.staticflickr.com/6147/5961098448_3beac67241.jpg","04":"https://farm4.staticflickr.com/3249/5834156269_95c3189c71.jpg","03":"https://farm4.staticflickr.com/3880/14691602368_05375850cf.jpg","02":"https://farm3.staticflickr.com/2919/14155291961_07dfd030f0.jpg","01":"https://farm8.staticflickr.com/7175/6585519071_8d5bd3c420.jpg"}},"out":{"english":"out","type":"adverbs","bangla":"bahire","bLetters":"বহিরএ","index":61,"img":{"05":"https://farm5.staticflickr.com/4135/4894165582_75c4dd82b6.jpg","04":"https://farm8.staticflickr.com/7574/16285282775_1df9fd923e.jpg","03":"https://farm8.staticflickr.com/7539/16291540231_8c42b9e696.jpg","02":"https://farm5.staticflickr.com/4021/4652328320_9acbf66d08.jpg","01":"https://farm8.staticflickr.com/7394/16201530567_1467cf986f.jpg"}},"very":{"english":"very","type":"adverbs","bangla":"khub","bLetters":"খুব্","index":67,"img":{"05":"https://farm7.staticflickr.com/6057/6248824178_5565a9f2c0.jpg","04":"https://farm4.staticflickr.com/3586/3289611408_9467933755.jpg","03":"https://farm4.staticflickr.com/3043/2908992829_df4824df84.jpg","02":"https://farm2.staticflickr.com/1187/5152834549_622830d4c0.jpg","01":"https://farm7.staticflickr.com/6168/6192079538_a0ca65fe59.jpg"}},"quite":{"english":"quite","type":"adverbs","bangla":"anek","bLetters":"অনএক্","index":69,"img":{"05":"https://farm5.staticflickr.com/4025/4282823151_f172db85b0.jpg","04":"https://farm3.staticflickr.com/2142/2264217917_2461c90a47.jpg","03":"https://farm4.staticflickr.com/3218/3097700105_7774c5f28d.jpg","02":"https://farm8.staticflickr.com/7339/14021428881_805044588a.jpg","01":"https://farm4.staticflickr.com/3870/14804730677_38316acc3a.jpg"}},"pretty":{"english":"pretty","type":"adverbs","bangla":"monohor","bLetters":"মওনওহওর্","index":71,"img":{"05":"https://farm4.staticflickr.com/3737/8859071241_623da91228.jpg","04":"https://farm2.staticflickr.com/1045/943599929_45bf762733.jpg","03":"https://farm6.staticflickr.com/5562/14436035657_e6134acdfa.jpg","02":"https://farm9.staticflickr.com/8833/17407836181_27af8c8817.jpg","01":"https://farm9.staticflickr.com/8896/17338992270_d7a35ae54e.jpg"}},"really":{"english":"really","type":"adverbs","bangla":"sottie, prokritoi","bLetters":"সওট্টিএ, প্রওক্রিটওই","index":73,"img":{"05":"https://farm8.staticflickr.com/7047/6980602665_5831a5dcb6.jpg","04":"https://farm7.staticflickr.com/6102/6306249979_43825cafd1.jpg","03":"https://farm6.staticflickr.com/5017/5502314922_844cdfc34a.jpg","02":"https://farm5.staticflickr.com/4095/4863846809_a740e703f1.jpg","01":"https://farm4.staticflickr.com/3502/4016040193_333cb01c47.jpg"}},"fast":{"english":"fast","type":"adverbs","bangla":"druto, taratari","bLetters":"ড্রুটও, টরটরি","index":75,"img":{"05":"https://farm8.staticflickr.com/7216/7244216246_f11c3b97a4.jpg","04":"https://farm5.staticflickr.com/4035/4694938736_a9f61e9968.jpg","03":"https://farm8.staticflickr.com/7458/11652002304_3ee6f9dbc7.jpg","02":"https://farm1.staticflickr.com/349/19202481690_de1b7968d4.jpg","01":"https://farm7.staticflickr.com/6069/6097094446_cc9ac41927.jpg"}},"well":{"english":"well","type":"adverbs","bangla":"valo","bLetters":"বলও","index":77,"img":{"05":"https://farm8.staticflickr.com/7054/6800594752_bcba01e50f.jpg","04":"https://farm8.staticflickr.com/7067/6946705371_6f7598144b.jpg","03":"https://farm1.staticflickr.com/679/20544485253_be79c4ef54.jpg","02":"https://farm9.staticflickr.com/8712/17373039745_079ba0cfa6.jpg","01":"https://farm4.staticflickr.com/3066/2701360173_cb6649dbfe.jpg"}},"hard":{"english":"hard","type":"adverbs","bangla":"kothin","bLetters":"কওতিন্","index":79,"img":{"05":"https://farm5.staticflickr.com/4056/4569154031_5d1b134c2a.jpg","04":"https://farm4.staticflickr.com/3149/2503226908_80448ae295.jpg","03":"https://farm3.staticflickr.com/2231/2174992215_747ea3ddd3.jpg","02":"https://farm3.staticflickr.com/2247/2109477304_608a896e4f.jpg","01":"https://farm7.staticflickr.com/6086/6101539293_e3233064e5.jpg"}},"quickly":{"english":"quickly","type":"adverbs","bangla":"taratari","bLetters":"টরটরি","index":81,"img":{"05":"https://farm9.staticflickr.com/8668/15986712284_b931846243.jpg","04":"https://farm4.staticflickr.com/3017/2944426926_ef8e37810a.jpg","03":"https://farm4.staticflickr.com/3022/3108128533_4c5d48274f.jpg","02":"https://farm8.staticflickr.com/7429/8732398596_c341eab798.jpg","01":"https://farm4.staticflickr.com/3101/2818922726_5b94f4fc8a.jpg"}},"slowly":{"english":"slowly","type":"adverbs","bangla":"dhire dhire","bLetters":"দিরএ দিরএ","index":83,"img":{"05":"https://farm3.staticflickr.com/2492/4134369646_98b9e1362c.jpg","04":"https://farm9.staticflickr.com/8021/7679440584_b642e2a369.jpg","03":"https://farm3.staticflickr.com/2070/2176601041_7e4523fcc0.jpg","02":"https://farm6.staticflickr.com/5082/5216884142_fdc7e7b2f4.jpg","01":"https://farm7.staticflickr.com/6130/5924658721_68d3cf987d.jpg"}},"carefully":{"english":"carefully","type":"adverbs","bangla":"sabdhanotar sate, sotorkotar sate","bLetters":"সব্দনওটর্ সটএ, সওটওর্কওটর্ সটএ","index":85,"img":{"05":"https://farm4.staticflickr.com/3897/14927106797_e91d7a324a.jpg","04":"https://farm1.staticflickr.com/166/375642794_137b3627f7.jpg","03":"https://farm4.staticflickr.com/3658/3441464357_b0cb17f837.jpg","02":"https://farm4.staticflickr.com/3850/15026146308_2102054714.jpg","01":"https://farm8.staticflickr.com/7074/7215831960_edc48fa3da.jpg"}},"hardly":{"english":"hardly","type":"adverbs","bangla":"kothin vabe","bLetters":"কওতিন্ ববএ","index":87,"img":{"05":"https://farm1.staticflickr.com/78/192847844_58822361ee.jpg","04":"https://farm6.staticflickr.com/5595/14770447314_eec1070df2.jpg","03":"https://farm4.staticflickr.com/3233/2965548000_a7f9b1e773.jpg","02":"https://farm3.staticflickr.com/2053/2326043797_281c90f13d.jpg","01":"https://farm3.staticflickr.com/2219/2504283859_e6653da2cd.jpg"}},"mostly":{"english":"mostly","type":"adverbs","bangla":"audhik","bLetters":"ঔদিক্","index":91,"img":{"05":"https://farm8.staticflickr.com/7255/7621200914_b4ca5e9a9f.jpg","04":"https://farm3.staticflickr.com/2465/3641488421_f2dbe02214.jpg","03":"https://farm4.staticflickr.com/3196/2910842170_a37e1e84a0.jpg","02":"https://farm6.staticflickr.com/5322/9196107997_05d7d2756a.jpg","01":"https://farm8.staticflickr.com/7287/9433382438_1aece92da1.jpg"}},"almost":{"english":"almost","type":"adverbs","bangla":"praye","bLetters":"প্রযএ","index":93,"img":{"05":"https://farm9.staticflickr.com/8524/8683170041_8b4e2f6b4a.jpg","04":"https://farm9.staticflickr.com/8147/7523533252_6beb92dd75.jpg","03":"https://farm1.staticflickr.com/104/252290777_0ebbffc1a1.jpg","02":"https://farm9.staticflickr.com/8521/8478868799_f7a4e9e1df.jpg","01":"https://farm5.staticflickr.com/4130/4971011083_e5ae12a334.jpg"}},"absolutely":{"english":"absolutely","type":"adverbs","bangla":"sothik vabe","bLetters":"সওতিক্ ববএ","index":95,"img":{"05":"https://farm9.staticflickr.com/8788/17310431656_ee03a1fda0.jpg","04":"https://farm6.staticflickr.com/5458/8843232312_e3109834e6.jpg","03":"https://farm3.staticflickr.com/2455/3650955869_3385597ea1.jpg","02":"https://farm6.staticflickr.com/5290/5297493779_01cc5f7dcd.jpg","01":"https://farm7.staticflickr.com/6042/6407399659_c0cce1b60a.jpg"}},"together":{"english":"together","type":"adverbs","bangla":"akotre, aksathe","bLetters":"অকওট্রএ, অক্সতএ","index":97,"img":{"05":"https://farm1.staticflickr.com/106/312217662_c41b215c50.jpg","04":"https://farm8.staticflickr.com/7496/15679943103_e872173c9d.jpg","03":"https://farm8.staticflickr.com/7631/16156701594_b957768d0e.jpg","02":"https://farm4.staticflickr.com/3784/12121577393_ab8cbc1b7a.jpg","01":"https://farm3.staticflickr.com/2122/2202517736_49c558d902.jpg"}},"alone":{"english":"alone","type":"adverbs","bangla":"akaki,","bLetters":"অককি,","index":99,"img":{"05":"https://farm8.staticflickr.com/7541/15579329117_933532cecf.jpg","04":"https://farm4.staticflickr.com/3468/3403827570_38f59cb98a.jpg","03":"https://farm4.staticflickr.com/3697/10115704114_9292849aed.jpg","02":"https://farm5.staticflickr.com/4058/4705392187_67fc76d179.jpg","01":"https://farm8.staticflickr.com/7170/6836620931_8fe5196be0.jpg"}},"adverbs of frequency":{"english":"adverbs of frequency","type":"adverbs","bangla":"toronger kria bisestion","bLetters":"টওরওন্গএর্ ক্রিঅ বিসএস্টিওন্","index":103,"img":{"05":"https://farm4.staticflickr.com/3195/2752258504_66c2d466a8.jpg","04":"https://farm3.staticflickr.com/2032/1501937603_b4fc9ec638.jpg","03":"https://farm6.staticflickr.com/5486/11865621065_623851c051.jpg","02":"https://farm6.staticflickr.com/5716/22118972289_b4a2bdd6d3.jpg","01":"https://farm4.staticflickr.com/3721/14125548530_bde15ebf69.jpg"}},"always":{"english":"always","type":"adverbs","bangla":"sorboda","bLetters":"সওর্বওড","index":105,"img":{"05":"https://farm5.staticflickr.com/4005/4682471569_78db970823.jpg","04":"https://farm8.staticflickr.com/7060/6872604729_115448e665.jpg","03":"https://farm8.staticflickr.com/7111/6886108378_526de2ee7b.jpg","02":"https://farm7.staticflickr.com/6139/5988163570_76c025f4b0.jpg","01":"https://farm2.staticflickr.com/1086/4733278226_b1cb3b7d3b.jpg"}},"frequently":{"english":"frequently","type":"adverbs","bangla":"ghono ghono","bLetters":"ঘওনও ঘওনও","index":107,"img":{"05":"https://farm8.staticflickr.com/7013/6778374719_bc2ea733a5.jpg","04":"https://farm5.staticflickr.com/4053/4711572796_377935a1aa.jpg","03":"https://farm3.staticflickr.com/2818/12539059905_12222584e4.jpg","02":"https://farm2.staticflickr.com/1490/24757045636_d57757ebba.jpg","01":"https://farm6.staticflickr.com/5463/9670416797_4ba413718b.jpg"}},"usually":{"english":"usually","type":"adverbs","bangla":"socharachor","bLetters":"সওচরচওর্","index":109,"img":{"05":"https://farm9.staticflickr.com/8286/7869675874_20a328b86b.jpg","04":"https://farm9.staticflickr.com/8138/8699547025_b0652cc357.jpg","03":"https://farm9.staticflickr.com/8263/8660690339_b63b6726dd.jpg","02":"https://farm8.staticflickr.com/7290/8742521757_11d04625e9.jpg","01":"https://farm8.staticflickr.com/7426/8981710839_4762476d39.jpg"}},"sometimes":{"english":"sometimes","type":"adverbs","bangla":"majhe majhe","bLetters":"মঝএ মঝএ","index":111,"img":{"05":"https://farm5.staticflickr.com/4097/4817724472_2af99ec851.jpg","04":"https://farm8.staticflickr.com/7107/7038935637_355cd12617.jpg","03":"https://farm8.staticflickr.com/7030/6797891065_efd887acb6.jpg","02":"https://farm6.staticflickr.com/5321/9622648801_9ee7e24fa5.jpg","01":"https://farm4.staticflickr.com/3508/3207862968_b0c8c4c7bb.jpg"}},"occasionally":{"english":"occasionally","type":"adverbs","bangla":"pesha goto vabe","bLetters":"পএশ গওটও ববএ","index":113,"img":{"05":"https://farm3.staticflickr.com/2653/3751907534_0e99f03786.jpg","04":"https://farm4.staticflickr.com/3795/8806128688_97a9ce4953.jpg","03":"https://farm3.staticflickr.com/2548/3796996690_d913d9de6e.jpg","02":"https://farm4.staticflickr.com/3064/2826977575_80e85e6697.jpg","01":"https://farm6.staticflickr.com/5129/5346860520_8749a3a42e.jpg"}},"seldom":{"english":"seldom","type":"adverbs","bangla":"kadachit","bLetters":"কডচিট্","index":115,"img":{"05":"https://farm4.staticflickr.com/3953/15560102980_8a35c6bd4d.jpg","04":"https://farm2.staticflickr.com/1684/23428559583_3455fa60dd.jpg","03":"https://farm8.staticflickr.com/7312/9286800470_e04c7d8854.jpg","02":"https://farm8.staticflickr.com/7368/9932672283_a5f127b11d.jpg","01":"https://farm8.staticflickr.com/7573/15058355624_e2434d36ab.jpg"}},"never":{"english":"never","type":"adverbs","bangla":"kokhono","bLetters":"কওখওনও","index":119,"img":{"05":"https://farm4.staticflickr.com/3596/3772231114_100ca9017c.jpg","04":"https://farm4.staticflickr.com/3429/3366963316_ba4c1b2524.jpg","03":"https://farm9.staticflickr.com/8475/8370032699_9053c7b3ac.jpg","02":"https://farm4.staticflickr.com/3005/2694244177_b871348a6c.jpg","01":"https://farm3.staticflickr.com/2854/9510246376_dcf5a21639.jpg"}}},"adjectives":{"colors":{"english":"colors","type":"adjectives","bangla":"rong","bLetters":"রওন্গ্","index":1,"img":{"05":"https://farm3.staticflickr.com/2946/15485876632_19370d9f2c.jpg","04":"https://farm8.staticflickr.com/7507/16297974341_047d65807e.jpg","03":"https://farm8.staticflickr.com/7571/16340269815_948eb20807.jpg","02":"https://farm4.staticflickr.com/3692/11818579534_baa4e49db6.jpg","01":"https://farm3.staticflickr.com/2870/13220354895_335ecc2c41.jpg"}},"black":{"english":"black","type":"adjectives","bangla":"kalo","bLetters":"কলও","index":3,"img":{"05":"https://farm6.staticflickr.com/5546/9447222957_e8bf0db5a5.jpg","04":"https://farm3.staticflickr.com/2089/2100231822_0c7244400b.jpg","03":"https://farm7.staticflickr.com/6024/6208603709_a4c5f14464.jpg","02":"https://farm9.staticflickr.com/8073/8282458437_8b15e5a149.jpg","01":"https://farm9.staticflickr.com/8480/8257495691_c4c01149d0.jpg"}},"blue":{"english":"blue","type":"adjectives","bangla":"nil rong","bLetters":"নিল্ রওন্গ্","index":5,"img":{"05":"https://farm6.staticflickr.com/5203/5250596293_804c72e051.jpg","04":"https://farm9.staticflickr.com/8205/8233223442_5091ceefac.jpg","03":"https://farm6.staticflickr.com/5173/5437927802_585360f0be.jpg","02":"https://farm4.staticflickr.com/3730/13748729495_d07dd8330a.jpg","01":"https://farm5.staticflickr.com/4005/5150506428_ea270cd83e.jpg"}},"brown":{"english":"brown","type":"adjectives","bangla":"badami rong","bLetters":"বডমি রওন্গ্","index":7,"img":{"05":"https://farm6.staticflickr.com/5047/5250649084_c358c3a629.jpg","04":"https://farm8.staticflickr.com/7713/17947180538_c8bbf44448.jpg","03":"https://farm4.staticflickr.com/3291/3023845886_02a6dac9c4.jpg","02":"https://farm5.staticflickr.com/4047/4710583784_fd31500e55.jpg","01":"https://farm3.staticflickr.com/2869/10275947314_e2e57b20a7.jpg"}},"gray":{"english":"gray","type":"adjectives","bangla":"dhusor rong","bLetters":"দুসওর্ রওন্গ্","index":9,"img":{"05":"https://farm4.staticflickr.com/3669/10576207974_7497849476.jpg","04":"https://farm8.staticflickr.com/7006/6789949843_14dcdc10de.jpg","03":"https://farm9.staticflickr.com/8311/7980633158_3c138685aa.jpg","02":"https://farm6.staticflickr.com/5344/7414945902_1fccc24776.jpg","01":"https://farm6.staticflickr.com/5558/15206662751_530fec149c.jpg"}},"green":{"english":"green","type":"adjectives","bangla":"sobuj rong","bLetters":"সওবুজ্ রওন্গ্","index":11,"img":{"05":"https://farm4.staticflickr.com/3936/15385538298_5ee2dedc9b.jpg","04":"https://farm9.staticflickr.com/8596/16263184599_61c8c6d3df.jpg","03":"https://farm8.staticflickr.com/7009/6524799865_4a7207d133.jpg","02":"https://farm8.staticflickr.com/7072/7316969880_5622cd0489.jpg","01":"https://farm2.staticflickr.com/1413/5150506566_e696291301.jpg"}},"orange":{"english":"orange","type":"adjectives","bangla":"comola rong","bLetters":"cওমওল রওন্গ্","index":13,"img":{"05":"https://farm8.staticflickr.com/7637/16815943825_2effd64c8a.jpg","04":"https://farm9.staticflickr.com/8112/8626296016_03b71b7c7c.jpg","03":"https://farm7.staticflickr.com/6038/6352189291_92bd87f266.jpg","02":"https://farm4.staticflickr.com/3813/9731648856_14a8c73fa6.jpg","01":"https://farm8.staticflickr.com/7394/16187539937_dcc24b2fa9.jpg"}},"purple":{"english":"purple","type":"adjectives","bangla":"beguni rong","bLetters":"বএগুনি রওন্গ্","index":15,"img":{"05":"https://farm4.staticflickr.com/3655/3320084584_9b408a8e36.jpg","04":"https://farm9.staticflickr.com/8771/17068535642_a8c1ba5bc8.jpg","03":"https://farm6.staticflickr.com/5469/17598303190_db06d8aec8.jpg","02":"https://farm9.staticflickr.com/8058/8268915128_5702174591.jpg","01":"https://farm2.staticflickr.com/1345/5149897589_02d273974f.jpg"}},"red":{"english":"red","type":"adjectives","bangla":"lal rong","bLetters":"লল্ রওন্গ্","index":17,"img":{"05":"https://farm6.staticflickr.com/5534/9127978269_26184ed92e.jpg","04":"https://farm9.staticflickr.com/8640/15942580281_f4dec69039.jpg","03":"https://farm8.staticflickr.com/7461/16271024421_8887b51069.jpg","02":"https://farm4.staticflickr.com/3855/15149528631_73b38c7fa3.jpg","01":"https://farm9.staticflickr.com/8440/7978985440_02eb0d7b88.jpg"}},"white":{"english":"white","type":"adjectives","bangla":"sada rong","bLetters":"সড রওন্গ্","index":19,"img":{"05":"https://farm8.staticflickr.com/7648/16737191599_0d95a4825e.jpg","04":"https://farm4.staticflickr.com/3597/3385391418_86b350e89a.jpg","03":"https://farm8.staticflickr.com/7607/16595957847_38b88ff13d.jpg","02":"https://farm4.staticflickr.com/3003/2584193181_e92a54e37d.jpg","01":"https://farm4.staticflickr.com/3663/3348176340_8a80fb162f.jpg"}},"yellow":{"english":"yellow","type":"adjectives","bangla":"holud rong","bLetters":"হওলুড্ রওন্গ্","index":21,"img":{"05":"https://farm3.staticflickr.com/2896/13942617067_d5829e849c.jpg","04":"https://farm4.staticflickr.com/3273/3103907114_b444abc2ea.jpg","03":"https://farm6.staticflickr.com/5460/17050868668_cde41b68f1.jpg","02":"https://farm9.staticflickr.com/8292/7535826272_cffa4a57f7.jpg","01":"https://farm3.staticflickr.com/2915/14340943359_3f2253f6c4.jpg"}},"sizes":{"english":"sizes","type":"adjectives","bangla":"maper","bLetters":"মপএর্","index":25,"img":{"05":"https://farm9.staticflickr.com/8512/8394199055_2d5a53de8f.jpg","04":"https://farm9.staticflickr.com/8513/8394200643_f799397613.jpg","03":"https://farm8.staticflickr.com/7234/7249700926_dd8cbf16d5.jpg","02":"https://farm5.staticflickr.com/4131/4838067820_8fa69e89f9.jpg","01":"https://farm4.staticflickr.com/3509/3949251678_cec266b6bf.jpg"}},"big":{"english":"big","type":"adjectives","bangla":"boro","bLetters":"বওরও","index":27,"img":{"05":"https://farm3.staticflickr.com/2576/4038628626_c09fc24d33.jpg","04":"https://farm4.staticflickr.com/3175/2306096382_87b0d1649e.jpg","03":"https://farm3.staticflickr.com/2246/1841944810_cb7237eae0.jpg","02":"https://farm1.staticflickr.com/490/19179171741_9710d06716.jpg","01":"https://farm6.staticflickr.com/5441/16567862153_e093d098d6.jpg"}},"deep":{"english":"deep","type":"adjectives","bangla":"govir","bLetters":"গওবির্","index":29,"img":{"05":"https://farm3.staticflickr.com/2248/2350112250_bdd05f1ace.jpg","04":"https://farm8.staticflickr.com/7531/15885770560_5a5229aa64.jpg","03":"https://farm3.staticflickr.com/2542/4082513875_59ea98cc6f.jpg","02":"https://farm9.staticflickr.com/8655/16186931113_d69a5a3a77.jpg","01":"https://farm5.staticflickr.com/4148/4845390888_ba4fb06742.jpg"}},"long":{"english":"long","type":"adjectives","bangla":"dirgho, lomba","bLetters":"ডির্ঘও, লওম্ব","index":31,"img":{"05":"https://farm8.staticflickr.com/7363/16355451372_faa77d1ce5.jpg","04":"https://farm9.staticflickr.com/8602/16484730270_ccce9d7818.jpg","03":"https://farm2.staticflickr.com/1710/24039366376_4cab914768.jpg","02":"https://farm3.staticflickr.com/2621/4094504211_1fc8172c00.jpg","01":"https://farm6.staticflickr.com/5107/5871857605_466fe6ebe1.jpg"}},"narrow":{"english":"narrow","type":"adjectives","bangla":"sonkirno, aunudar","bLetters":"সওন্কির্নও, ঔনুডর্","index":33,"img":{"05":"https://farm4.staticflickr.com/3907/14565821745_8e7665a610.jpg","04":"https://farm3.staticflickr.com/2874/9256392302_d58215b4e4.jpg","03":"https://farm3.staticflickr.com/2915/14425537010_64e4b69cf8.jpg","02":"https://farm3.staticflickr.com/2899/14504269563_892ff832cf.jpg","01":"https://farm1.staticflickr.com/70/189848084_216bd0d6e2.jpg"}},"short":{"english":"short","type":"adjectives","bangla":"khato, soto","bLetters":"খটও, সওটও","index":35,"img":{"05":"https://farm8.staticflickr.com/7307/10496050596_ef01b471d8.jpg","04":"https://farm6.staticflickr.com/5628/21373559294_1d6ebd80ae.jpg","03":"https://farm3.staticflickr.com/2589/3669074635_7877723db4.jpg","02":"https://farm8.staticflickr.com/7442/10496050846_879f8acc70.jpg","01":"https://farm8.staticflickr.com/7428/9759458753_65b5bc4e3b.jpg"}},"small":{"english":"small","type":"adjectives","bangla":"soto","bLetters":"সওটও","index":37,"img":{"05":"https://farm7.staticflickr.com/6152/6139900547_514f815fc6.jpg","04":"https://farm9.staticflickr.com/8041/7981283159_7ddf688e5b.jpg","03":"https://farm7.staticflickr.com/6076/6113595336_d216ee95c5.jpg","02":"https://farm3.staticflickr.com/2837/9304848405_ffa5288572.jpg","01":"https://farm4.staticflickr.com/3263/3244226108_9e8a88b5fe.jpg"}},"tall":{"english":"tall","type":"adjectives","bangla":"lamba","bLetters":"লম্ব","index":39,"img":{"05":"https://farm4.staticflickr.com/3663/3550465245_726d3095e2.jpg","04":"https://farm5.staticflickr.com/4120/4976577873_dfdf184ba2.jpg","03":"https://farm3.staticflickr.com/2487/5713469114_34857bde98.jpg","02":"https://farm4.staticflickr.com/3189/2747413492_1dde4dc65b.jpg","01":"https://farm4.staticflickr.com/3102/5713469280_27b4766244.jpg"}},"thick":{"english":"thick","type":"adjectives","bangla":"mota, puru","bLetters":"মওট, পুরু","index":41,"img":{"05":"https://farm5.staticflickr.com/4146/4990409207_3756b0bdda.jpg","04":"https://farm1.staticflickr.com/200/511396347_af58643347.jpg","03":"https://farm8.staticflickr.com/7012/6484528543_17b39edd5f.jpg","02":"https://farm9.staticflickr.com/8219/8288932455_778e7a496f.jpg","01":"https://farm4.staticflickr.com/3585/3455135865_763bda6b03.jpg"}},"thin":{"english":"thin","type":"adjectives","bangla":"patla, halka","bLetters":"পট্ল, হল্ক","index":43,"img":{"05":"https://farm6.staticflickr.com/5486/10574092845_3e5f42349f.jpg","04":"https://farm3.staticflickr.com/2528/5813985352_ce5a155bb3.jpg","03":"https://farm4.staticflickr.com/3699/9321765985_b57f1b5d5b.jpg","02":"https://farm6.staticflickr.com/5178/5473423532_ce3da5f561.jpg","01":"https://farm5.staticflickr.com/4024/4648935201_8727989599.jpg"}},"wide":{"english":"wide","type":"adjectives","bangla":"bistrito, chorano","bLetters":"বিস্ট্রিটও, চওরনও","index":45,"img":{"05":"https://farm9.staticflickr.com/8155/7472031602_ed08d438fc.jpg","04":"https://farm4.staticflickr.com/3759/13456505285_0cf1873bae.jpg","03":"https://farm8.staticflickr.com/7134/7615848388_8a3f9e55fd.jpg","02":"https://farm9.staticflickr.com/8356/8311648152_f7c018c45d.jpg","01":"https://farm5.staticflickr.com/4132/4838625602_61502f4d69.jpg"}},"shapes":{"english":"shapes","type":"adjectives","bangla":"akarer, akritir","bLetters":"অকরএর্, অক্রিটির্","index":49,"img":{"05":"https://farm7.staticflickr.com/6196/6100999671_9aaff9452a.jpg","04":"https://farm3.staticflickr.com/2182/3536182232_074dee4343.jpg","03":"https://farm4.staticflickr.com/3774/8801594089_a480f402de.jpg","02":"https://farm4.staticflickr.com/3355/3188902251_7101df4895.jpg","01":"https://farm5.staticflickr.com/4154/5058027485_4a771afd19.jpg"}},"circular":{"english":"circular","type":"adjectives","bangla":"biggopti, ghosona","bLetters":"বিগ্গওপ্টি, ঘওসওন","index":51,"img":{"05":"https://farm1.staticflickr.com/96/270308466_a5132f0071.jpg","04":"https://farm9.staticflickr.com/8635/16646063386_937126ac01.jpg","03":"https://farm4.staticflickr.com/3439/3266070521_6f578b1541.jpg","02":"https://farm4.staticflickr.com/3102/2624721101_d6ed7fbda1.jpg","01":"https://farm1.staticflickr.com/99/270308421_bdb16eb68a.jpg"}},"straight":{"english":"straight","type":"adjectives","bangla":"sojasuji, lombalombi","bLetters":"সওজসুজি, লওম্বলওম্বি","index":53,"img":{"05":"https://farm4.staticflickr.com/3211/3095618498_0b37ded360.jpg","04":"https://farm6.staticflickr.com/5508/10149340653_2cba4ff496.jpg","03":"https://farm4.staticflickr.com/3889/15313665655_eac8f4cc5c.jpg","02":"https://farm3.staticflickr.com/2078/1585577938_cc56805322.jpg","01":"https://farm5.staticflickr.com/4048/4185187293_e89b65216f.jpg"}},"square":{"english":"square","type":"adjectives","bangla":"chou-ka-kri-ti","bLetters":"চওউ-ক-ক্রি-টি","index":55,"img":{"05":"https://farm9.staticflickr.com/8230/8593305849_12b8edd2a2.jpg","04":"https://farm4.staticflickr.com/3858/14760778097_5045dbfdee.jpg","03":"https://farm8.staticflickr.com/7289/8720736288_4c28dfb5b8.jpg","02":"https://farm6.staticflickr.com/5019/5506806014_1cdd52f6ea.jpg","01":"https://farm9.staticflickr.com/8425/7519811834_18f7dd2b8c.jpg"}},"triangular":{"english":"triangular","type":"adjectives","bangla":"konakriti","bLetters":"কওনক্রিটি","index":57,"img":{"05":"https://farm8.staticflickr.com/7483/16007497642_372c09116c.jpg","04":"https://farm4.staticflickr.com/3945/15106188984_e5f4cf68b1.jpg","03":"https://farm3.staticflickr.com/2848/9254108701_e0504643a3.jpg","02":"https://farm9.staticflickr.com/8700/16992206310_1a51ba1866.jpg","01":"https://farm4.staticflickr.com/3556/4560463653_ac7b44d570.jpg"}},"tastes":{"english":"tastes","type":"adjectives","bangla":"sad","bLetters":"সড্","index":61,"img":{"05":"https://farm9.staticflickr.com/8051/8128856447_6f34c8a47c.jpg","04":"https://farm8.staticflickr.com/7096/7181674023_8a99e65421.jpg","03":"https://farm7.staticflickr.com/6141/6203994701_a67e33468d.jpg","02":"https://farm8.staticflickr.com/7708/17253220022_503e2e2982.jpg","01":"https://farm4.staticflickr.com/3252/2691353194_011e1e64ea.jpg"}},"bitter":{"english":"bitter","type":"adjectives","bangla":"teto","bLetters":"টএটও","index":63,"img":{"05":"https://farm8.staticflickr.com/7172/6781535389_eca062d1ce.jpg","04":"https://farm2.staticflickr.com/1556/24511573286_a3a09c1ef1.jpg","03":"https://farm6.staticflickr.com/5290/5268279576_a418f0e008.jpg","02":"https://farm8.staticflickr.com/7585/16938316266_6cf3c62889.jpg","01":"https://farm9.staticflickr.com/8641/16437771748_e16f48de79.jpg"}},"fresh":{"english":"fresh","type":"adjectives","bangla":"taja, ","bLetters":"টজ, ","index":65,"img":{"05":"https://farm6.staticflickr.com/5297/5470731452_867e03abec.jpg","04":"https://farm1.staticflickr.com/231/472138094_7d2720c0ac.jpg","03":"https://farm6.staticflickr.com/5106/5631056422_6e26d9e88a.jpg","02":"https://farm9.staticflickr.com/8073/8437586739_baf8dbf7b5.jpg","01":"https://farm3.staticflickr.com/2405/2382800993_435ddd70c6.jpg"}},"salty":{"english":"salty","type":"adjectives","bangla":"lobonakto, lonta","bLetters":"লওবওনক্টও, লওন্ট","index":67,"img":{"05":"https://farm4.staticflickr.com/3395/3332121375_bd9726c361.jpg","04":"https://farm9.staticflickr.com/8320/8026137015_7511056c3b.jpg","03":"https://farm4.staticflickr.com/3307/3267397255_a18ec1ca75.jpg","02":"https://farm4.staticflickr.com/3659/3654480018_1cc97299b9.jpg","01":"https://farm9.staticflickr.com/8492/8449590553_2ed31a757b.jpg"}},"sour":{"english":"sour","type":"adjectives","bangla":"tok,","bLetters":"টওক্,","index":69,"img":{"05":"https://farm6.staticflickr.com/5228/5872263314_00eef7d492.jpg","04":"https://farm7.staticflickr.com/6189/6145606434_c530495ffe.jpg","03":"https://farm9.staticflickr.com/8534/8672115585_80ff10f555.jpg","02":"https://farm5.staticflickr.com/4046/4663421743_0fcb83df21.jpg","01":"https://farm5.staticflickr.com/4049/4711357400_61db2dac62.jpg"}},"spicy":{"english":"spicy","type":"adjectives","bangla":"mosla","bLetters":"মওস্ল","index":71,"img":{"05":"https://farm9.staticflickr.com/8060/8286146050_0c9a9da53c.jpg","04":"https://farm3.staticflickr.com/2524/4081318428_99c3c09351.jpg","03":"https://farm8.staticflickr.com/7084/7382295410_5acb2df3b8.jpg","02":"https://farm8.staticflickr.com/7310/11494341803_fe1f4b2ecd.jpg","01":"https://farm6.staticflickr.com/5043/5281990977_af0273a011.jpg"}},"sweet":{"english":"sweet","type":"adjectives","bangla":"misti","bLetters":"মিস্টি","index":73,"img":{"05":"https://farm4.staticflickr.com/3412/3200897650_872ae679ab.jpg","04":"https://farm6.staticflickr.com/5017/5464342385_20044f6aa5.jpg","03":"https://farm5.staticflickr.com/4102/4767391209_d7a12902f7.jpg","02":"https://farm2.staticflickr.com/1119/3266888181_318c431ac7.jpg","01":"https://farm3.staticflickr.com/2575/3880665463_40866f690e.jpg"}},"qualities":{"english":"qualities","type":"adjectives","bangla":"dharma / charitra","bLetters":"দর্ম / চরিট্র","index":77,"img":{"05":"https://farm4.staticflickr.com/3249/3103172664_fe6bf21574.jpg","04":"https://farm1.staticflickr.com/144/322942872_55e237d61e.jpg","03":"https://farm4.staticflickr.com/3561/3294373507_3166c85cf8.jpg","02":"https://farm9.staticflickr.com/8204/8164528095_ec6dbe039d.jpg","01":"https://farm4.staticflickr.com/3327/3584356860_e16a559d84.jpg"}},"bad":{"english":"bad","type":"adjectives","bangla":"kharap, mondo","bLetters":"খরপ্, মওন্ডও","index":79,"img":{"05":"https://farm7.staticflickr.com/6007/5957552960_08ee70b30e.jpg","04":"https://farm8.staticflickr.com/7433/14051063381_b4f31f5a6e.jpg","03":"https://farm9.staticflickr.com/8679/15952848817_29a3e931e7.jpg","02":"https://farm6.staticflickr.com/5460/9303933439_889ea73761.jpg","01":"https://farm3.staticflickr.com/2771/4302785445_9599500cb1.jpg"}},"clean":{"english":"clean","type":"adjectives","bangla":"poriskar","bLetters":"পওরিস্কর্","index":81,"img":{"05":"https://farm3.staticflickr.com/2570/3681634354_6247afc7e4.jpg","04":"https://farm4.staticflickr.com/3203/2521112576_611de40011.jpg","03":"https://farm9.staticflickr.com/8063/8271757675_b920e33a83.jpg","02":"https://farm8.staticflickr.com/7227/7009834127_1849b8154e.jpg","01":"https://farm8.staticflickr.com/7564/16103092656_b70a453c60.jpg"}},"dark":{"english":"dark","type":"adjectives","bangla":"aundhokar","bLetters":"ঔন্দওকর্","index":83,"img":{"05":"https://farm8.staticflickr.com/7638/16846254106_39362ddf97.jpg","04":"https://farm8.staticflickr.com/7598/16906148576_a5bf445aea.jpg","03":"https://farm9.staticflickr.com/8203/8214023172_3db05f6f7b.jpg","02":"https://farm9.staticflickr.com/8221/8294163336_2b6a0c8b13.jpg","01":"https://farm9.staticflickr.com/8710/16976860432_2d7cf4e898.jpg"}},"difficult":{"english":"difficult","type":"adjectives","bangla":"kothin","bLetters":"কওতিন্","index":85,"img":{"05":"https://farm4.staticflickr.com/3042/2862727680_a09a571f4b.jpg","04":"https://farm1.staticflickr.com/599/22041625999_d05c30c7b8.jpg","03":"https://farm1.staticflickr.com/348/18287762146_f7dc066ab0.jpg","02":"https://farm1.staticflickr.com/698/23374841199_2dd7537c8d.jpg","01":"https://farm4.staticflickr.com/3800/18798455486_faeef6e2d2.jpg"}},"dirty":{"english":"dirty","type":"adjectives","bangla":"nongra","bLetters":"নওন্গ্র","index":87,"img":{"05":"https://farm6.staticflickr.com/5287/5237920952_e7d3e378d7.jpg","04":"https://farm5.staticflickr.com/4018/4449593601_94a8502fa1.jpg","03":"https://farm3.staticflickr.com/2926/14060486167_6647bab4ec.jpg","02":"https://farm7.staticflickr.com/6113/6282443163_300c5f1fb9.jpg","01":"https://farm3.staticflickr.com/2576/4445681014_a9a5cf3ffd.jpg"}},"dry":{"english":"dry","type":"adjectives","bangla":"susko, sukno, jhorjhore","bLetters":"সুস্কও, সুক্নও, ঝওর্ঝওরএ","index":89,"img":{"05":"https://farm7.staticflickr.com/6159/6256673612_872b482faf.jpg","04":"https://farm8.staticflickr.com/7226/6996883919_344f60eafb.jpg","03":"https://farm5.staticflickr.com/4031/4309590712_1b24a9d7e4.jpg","02":"https://farm9.staticflickr.com/8427/7716268210_d921a98637.jpg","01":"https://farm6.staticflickr.com/5073/14259938449_670fc9cd2a.jpg"}},"easy":{"english":"easy","type":"adjectives","bangla":"sohoj","bLetters":"সওহওজ্","index":91,"img":{"05":"https://farm4.staticflickr.com/3124/2562290616_f42240bd94.jpg","04":"https://farm8.staticflickr.com/7340/10883596364_48d81ccb85.jpg","03":"https://farm1.staticflickr.com/570/21372610000_8fd27f5522.jpg","02":"https://farm5.staticflickr.com/4029/4634443529_b01a8e22bc.jpg","01":"https://farm7.staticflickr.com/6009/5985539153_ffcde0b8b4.jpg"}},"empty":{"english":"empty","type":"adjectives","bangla":"khali, sunno, faka","bLetters":"খলি, সুন্নও, fঅক","index":93,"img":{"05":"https://farm6.staticflickr.com/5281/5260372547_3e13bffa59.jpg","04":"https://farm8.staticflickr.com/7356/16535810486_20c23a0038.jpg","03":"https://farm6.staticflickr.com/5715/21885181476_b07cedb996.jpg","02":"https://farm2.staticflickr.com/1155/1357550756_c8d8311275.jpg","01":"https://farm6.staticflickr.com/5743/22650440539_6dc99580c2.jpg"}},"expensive":{"english":"expensive","type":"adjectives","bangla":"dami, baybohul,","bLetters":"ডমি, বয্বওহুল্,","index":95,"img":{"05":"https://farm7.staticflickr.com/6080/6113702575_177fe72d8c.jpg","04":"https://farm1.staticflickr.com/50/135584879_4c464c775f.jpg","03":"https://farm4.staticflickr.com/3032/2586019721_51c49a4abb.jpg","02":"https://farm6.staticflickr.com/5512/10084818485_a476a583e7.jpg","01":"https://farm7.staticflickr.com/6121/5958415102_23e147d179.jpg"}},"fast":{"english":"fast","type":"adjectives","bangla":"druto, taratari","bLetters":"ড্রুটও, টরটরি","index":97,"img":{"05":"https://farm5.staticflickr.com/4035/4694938736_a9f61e9968.jpg","04":"https://farm9.staticflickr.com/8325/8108861388_e2f1323df2.jpg","03":"https://farm8.staticflickr.com/7458/11652002304_3ee6f9dbc7.jpg","02":"https://farm1.staticflickr.com/349/19202481690_de1b7968d4.jpg","01":"https://farm7.staticflickr.com/6069/6097094446_cc9ac41927.jpg"}},"foreign":{"english":"foreign","type":"adjectives","bangla":"bideshi","bLetters":"বিডএশি","index":99,"img":{"05":"https://farm4.staticflickr.com/3020/3077136318_51af3b757d.jpg","04":"https://farm6.staticflickr.com/5128/5317398881_c4363d54cc.jpg","03":"https://farm4.staticflickr.com/3451/5706956012_4fc45951be.jpg","02":"https://farm7.staticflickr.com/6057/5908449893_92e72c2d77.jpg","01":"https://farm4.staticflickr.com/3606/3321731741_a351b7cd36.jpg"}},"full":{"english":"full","type":"adjectives","bangla":"sompurno,sob","bLetters":"সওম্পুর্নও,সওব্","index":101,"img":{"05":"https://farm9.staticflickr.com/8087/8599886286_19901d7549.jpg","04":"https://farm9.staticflickr.com/8042/8037629950_222d9f501d.jpg","03":"https://farm7.staticflickr.com/6109/6224120472_260b10f321.jpg","02":"https://farm8.staticflickr.com/7141/6483535585_dba309c873.jpg","01":"https://farm4.staticflickr.com/3423/3190077332_21c904435c.jpg"}},"good":{"english":"good","type":"adjectives","bangla":"valo","bLetters":"বলও","index":103,"img":{"05":"https://farm9.staticflickr.com/8097/8500596757_536a5c5a23.jpg","04":"https://farm3.staticflickr.com/2571/3944651626_a869bb127f.jpg","03":"https://farm3.staticflickr.com/2495/3688045223_cb066c7140.jpg","02":"https://farm1.staticflickr.com/299/20257998436_5e57a39956.jpg","01":"https://farm4.staticflickr.com/3663/3470340867_432190ee28.jpg"}},"hard":{"english":"hard","type":"adjectives","bangla":"kothin, sokto","bLetters":"কওতিন্, সওক্টও","index":105,"img":{"05":"https://farm4.staticflickr.com/3692/8812222656_b96a5d5194.jpg","04":"https://farm5.staticflickr.com/4016/5077466681_06b00c7758.jpg","03":"https://farm2.staticflickr.com/1271/602514545_869eb6c43b.jpg","02":"https://farm8.staticflickr.com/7166/6540604495_5c13a89368.jpg","01":"https://farm4.staticflickr.com/3260/2775541888_94d53677dd.jpg"}},"heavy":{"english":"heavy","type":"adjectives","bangla":"vari,","bLetters":"বরি,","index":107,"img":{"05":"https://farm3.staticflickr.com/2625/3865418555_310228ea68.jpg","04":"https://farm4.staticflickr.com/3953/15410119239_9537cf52cb.jpg","03":"https://farm9.staticflickr.com/8560/10273631804_6eaf788f1f.jpg","02":"https://farm2.staticflickr.com/1298/4677844514_2c452ab2f6.jpg","01":"https://farm8.staticflickr.com/7045/13859979703_cd59478900.jpg"}},"inexpensive":{"english":"inexpensive","type":"adjectives","bangla":"audami, com dami","bLetters":"ঔডমি, cওম্ ডমি","index":109,"img":{"05":"https://farm8.staticflickr.com/7159/6808410907_fa1a96bf04.jpg","04":"https://farm4.staticflickr.com/3567/3474197024_faca0c02c9.jpg","03":"https://farm6.staticflickr.com/5243/5285560366_6393607230.jpg","02":"https://farm6.staticflickr.com/5175/5463535467_f9999e3860.jpg","01":"https://farm7.staticflickr.com/6072/6078663010_9ae163f1db.jpg"}},"light":{"english":"light","type":"adjectives","bangla":"alo","bLetters":"অলও","index":111,"img":{"05":"https://farm4.staticflickr.com/3877/15254204045_4af74f2aae.jpg","04":"https://farm8.staticflickr.com/7476/16078800225_1eee0a9435.jpg","03":"https://farm4.staticflickr.com/3265/3138555850_621cfe86dd.jpg","02":"https://farm7.staticflickr.com/6002/6018444699_bd32f57189.jpg","01":"https://farm8.staticflickr.com/7531/16174258782_260944ca39.jpg"}},"local":{"english":"local","type":"adjectives","bangla":"sthaniya","bLetters":"স্তনিয","index":113,"img":{"05":"https://farm2.staticflickr.com/1568/24701092330_4e0558feb6.jpg","04":"https://farm9.staticflickr.com/8518/8594646988_5bae7b4b52.jpg","03":"https://farm6.staticflickr.com/5213/5506362970_988938594e.jpg","02":"https://farm8.staticflickr.com/7163/6405494691_e1963ac6d5.jpg","01":"https://farm6.staticflickr.com/5337/9317779458_9d88aba9cd.jpg"}},"new":{"english":"new","type":"adjectives","bangla":"notun","bLetters":"নওটুন্","index":115,"img":{"05":"https://farm8.staticflickr.com/7080/7011114363_53f82230c6.jpg","04":"https://farm9.staticflickr.com/8091/8348052272_f08c5edc65.jpg","03":"https://farm9.staticflickr.com/8693/17157499311_0be8f767eb.jpg","02":"https://farm8.staticflickr.com/7445/8832439186_9068549c64.jpg","01":"https://farm7.staticflickr.com/6172/6185734277_1c5003fa8f.jpg"}},"noisy":{"english":"noisy","type":"adjectives","bangla":"golmal aubosta,","bLetters":"গওল্মল্ ঔবওস্ট,","index":117,"img":{"05":"https://farm8.staticflickr.com/7287/9714885329_924d80947b.jpg","04":"https://farm1.staticflickr.com/510/19372149464_1b998078f4.jpg","03":"https://farm6.staticflickr.com/5254/5466431536_a65a47c2bf.jpg","02":"https://farm8.staticflickr.com/7437/15946325454_54f782f8c9.jpg","01":"https://farm6.staticflickr.com/5093/5465831481_840eefbdc8.jpg"}},"old":{"english":"old","type":"adjectives","bangla":"puraton, briddho","bLetters":"পুরটওন্, ব্রিড্দও","index":119,"img":{"05":"https://farm8.staticflickr.com/7081/7352515432_6eb2fb4aa3.jpg","04":"https://farm4.staticflickr.com/3755/14278967955_a137143d67.jpg","03":"https://farm4.staticflickr.com/3764/13608356903_26ded6ed28.jpg","02":"https://farm7.staticflickr.com/6083/6065287133_ca076caf9e.jpg","01":"https://farm8.staticflickr.com/7179/6990447337_060d610212.jpg"}},"powerful":{"english":"powerful","type":"adjectives","bangla":"soktishali","bLetters":"সওক্টিশলি","index":121,"img":{"05":"https://farm3.staticflickr.com/2411/2477690202_875dcb6df4.jpg","04":"https://farm9.staticflickr.com/8635/15909780081_40bcd5281c.jpg","03":"https://farm8.staticflickr.com/7146/6450404145_d062e28485.jpg","02":"https://farm2.staticflickr.com/1035/941262216_ba0672a31d.jpg","01":"https://farm8.staticflickr.com/7040/6988977437_c26c745307.jpg"}},"quiet":{"english":"quiet","type":"adjectives","bangla":"santo","bLetters":"সন্টও","index":123,"img":{"05":"https://farm8.staticflickr.com/7335/16582114382_f2479b60bb.jpg","04":"https://farm4.staticflickr.com/3380/3503340205_3e3aea3e7c.jpg","03":"https://farm8.staticflickr.com/7145/6616683103_e18735fba6.jpg","02":"https://farm8.staticflickr.com/7479/16099036658_7e0594941f.jpg","01":"https://farm8.staticflickr.com/7309/13161191244_f090c6a6a5.jpg"}},"correct":{"english":"correct","type":"adjectives","bangla":"sothik","bLetters":"সওতিক্","index":125,"img":{"05":"https://farm8.staticflickr.com/7575/16089493868_eb0b5ed2f9.jpg","04":"https://farm9.staticflickr.com/8484/8201330059_db6500eca3.jpg","03":"https://farm6.staticflickr.com/5638/21608341814_71d8c8b685.jpg","02":"https://farm5.staticflickr.com/4024/5125830527_659424ccb8.jpg","01":"https://farm1.staticflickr.com/82/269050457_80a822fca5.jpg"}},"slow":{"english":"slow","type":"adjectives","bangla":"dhire dhire","bLetters":"দিরএ দিরএ","index":127,"img":{"05":"https://farm7.staticflickr.com/6140/5917268840_849a982391.jpg","04":"https://farm5.staticflickr.com/4146/5056458773_28599c043d.jpg","03":"https://farm4.staticflickr.com/3644/5804172698_f5ca7b039b.jpg","02":"https://farm7.staticflickr.com/6138/5916708235_7f2506a5d6.jpg","01":"https://farm7.staticflickr.com/6022/5916708491_3d0c5c6b89.jpg"}},"soft":{"english":"soft","type":"adjectives","bangla":"norom","bLetters":"নওরওম্","index":129,"img":{"05":"https://farm4.staticflickr.com/3528/3937923317_cc55619834.jpg","04":"https://farm8.staticflickr.com/7375/13849572223_12c321c7bd.jpg","03":"https://farm5.staticflickr.com/4093/4883309278_b940700626.jpg","02":"https://farm8.staticflickr.com/7129/7479131162_e763d2061e.jpg","01":"https://farm6.staticflickr.com/5565/14996915788_5ea19bb867.jpg"}},"very":{"english":"very","type":"adjectives","bangla":"khub","bLetters":"খুব্","index":131,"img":{"05":"https://farm8.staticflickr.com/7337/12601155765_a3b9273853.jpg","04":"https://farm1.staticflickr.com/738/22866872027_5af68e8dbc.jpg","03":"https://farm6.staticflickr.com/5599/15399221640_fe195f4f29.jpg","02":"https://farm9.staticflickr.com/8155/7678250262_237a3b0234.jpg","01":"https://farm6.staticflickr.com/5579/14692155813_bf0814857b.jpg"}},"weak":{"english":"weak","type":"adjectives","bangla":"durbol","bLetters":"ডুর্বওল্","index":133,"img":{"05":"https://farm4.staticflickr.com/3599/3485860022_002324122a.jpg","04":"https://farm4.staticflickr.com/3933/15520998926_f2b1f016ac.jpg","03":"https://farm9.staticflickr.com/8558/15812554722_a987c0a863.jpg","02":"https://farm4.staticflickr.com/3321/4619580959_6dee495f3a.jpg","01":"https://farm4.staticflickr.com/3032/3066211122_03ee1c0cf2.jpg"}},"wet":{"english":"wet","type":"adjectives","bangla":"veja, satsete","bLetters":"বএজ, সট্সএটএ","index":135,"img":{"05":"https://farm4.staticflickr.com/3323/3484983569_d0c18ba5e1.jpg","04":"https://farm3.staticflickr.com/2828/10725000204_e14b5dc681.jpg","03":"https://farm9.staticflickr.com/8515/8445465808_e61e9a8903.jpg","02":"https://farm4.staticflickr.com/3350/3238532587_5d3d7a030b.jpg","01":"https://farm4.staticflickr.com/3525/3243000557_642fcfd9b3.jpg"}},"wrong":{"english":"wrong","type":"adjectives","bangla":"vul","bLetters":"বুল্","index":137,"img":{"05":"https://farm6.staticflickr.com/5061/5565017583_a36708fe2a.jpg","04":"https://farm6.staticflickr.com/5556/14347015793_dbe06ec380.jpg","03":"https://farm4.staticflickr.com/3636/3380323992_927fabcd64.jpg","02":"https://farm4.staticflickr.com/3606/3326018116_0a72b21c87.jpg","01":"https://farm4.staticflickr.com/3605/3501955236_6990d5c6f8.jpg"}},"young":{"english":"young","type":"adjectives","bangla":"jubok","bLetters":"জুবওক্","index":139,"img":{"05":"https://farm4.staticflickr.com/3741/11203574805_a669cb6e72.jpg","04":"https://farm6.staticflickr.com/5777/21113551748_7df2b6437a.jpg","03":"https://farm7.staticflickr.com/6014/5998143646_d048b6da92.jpg","02":"https://farm6.staticflickr.com/5444/17352608723_bd1ca909bd.jpg","01":"https://farm1.staticflickr.com/590/21265707172_4056b42b25.jpg"}},"quantities":{"english":"quantities","type":"adjectives","bangla":"porimaner, poriman","bLetters":"পওরিমনএর্, পওরিমন্","index":143,"img":{"05":"https://farm5.staticflickr.com/4119/4851013575_23d69fca98.jpg","04":"https://farm6.staticflickr.com/5699/20981610870_f17d6559a9.jpg","03":"https://farm6.staticflickr.com/5831/20547079334_12d95fa584.jpg","02":"https://farm4.staticflickr.com/3830/12793409044_38f1a048b7.jpg","01":"https://farm6.staticflickr.com/5191/14212863357_bb920d7dbf.jpg"}},"few":{"english":"few","type":"adjectives","bangla":"koyek","bLetters":"কওযএক্","index":145,"img":{"05":"https://farm6.staticflickr.com/5020/5466221376_166b3d9b12.jpg","04":"https://farm6.staticflickr.com/5294/5434276611_d34aa07e5c.jpg","03":"https://farm6.staticflickr.com/5178/5524835850_55d5197460.jpg","02":"https://farm9.staticflickr.com/8306/8012312905_7f5dd03fb3.jpg","01":"https://farm4.staticflickr.com/3494/3279014942_bed8ec99cf.jpg"}},"little":{"english":"little","type":"adjectives","bangla":"soto","bLetters":"সওটও","index":147,"img":{"05":"https://farm6.staticflickr.com/5295/5422651139_a23a15534a.jpg","04":"https://farm1.staticflickr.com/496/19156907081_55bdda05e8.jpg","03":"https://farm3.staticflickr.com/2806/9622775845_4a4d6504c4.jpg","02":"https://farm5.staticflickr.com/4150/4986183928_c26065665a.jpg","01":"https://farm1.staticflickr.com/674/21168399500_b1a5b4f87a.jpg"}},"many":{"english":"many","type":"adjectives","bangla":"aunek","bLetters":"ঔনএক্","index":149,"img":{"05":"https://farm5.staticflickr.com/4098/5432998891_4e483e469e.jpg","04":"https://farm3.staticflickr.com/2109/2412672580_50c79eb173.jpg","03":"https://farm9.staticflickr.com/8510/8477760814_e16a48c6ec.jpg","02":"https://farm7.staticflickr.com/6044/6281126280_7363975acc.jpg","01":"https://farm3.staticflickr.com/2812/9430882992_16957ce185.jpg"}},"much":{"english":"much","type":"adjectives","bangla":"audhik","bLetters":"ঔদিক্","index":151,"img":{"05":"https://farm5.staticflickr.com/4025/4394488138_7eb574ebae.jpg","04":"https://farm5.staticflickr.com/4097/4850590530_304c3618a0.jpg","03":"https://farm4.staticflickr.com/3122/2581914532_38541823ee.jpg","02":"https://farm7.staticflickr.com/6127/6012270745_264658ce04.jpg","01":"https://farm5.staticflickr.com/4093/4874912056_483ab92649.jpg"}},"part":{"english":"part","type":"adjectives","bangla":"aungsho","bLetters":"ঔন্গ্শও","index":153,"img":{"05":"https://farm4.staticflickr.com/3425/3905360027_cdacf3771e.jpg","04":"https://farm4.staticflickr.com/3933/15467321656_ca3544e44a.jpg","03":"https://farm6.staticflickr.com/5126/5325544523_6ece5285f0.jpg","02":"https://farm4.staticflickr.com/3948/15570987932_2ffdb63860.jpg","01":"https://farm6.staticflickr.com/5564/15030904499_e2af705e4b.jpg"}},"some":{"english":"some","type":"adjectives","bangla":"kisu","bLetters":"কিসু","index":155,"img":{"05":"https://farm9.staticflickr.com/8052/8115067661_45452a611b.jpg","04":"https://farm3.staticflickr.com/2632/4178124727_a3ac01f275.jpg","03":"https://farm9.staticflickr.com/8243/8651829539_ffce9e7c63.jpg","02":"https://farm3.staticflickr.com/2745/4075561875_d8ccd42e17.jpg","01":"https://farm4.staticflickr.com/3878/14301532060_cd68ab3c51.jpg"}},"a few":{"english":"a few","type":"adjectives","bangla":"koyek","bLetters":"কওযএক্","index":157,"img":{"05":"https://farm6.staticflickr.com/5020/5466221376_166b3d9b12.jpg","04":"https://farm6.staticflickr.com/5294/5434276611_d34aa07e5c.jpg","03":"https://farm6.staticflickr.com/5178/5524835850_55d5197460.jpg","02":"https://farm9.staticflickr.com/8306/8012312905_7f5dd03fb3.jpg","01":"https://farm4.staticflickr.com/3494/3279014942_bed8ec99cf.jpg"}},"whole":{"english":"whole","type":"adjectives","bangla":"puro / sampurna","bLetters":"পুরও / সম্পুর্ন","index":159,"img":{"05":"https://farm6.staticflickr.com/5583/14833426646_5a88236991.jpg","04":"https://farm8.staticflickr.com/7715/17041386927_eaa7dba5b1.jpg","03":"https://farm4.staticflickr.com/3794/11057221643_468317318b.jpg","02":"https://farm9.staticflickr.com/8348/8224360741_6c8dff03b9.jpg","01":"https://farm9.staticflickr.com/8620/16462611060_5bc64871f3.jpg"}}},"feminine":{"objects":{"english":"objects","type":"feminine","bangla":"uddesso ","bLetters":"উড্ডএস্সও ","index":1,"img":{"05":"https://farm1.staticflickr.com/121/297018594_8a296d8d1c.jpg","04":"https://farm3.staticflickr.com/2821/9553827394_f829b2cc38.jpg","03":"https://farm8.staticflickr.com/7325/15761061463_8b67132dd7.jpg","02":"https://farm8.staticflickr.com/7287/8864243830_ea93e5405b.jpg","01":"https://farm5.staticflickr.com/4008/4216814000_f9118928fd.jpg"}},"bathroom":{"english":"bathroom","type":"feminine","bangla":"gosol khana","bLetters":"গওসওল্ খন","index":3,"img":{"05":"https://farm3.staticflickr.com/2164/3535653325_f8d31e0d67.jpg","04":"https://farm3.staticflickr.com/2021/2466819324_2d3edcbe60.jpg","03":"https://farm6.staticflickr.com/5299/5465330544_08f65e5e52.jpg","02":"https://farm9.staticflickr.com/8306/8007901628_d5168cbaba.jpg","01":"https://farm3.staticflickr.com/2095/2086365849_1413497b16.jpg"}},"bed":{"english":"bed","type":"feminine","bangla":"bisana","bLetters":"বিসন","index":5,"img":{"05":"https://farm4.staticflickr.com/3057/2884135028_81da01934a.jpg","04":"https://farm7.staticflickr.com/6071/6158659127_295b597b9a.jpg","03":"https://farm4.staticflickr.com/3573/3681124095_b156642078.jpg","02":"https://farm1.staticflickr.com/68/198784420_90275414d6.jpg","01":"https://farm3.staticflickr.com/2919/14321467025_135b91ac62.jpg"}},"bedroom":{"english":"bedroom","type":"feminine","bangla":"sowar ghor","bLetters":"সওwঅর্ ঘওর্","index":7,"img":{"05":"https://farm3.staticflickr.com/2634/3866239105_139d890359.jpg","04":"https://farm3.staticflickr.com/2028/1700614413_d2bded38c4.jpg","03":"https://farm4.staticflickr.com/3193/2781583065_8fe6533642.jpg","02":"https://farm3.staticflickr.com/2246/2208212893_e90b336570.jpg","01":"https://farm3.staticflickr.com/2650/3978424055_50a8040aa7.jpg"}},"ceiling":{"english":"ceiling","type":"feminine","bangla":"tak","bLetters":"টক্","index":9,"img":{"05":"https://farm1.staticflickr.com/157/396338876_daf98a4f6e.jpg","04":"https://farm4.staticflickr.com/3796/12436956113_e65629ca1f.jpg","03":"https://farm9.staticflickr.com/8096/8442065864_0df4648254.jpg","02":"https://farm6.staticflickr.com/5504/12364677024_0702d28fd0.jpg","01":"https://farm8.staticflickr.com/7014/6720292973_440156e132.jpg"}},"chair":{"english":"chair","type":"feminine","bangla":"kadaro (bosar jonno)","bLetters":"কডরও (বওসর্ জওন্নও)","index":11,"img":{"05":"https://farm3.staticflickr.com/2041/3529687791_5660ec9473.jpg","04":"https://farm7.staticflickr.com/6022/5955071184_74742c2b86.jpg","03":"https://farm8.staticflickr.com/7485/16303559346_e380dccfcc.jpg","02":"https://farm5.staticflickr.com/4091/5069063990_33e7c8280f.jpg","01":"https://farm5.staticflickr.com/4056/5079490272_5396e8e109.jpg"}},"clothes":{"english":"clothes","type":"feminine","bangla":"posak","bLetters":"পওসক্","index":13,"img":{"05":"https://farm5.staticflickr.com/4102/4824669956_ab1bf768bb.jpg","04":"https://farm6.staticflickr.com/5170/5201781696_e131485d47.jpg","03":"https://farm6.staticflickr.com/5257/5506118845_db7d26c32e.jpg","02":"https://farm6.staticflickr.com/5493/12163250605_c3eb2e650c.jpg","01":"https://farm8.staticflickr.com/7308/12146251243_341f3a47bf.jpg"}},"coat":{"english":"coat","type":"feminine","bangla":"jama, aboron","bLetters":"জম, অবওরওন্","index":15,"img":{"05":"https://farm4.staticflickr.com/3009/2763411834_0083e0cd22.jpg","04":"https://farm4.staticflickr.com/3432/3208106093_b6dc2bdd6e.jpg","03":"https://farm4.staticflickr.com/3209/3005052340_bb1b86f53f.jpg","02":"https://farm4.staticflickr.com/3252/2950681813_437c63b286.jpg","01":"https://farm4.staticflickr.com/3070/3103992976_d41ed4d861.jpg"}},"cup":{"english":"cup","type":"feminine","bangla":"pewala","bLetters":"পএwঅল","index":17,"img":{"05":"https://farm3.staticflickr.com/2507/4005364769_18a847abaf.jpg","04":"https://farm2.staticflickr.com/1300/821810474_e27a47bc5b.jpg","03":"https://farm8.staticflickr.com/7089/6995450970_a031e901c8.jpg","02":"https://farm8.staticflickr.com/7275/7534567392_be7395de52.jpg","01":"https://farm4.staticflickr.com/3911/14639454281_d878c9df5a.jpg"}},"desk":{"english":"desk","type":"feminine","bangla":"tebil","bLetters":"টএবিল্","index":19,"img":{"05":"https://farm8.staticflickr.com/7166/6471000303_064cd1412f.jpg","04":"https://farm4.staticflickr.com/3126/2431772655_824379a723.jpg","03":"https://farm4.staticflickr.com/3041/2750903492_fe8f56943f.jpg","02":"https://farm7.staticflickr.com/6150/5972773895_b5e5f347e9.jpg","01":"https://farm3.staticflickr.com/2765/4118865335_11fddde1a5.jpg"}},"dress":{"english":"dress","type":"feminine","bangla":"posak","bLetters":"পওসক্","index":21,"img":{"05":"https://farm9.staticflickr.com/8527/8574548120_a72ba1d591.jpg","04":"https://farm6.staticflickr.com/5588/14958502210_d62a4c962b.jpg","03":"https://farm8.staticflickr.com/7014/6580231363_6e050f2170.jpg","02":"https://farm4.staticflickr.com/3487/4018332477_712d757987.jpg","01":"https://farm8.staticflickr.com/7230/7002464381_3b27a053e6.jpg"}},"floor":{"english":"floor","type":"feminine","bangla":"tola, mejhe","bLetters":"টওল, মএঝএ","index":23,"img":{"05":"https://farm5.staticflickr.com/4047/4480671750_096ece922b.jpg","04":"https://farm4.staticflickr.com/3954/15405417229_0277b530cd.jpg","03":"https://farm3.staticflickr.com/2624/4195129951_a6566e5b7a.jpg","02":"https://farm8.staticflickr.com/7317/12728152514_cd46ee81cf.jpg","01":"https://farm9.staticflickr.com/8003/6959974636_a7dbf60b2f.jpg"}},"fork":{"english":"fork","type":"feminine","bangla":"kata chamach","bLetters":"কট চমচ্","index":25,"img":{"05":"https://farm3.staticflickr.com/2237/2909842952_0641cd8f91.jpg","04":"https://farm1.staticflickr.com/183/474411578_a7e6c1ad56.jpg","03":"https://farm4.staticflickr.com/3025/2507321223_761d07d743.jpg","02":"https://farm7.staticflickr.com/6002/6021265180_44bd4ea175.jpg","01":"https://farm9.staticflickr.com/8377/8349818088_d01dca42fd.jpg"}},"furniture":{"english":"furniture","type":"feminine","bangla":"asbab potro","bLetters":"অস্বব্ পওট্রও","index":27,"img":{"05":"https://farm9.staticflickr.com/8356/8363087894_bf9c397724.jpg","04":"https://farm9.staticflickr.com/8365/8362034055_c59807e9d0.jpg","03":"https://farm4.staticflickr.com/3383/3199965352_9ec107b238.jpg","02":"https://farm9.staticflickr.com/8467/8363084744_f05ed39a7e.jpg","01":"https://farm7.staticflickr.com/6016/6014058220_2b77aa87e9.jpg"}},"glass":{"english":"glass","type":"feminine","bangla":"glass","bLetters":"গ্লস্স্","index":29,"img":{"05":"https://farm5.staticflickr.com/4051/4586563710_e8892d46e0.jpg","04":"https://farm5.staticflickr.com/4031/4649597451_b2ff29f38f.jpg","03":"https://farm8.staticflickr.com/7164/6630889197_aa3366040e.jpg","02":"https://farm9.staticflickr.com/8799/17208021576_1db97fb78a.jpg","01":"https://farm9.staticflickr.com/8560/8869072842_6be3cae259.jpg"}},"hat":{"english":"hat","type":"feminine","bangla":"hat","bLetters":"হট্","index":31,"img":{"05":"https://farm4.staticflickr.com/3471/3271553401_102e26f9af.jpg","04":"https://farm4.staticflickr.com/3915/15063303870_7a674d5b37.jpg","03":"https://farm2.staticflickr.com/1392/1284028968_4f522812be.jpg","02":"https://farm5.staticflickr.com/4137/4859331582_536dda6e29.jpg","01":"https://farm1.staticflickr.com/126/400785787_660f4bff05.jpg"}},"house":{"english":"house","type":"feminine","bangla":"bari","bLetters":"বরি","index":33,"img":{"05":"https://farm9.staticflickr.com/8528/8638854596_0fe1696062.jpg","04":"https://farm4.staticflickr.com/3276/2805074275_90e7b66777.jpg","03":"https://farm3.staticflickr.com/2307/2105991752_cc151b3190.jpg","02":"https://farm8.staticflickr.com/7407/16558456632_ed8271f82b.jpg","01":"https://farm8.staticflickr.com/7239/7344446848_09dc3fe626.jpg"}},"ink":{"english":"ink","type":"feminine","bangla":"kali","bLetters":"কলি","index":35,"img":{"05":"https://farm6.staticflickr.com/5569/14661823716_8e46690639.jpg","04":"https://farm4.staticflickr.com/3541/3626308694_d404128e62.jpg","03":"https://farm8.staticflickr.com/7314/16458472972_d4b2944e61.jpg","02":"https://farm6.staticflickr.com/5607/15289770459_d7cdf474ec.jpg","01":"https://farm4.staticflickr.com/3279/2710990913_4084e94aff.jpg"}},"jacket":{"english":"jacket","type":"feminine","bangla":"jaket (siter posak","bLetters":"জকএট্ (সিটএর্ পওসক্","index":37,"img":{"05":"https://farm9.staticflickr.com/8219/8315512032_09806ee5c8.jpg","04":"https://farm6.staticflickr.com/5249/5687848013_31dea171cc.jpg","03":"https://farm5.staticflickr.com/4130/5089931482_c600d60041.jpg","02":"https://farm4.staticflickr.com/3923/14663396762_e925b15243.jpg","01":"https://farm3.staticflickr.com/2870/12272401794_09262dac52.jpg"}},"kitchen":{"english":"kitchen","type":"feminine","bangla":"ranna ghar","bLetters":"রন্ন ঘর্","index":39,"img":{"05":"https://farm3.staticflickr.com/2322/2483158372_26f7eecddb.jpg","04":"https://farm1.staticflickr.com/5/6079064_362a9a5a10.jpg","03":"https://farm4.staticflickr.com/3377/4613198694_7b05668a72.jpg","02":"https://farm4.staticflickr.com/3369/3414244155_a667140554.jpg","01":"https://farm6.staticflickr.com/5222/5751159067_0d4f2f2a46.jpg"}},"knife":{"english":"knife","type":"feminine","bangla":"suri (just for cut)","bLetters":"সুরি (জুস্ট্ fওর্ cউট্)","index":41,"img":{"05":"https://farm7.staticflickr.com/6050/6277632983_f9d906f3b1.jpg","04":"https://farm8.staticflickr.com/7041/6989374606_479956d731.jpg","03":"https://farm6.staticflickr.com/5114/7092319589_3aef26f145.jpg","02":"https://farm5.staticflickr.com/4078/4851642241_662acaeab8.jpg","01":"https://farm5.staticflickr.com/4025/4560831706_0372290564.jpg"}},"lamp":{"english":"lamp","type":"feminine","bangla":"bati","bLetters":"বটি","index":43,"img":{"05":"https://farm8.staticflickr.com/7404/9302645474_ec805b8480.jpg","04":"https://farm3.staticflickr.com/2668/4141667959_5b8d9407b4.jpg","03":"https://farm4.staticflickr.com/3262/2409022633_1bd15b4523.jpg","02":"https://farm3.staticflickr.com/2858/13229805683_c4f493168f.jpg","01":"https://farm1.staticflickr.com/29/95080259_99796484b8.jpg"}},"letter":{"english":"letter","type":"feminine","bangla":"chiti, borno","bLetters":"চিটি, বওর্নও","index":45,"img":{"05":"https://farm2.staticflickr.com/1030/531525173_97ba1b32f1.jpg","04":"https://farm7.staticflickr.com/6136/5940608894_89c0d72846.jpg","03":"https://farm8.staticflickr.com/7439/11632626316_9524220101.jpg","02":"https://farm6.staticflickr.com/5023/5867736346_0c52d676bc.jpg","01":"https://farm6.staticflickr.com/5207/5328093557_02bb4c6a65.jpg"}},"map":{"english":"map","type":"feminine","bangla":"manchitro","bLetters":"মন্চিট্রও","index":47,"img":{"05":"https://farm9.staticflickr.com/8458/8025921235_552e5c202f.jpg","04":"https://farm3.staticflickr.com/2130/2313995479_4ccda2421c.jpg","03":"https://farm6.staticflickr.com/5283/5347592472_d0933ec91f.jpg","02":"https://farm7.staticflickr.com/6082/6102822175_22a4610eaa.jpg","01":"https://farm6.staticflickr.com/5580/14758448386_ba9c428c0d.jpg"}},"newspaper":{"english":"newspaper","type":"feminine","bangla":"songbad potro","bLetters":"সওন্গ্বড্ পওট্রও","index":49,"img":{"05":"https://farm7.staticflickr.com/6091/6277208304_ab6988a99f.jpg","04":"https://farm1.staticflickr.com/221/475458112_326a8dc947.jpg","03":"https://farm7.staticflickr.com/6054/6277208708_7e6607d601.jpg","02":"https://farm7.staticflickr.com/6042/6276688407_12900948a2.jpg","01":"https://farm7.staticflickr.com/6033/6277209256_934f20da10.jpg"}},"notebook":{"english":"notebook","type":"feminine","bangla":"likhito boi","bLetters":"লিখিটও বওই","index":51,"img":{"05":"https://farm4.staticflickr.com/3908/15123341487_6effa57926.jpg","04":"https://farm6.staticflickr.com/5095/5483255257_9c282b2162.jpg","03":"https://farm5.staticflickr.com/4003/4577723451_51bfd12198.jpg","02":"https://farm5.staticflickr.com/4004/4440849780_c3ae38aa5c.jpg","01":"https://farm9.staticflickr.com/8219/8332921452_a155a8d9b2.jpg"}},"pants":{"english":"pants","type":"feminine","bangla":"pant, payjama","bLetters":"পন্ট্, পয্জম","index":53,"img":{"05":"https://farm5.staticflickr.com/4067/4268562104_1bf8deb00a.jpg","04":"https://farm4.staticflickr.com/3280/3020952503_3e9c713866.jpg","03":"https://farm4.staticflickr.com/3046/2915108151_d3710ef2d5.jpg","02":"https://farm4.staticflickr.com/3214/3021784524_0495c46f25.jpg","01":"https://farm6.staticflickr.com/5101/5619680407_beb1a997aa.jpg"}},"paper":{"english":"paper","type":"feminine","bangla":"kagoj","bLetters":"কগওজ্","index":55,"img":{"05":"https://farm8.staticflickr.com/7059/6981938625_e2cd1aeba4.jpg","04":"https://farm8.staticflickr.com/7126/7562639540_433cbf3343.jpg","03":"https://farm6.staticflickr.com/5469/6910883274_734bebcf0d.jpg","02":"https://farm9.staticflickr.com/8107/8503603573_158e1ebbed.jpg","01":"https://farm8.staticflickr.com/7430/9604347427_7753997db8.jpg"}},"pen":{"english":"pen","type":"feminine","bangla":"kolok, lekhoni","bLetters":"কওলওক্, লএখওনি","index":57,"img":{"05":"https://farm1.staticflickr.com/54/133141172_2806ca407b.jpg","04":"https://farm5.staticflickr.com/4093/4879593587_c8a658f230.jpg","03":"https://farm3.staticflickr.com/2592/5848175862_5e05838a6f.jpg","02":"https://farm6.staticflickr.com/5572/15020236989_e4e5043353.jpg","01":"https://farm4.staticflickr.com/3836/14907198366_b10560fe87.jpg"}},"pencil":{"english":"pencil","type":"feminine","bangla":"rul, lekhoni","bLetters":"রুল্, লএখওনি","index":59,"img":{"05":"https://farm4.staticflickr.com/3781/10358896946_4bd5623009.jpg","04":"https://farm1.staticflickr.com/168/484601255_bf79ebc82d.jpg","03":"https://farm8.staticflickr.com/7794/18060483269_71f6083dc6.jpg","02":"https://farm8.staticflickr.com/7158/6742625959_af858306f8.jpg","01":"https://farm3.staticflickr.com/2730/4141957498_bb264df5a8.jpg"}},"pharmacy":{"english":"pharmacy","type":"feminine","bangla":"ousodher dokan","bLetters":"ওউসওদএর্ ডওকন্","index":61,"img":{"05":"https://farm3.staticflickr.com/2675/4117138841_e6e5b758cd.jpg","04":"https://farm3.staticflickr.com/2372/2249856700_ecc9f49fbf.jpg","03":"https://farm6.staticflickr.com/5216/5489242824_3404052574.jpg","02":"https://farm3.staticflickr.com/2522/4121148000_4c73b4cdcd.jpg","01":"https://farm7.staticflickr.com/6240/6257718014_77e529239c.jpg"}},"picture":{"english":"picture","type":"feminine","bangla":"sobi","bLetters":"সওবি","index":63,"img":{"05":"https://farm3.staticflickr.com/2876/13411338035_41f228c169.jpg","04":"https://farm4.staticflickr.com/3415/4614180402_2427bc95b2.jpg","03":"https://farm8.staticflickr.com/7185/6992804069_05a6334400.jpg","02":"https://farm7.staticflickr.com/6006/5978680836_9873f2726f.jpg","01":"https://farm7.staticflickr.com/6041/6254921988_8cfc8679c0.jpg"}},"plate":{"english":"plate","type":"feminine","bangla":"thala","bLetters":"তল","index":65,"img":{"05":"https://farm2.staticflickr.com/1164/1418942583_2886874445.jpg","04":"https://farm2.staticflickr.com/1003/1418944335_fa9f06fc19.jpg","03":"https://farm2.staticflickr.com/1153/1418934241_cfea735c1d.jpg","02":"https://farm2.staticflickr.com/1391/1419818530_fee9ca4c21.jpg","01":"https://farm2.staticflickr.com/1264/1419820354_9d1b318b48.jpg"}},"refrigerator":{"english":"refrigerator","type":"feminine","bangla":"frig","bLetters":"fরিগ্","index":67,"img":{"05":"https://farm8.staticflickr.com/7202/6914494459_8639dbedfa.jpg","04":"https://farm6.staticflickr.com/5067/5660505282_de2f4e79b0.jpg","03":"https://farm3.staticflickr.com/2612/3911603331_2313904a5e.jpg","02":"https://farm4.staticflickr.com/3800/11307200314_9c4cc7ec68.jpg","01":"https://farm1.staticflickr.com/187/411332543_a63e7f11fb.jpg"}},"restaurant":{"english":"restaurant","type":"feminine","bangla":"khabarer dokan","bLetters":"খবরএর্ ডওকন্","index":69,"img":{"05":"https://farm8.staticflickr.com/7023/6511303073_058959d5cf.jpg","04":"https://farm9.staticflickr.com/8020/7553734362_cc895b9670.jpg","03":"https://farm4.staticflickr.com/3823/12680142033_26f25fd155.jpg","02":"https://farm2.staticflickr.com/1715/24319831530_b738924180.jpg","01":"https://farm7.staticflickr.com/6099/6367973937_7ce9715c7f.jpg"}},"roof":{"english":"roof","type":"feminine","bangla":"sad","bLetters":"সড্","index":71,"img":{"05":"https://farm4.staticflickr.com/3888/15184094466_99ac2b15b3.jpg","04":"https://farm6.staticflickr.com/5274/5852773980_e203ef3819.jpg","03":"https://farm6.staticflickr.com/5292/5496467600_8a94bb4eb0.jpg","02":"https://farm9.staticflickr.com/8633/16610555816_8393fa80da.jpg","01":"https://farm8.staticflickr.com/7559/15573170299_9bef5304fe.jpg"}},"room":{"english":"room","type":"feminine","bangla":"soto ghor","bLetters":"সওটও ঘওর্","index":73,"img":{"05":"https://farm5.staticflickr.com/4134/4823398507_069548fa9a.jpg","04":"https://farm5.staticflickr.com/4107/5045228356_53990c7203.jpg","03":"https://farm4.staticflickr.com/3226/2899365113_3c46a6586f.jpg","02":"https://farm4.staticflickr.com/3955/14941316303_e6346b2d6c.jpg","01":"https://farm4.staticflickr.com/3709/8984241940_5d19725e51.jpg"}},"rug":{"english":"rug","type":"feminine","bangla":"khipto howa","bLetters":"খিপ্টও হওwঅ","index":75,"img":{"05":"https://farm4.staticflickr.com/3037/2947927467_2e1d39f314.jpg","04":"https://farm6.staticflickr.com/5345/7154770278_76120aac9d.jpg","03":"https://farm4.staticflickr.com/3041/2948781878_6707d00869.jpg","02":"https://farm4.staticflickr.com/3249/2948781474_96ba253693.jpg","01":"https://farm4.staticflickr.com/3176/2947927299_b06d450f06.jpg"}},"scissors":{"english":"scissors","type":"feminine","bangla":"knechi","bLetters":"ক্নএচি","index":77,"img":{"05":"https://farm1.staticflickr.com/22/30887111_fd4bd86035.jpg","04":"https://farm4.staticflickr.com/3109/2901072234_c2fcd10291.jpg","03":"https://farm8.staticflickr.com/7147/6466875139_82da08c1b0.jpg","02":"https://farm4.staticflickr.com/3168/2657315946_c4746e1884.jpg","01":"https://farm3.staticflickr.com/2244/1818312422_e66021ac1b.jpg"}},"shampoo":{"english":"shampoo","type":"feminine","bangla":"shampoo","bLetters":"শম্পূ","index":79,"img":{"05":"https://farm9.staticflickr.com/8332/8382862694_990c0fa926.jpg","04":"https://farm8.staticflickr.com/7438/9620727730_a6233fa791.jpg","03":"https://farm9.staticflickr.com/8188/8382847902_4f4f71940b.jpg","02":"https://farm8.staticflickr.com/7286/8737736498_8496c57a19.jpg","01":"https://farm9.staticflickr.com/8378/8358868470_1e1d6e345c.jpg"}},"shirt":{"english":"shirt","type":"feminine","bangla":"prursher jama","bLetters":"প্রুর্শএর্ জম","index":81,"img":{"05":"https://farm8.staticflickr.com/7002/6450874589_d1782a5096.jpg","04":"https://farm7.staticflickr.com/6046/6350722852_4fed3a61ef.jpg","03":"https://farm7.staticflickr.com/6237/6311900364_7c777aa483.jpg","02":"https://farm8.staticflickr.com/7300/8747836391_2b27451141.jpg","01":"https://farm3.staticflickr.com/2766/4415672337_09d0de0140.jpg"}},"shoes":{"english":"shoes","type":"feminine","bangla":"juta ","bLetters":"জুট ","index":83,"img":{"05":"https://farm6.staticflickr.com/5012/5469283493_737bcc716f.jpg","04":"https://farm7.staticflickr.com/6211/6323122529_141eafd004.jpg","03":"https://farm6.staticflickr.com/5059/5416317249_b7c738270a.jpg","02":"https://farm8.staticflickr.com/7027/6520705999_9c57c375f3.jpg","01":"https://farm8.staticflickr.com/7352/9373548583_9a80f3b62a.jpg"}},"soap":{"english":"soap","type":"feminine","bangla":"saban","bLetters":"সবন্","index":85,"img":{"05":"https://farm7.staticflickr.com/6136/6032583716_1243d733bb.jpg","04":"https://farm8.staticflickr.com/7491/15940896206_334e3725a8.jpg","03":"https://farm4.staticflickr.com/3636/5710275118_e73acb0b14.jpg","02":"https://farm7.staticflickr.com/6209/6119942055_88407a9f60.jpg","01":"https://farm7.staticflickr.com/6136/6002345198_2f3e631116.jpg"}},"socks":{"english":"socks","type":"feminine","bangla":"muja","bLetters":"মুজ","index":87,"img":{"05":"https://farm3.staticflickr.com/2614/3814201561_50bfb62624.jpg","04":"https://farm8.staticflickr.com/7043/6953528561_965b9cea64.jpg","03":"https://farm4.staticflickr.com/3220/3131969145_8dfc208a19.jpg","02":"https://farm4.staticflickr.com/3165/2934483093_b2c22fbbf2.jpg","01":"https://farm2.staticflickr.com/1182/1413111580_ce5d6fb232.jpg"}},"spoon":{"english":"spoon","type":"feminine","bangla":"chamuch","bLetters":"চমুচ্","index":89,"img":{"05":"https://farm8.staticflickr.com/7384/8718912833_fde07fa267.jpg","04":"https://farm7.staticflickr.com/6158/6269084550_4fe9957b04.jpg","03":"https://farm8.staticflickr.com/7371/9542634967_218ec1355e.jpg","02":"https://farm6.staticflickr.com/5244/13988243986_1601953042.jpg","01":"https://farm3.staticflickr.com/2006/2129892843_e40c521850.jpg"}},"table":{"english":"table","type":"feminine","bangla":"table, lomba chouki, ","bLetters":"টব্লএ, লওম্ব চওউকি, ","index":91,"img":{"05":"https://farm3.staticflickr.com/2562/3917509817_a57974cf18.jpg","04":"https://farm4.staticflickr.com/3110/3135563993_0d37847a35.jpg","03":"https://farm1.staticflickr.com/23/28916908_64db9841f3.jpg","02":"https://farm8.staticflickr.com/7170/6415553169_401ee8c1e7.jpg","01":"https://farm6.staticflickr.com/5182/5641925520_f0fee5c592.jpg"}},"toilet":{"english":"toilet","type":"feminine","bangla":"paykhana","bLetters":"পয্খন","index":93,"img":{"05":"https://farm8.staticflickr.com/7340/8791383717_0815f9d001.jpg","04":"https://farm8.staticflickr.com/7282/8843607169_07cd30239a.jpg","03":"https://farm8.staticflickr.com/7389/8844460014_f0b3dc0af7.jpg","02":"https://farm8.staticflickr.com/7717/17149036881_9e368f613a.jpg","01":"https://farm1.staticflickr.com/89/241563205_4aeab6998f.jpg"}},"toothbrush":{"english":"toothbrush","type":"feminine","bangla":"dat majar brash","bLetters":"ডট্ মজর্ ব্রশ্","index":95,"img":{"05":"https://farm4.staticflickr.com/3417/3304226162_d0677fffec.jpg","04":"https://farm6.staticflickr.com/5240/5825691814_1206c6f70f.jpg","03":"https://farm9.staticflickr.com/8186/8079348579_af1c3f1bcf.jpg","02":"https://farm8.staticflickr.com/7268/13855437513_6f7baa0a81.jpg","01":"https://farm1.staticflickr.com/540/19831942842_1bb0ec3852.jpg"}},"toothpaste":{"english":"toothpaste","type":"feminine","bangla":"dater majon","bLetters":"ডটএর্ মজওন্","index":97,"img":{"05":"https://farm1.staticflickr.com/40/122768960_f1d01fe929.jpg","04":"https://farm3.staticflickr.com/2317/2132274228_347e660df1.jpg","03":"https://farm6.staticflickr.com/5020/5522054400_550a0f0bfc.jpg","02":"https://farm9.staticflickr.com/8564/16796721325_e958147a02.jpg","01":"https://farm4.staticflickr.com/3317/3305804969_2e291a0197.jpg"}},"towel":{"english":"towel","type":"feminine","bangla":"toale","bLetters":"টওঅলএ","index":99,"img":{"05":"https://farm2.staticflickr.com/1314/836430566_af1329eaf6.jpg","04":"https://farm3.staticflickr.com/2910/14651347006_04f79967da.jpg","03":"https://farm4.staticflickr.com/3918/14679319604_edcfe6d511.jpg","02":"https://farm6.staticflickr.com/5508/14686833703_e4690716ee.jpg","01":"https://farm3.staticflickr.com/2328/2354415857_5243f07334.jpg"}},"umbrella":{"english":"umbrella","type":"feminine","bangla":"sata","bLetters":"সট","index":101,"img":{"05":"https://farm4.staticflickr.com/3600/3488316964_278f695413.jpg","04":"https://farm4.staticflickr.com/3935/15559228745_2b90095d95.jpg","03":"https://farm9.staticflickr.com/8286/7690535000_777fcbf2fa.jpg","02":"https://farm2.staticflickr.com/1251/1176750453_945d7188c1.jpg","01":"https://farm4.staticflickr.com/3322/3261978765_6b37cd204c.jpg"}},"underwear":{"english":"underwear","type":"feminine","bangla":"soto kapor pant ar niche porar jonno","bLetters":"সওটও কপওর্ পন্ট্ অর্ নিচএ পওরর্ জওন্নও","index":103,"img":{"05":"https://farm7.staticflickr.com/6181/6033706458_a7cc8dcbbe.jpg","04":"https://farm4.staticflickr.com/3474/3835506082_15acc2a444.jpg","03":"https://farm6.staticflickr.com/5174/5408944114_be21b86ac8.jpg","02":"https://farm8.staticflickr.com/7201/6986641475_b7b89891cb.jpg","01":"https://farm3.staticflickr.com/2206/2246833637_797b34bf78.jpg"}},"wall":{"english":"wall","type":"feminine","bangla":"dowal","bLetters":"ডওwঅল্","index":105,"img":{"05":"https://farm4.staticflickr.com/3944/15701707985_6d81a5f3f4.jpg","04":"https://farm9.staticflickr.com/8086/8411249290_4c4895415f.jpg","03":"https://farm9.staticflickr.com/8114/8690866147_6b372e4601.jpg","02":"https://farm8.staticflickr.com/7586/16557594760_1ffcfbc928.jpg","01":"https://farm8.staticflickr.com/7362/12281241166_afe1638a9c.jpg"}},"wallet":{"english":"wallet","type":"feminine","bangla":"juli, tholi","bLetters":"জুলি, তওলি","index":107,"img":{"05":"https://farm4.staticflickr.com/3256/3255649282_9b030b9366.jpg","04":"https://farm4.staticflickr.com/3790/12135022734_0fa7c67e0e.jpg","03":"https://farm4.staticflickr.com/3620/3398775276_7fca3d5a26.jpg","02":"https://farm7.staticflickr.com/6128/5955439984_e9a7b38046.jpg","01":"https://farm3.staticflickr.com/2160/2282289851_848acfd9af.jpg"}},"window":{"english":"window","type":"feminine","bangla":"janala","bLetters":"জনল","index":109,"img":{"05":"https://farm8.staticflickr.com/7067/6895500747_9e04cbc02b.jpg","04":"https://farm8.staticflickr.com/7577/16276878095_9b97faa186.jpg","03":"https://farm6.staticflickr.com/5570/14326938242_d5ed415bc9.jpg","02":"https://farm1.staticflickr.com/7/7642604_aebc1775aa.jpg","01":"https://farm4.staticflickr.com/3143/2640388516_115498b41b.jpg"}},"telephone":{"english":"telephone","type":"feminine","bangla":"kotha bolar phone/ jontro","bLetters":"কওত বওলর্ ফওনএ/ জওন্ট্রও","index":111,"img":{"05":"https://farm9.staticflickr.com/8867/18308029288_9a4bf9abe3.jpg","04":"https://farm3.staticflickr.com/2933/14245391014_fd1599ab60.jpg","03":"https://farm9.staticflickr.com/8608/15931198256_a33e717594.jpg","02":"https://farm5.staticflickr.com/4132/5171735748_d3fc685fff.jpg","01":"https://farm9.staticflickr.com/8324/8112116763_c53de6689b.jpg"}}},"pronouns":{"I speak":{"english":"I speak","type":"pronouns","bangla":"ami boli","bLetters":"অমি বওলি","index":1,"img":{"05":"https://farm7.staticflickr.com/6235/6276823759_2bd099f472.jpg","04":"https://farm1.staticflickr.com/48/113537213_8dc60dae65.jpg","03":"https://farm9.staticflickr.com/8234/8527867053_687af98f5a.jpg","02":"https://farm1.staticflickr.com/14/15343806_c439cfad8e.jpg","01":"https://farm4.staticflickr.com/3259/3144463586_87d7b92260.jpg"}},"you speak":{"english":"you speak","type":"pronouns","bangla":"tumi bolo","bLetters":"টুমি বওলও","index":3,"img":{"05":"https://farm9.staticflickr.com/8878/17831271224_91cdbc1af5.jpg","04":"https://farm9.staticflickr.com/8829/17833228093_4064b40aa4.jpg","03":"https://farm9.staticflickr.com/8869/18449641782_785bb2e815.jpg","02":"https://farm1.staticflickr.com/395/18427496516_09a6f25654.jpg","01":"https://farm3.staticflickr.com/2921/14477583363_5df9f111db.jpg"}},"he speaks":{"english":"he speaks","type":"pronouns","bangla":"se bole","bLetters":"সএ বওলএ","index":5,"img":{"05":"https://farm3.staticflickr.com/2428/3692288468_5184a30b47.jpg","04":"https://farm1.staticflickr.com/84/264138587_18c414584c.jpg","03":"https://farm4.staticflickr.com/3545/3392280781_0129bb8bd8.jpg","02":"https://farm5.staticflickr.com/4029/4427513149_a3f4e74fc1.jpg","01":"https://farm4.staticflickr.com/3492/3936754819_b0737a4a7b.jpg"}},"she speaks":{"english":"she speaks","type":"pronouns","bangla":"se bole","bLetters":"সএ বওলএ","index":7,"img":{"05":"https://farm6.staticflickr.com/5263/5874885888_f93beffb42.jpg","04":"https://farm4.staticflickr.com/3717/10137343625_80bcf4a836.jpg","03":"https://farm3.staticflickr.com/2219/2093112091_e777aac678.jpg","02":"https://farm4.staticflickr.com/3941/15316665189_c9e717dace.jpg","01":"https://farm4.staticflickr.com/3947/15593700605_21733a4d7e.jpg"}},"we speak":{"english":"we speak","type":"pronouns","bangla":"amora boli","bLetters":"অমওর বওলি","index":9,"img":{"05":"https://farm4.staticflickr.com/3870/15033998897_9f83460813.jpg","04":"https://farm3.staticflickr.com/2898/14259298847_f39a4121b6.jpg","03":"https://farm3.staticflickr.com/2563/3671475126_9fc91cdbbf.jpg","02":"https://farm4.staticflickr.com/3402/3240482185_0d046ffbae.jpg","01":"https://farm8.staticflickr.com/7164/13976320551_94ce8d9cbc.jpg"}},"they speak":{"english":"they speak","type":"pronouns","bangla":"tara bole","bLetters":"টর বওলএ","index":11,"img":{"05":"https://farm3.staticflickr.com/2717/4245397718_3562085aa7.jpg","04":"https://farm4.staticflickr.com/3203/3131010579_117d54fcee.jpg","03":"https://farm2.staticflickr.com/1129/5106014380_acd27408e1.jpg","02":"https://farm1.staticflickr.com/40/102716350_62cc840bc6.jpg","01":"https://farm1.staticflickr.com/144/330701382_2a1c617105.jpg"}},"give me":{"english":"give me","type":"pronouns","bangla":"amake dao","bLetters":"অমকএ ডও","index":15,"img":{"05":"https://farm9.staticflickr.com/8443/7864626886_e6433fd27a.jpg","04":"https://farm8.staticflickr.com/7516/16037331000_d91b64ae3b.jpg","03":"https://farm4.staticflickr.com/3792/9010536701_6de63fe81d.jpg","02":"https://farm9.staticflickr.com/8236/8535603958_672e7e82bb.jpg","01":"https://farm4.staticflickr.com/3325/3504986831_2708644635.jpg"}},"give you":{"english":"give you","type":"pronouns","bangla":"tumi dao","bLetters":"টুমি ডও","index":17,"img":{"05":"https://farm5.staticflickr.com/4137/4762791896_c20cdfcc1b.jpg","04":"https://farm6.staticflickr.com/5495/12527781954_76e00c509d.jpg","03":"https://farm9.staticflickr.com/8674/16438928427_9752477160.jpg","02":"https://farm6.staticflickr.com/5020/5496552342_0ae3533579.jpg","01":"https://farm4.staticflickr.com/3069/3039976898_281825b140.jpg"}},"give him":{"english":"give him","type":"pronouns","bangla":"take dao","bLetters":"টকএ ডও","index":19,"img":{"05":"https://farm3.staticflickr.com/2234/2074186321_e2977b3a83.jpg","04":"https://farm9.staticflickr.com/8242/8521179314_687264ffa9.jpg","03":"https://farm6.staticflickr.com/5170/5334296856_bb2ea2ed65.jpg","02":"https://farm8.staticflickr.com/7438/16375799860_ace968d07f.jpg","01":"https://farm3.staticflickr.com/2814/13872172923_3363c7f6f1.jpg"}},"give her":{"english":"give her","type":"pronouns","bangla":"tar deoa","bLetters":"টর্ ডএওঅ","index":21,"img":{"05":"https://farm9.staticflickr.com/8467/8096860491_baf94144ea.jpg","04":"https://farm8.staticflickr.com/7033/6754010587_5858b9af93.jpg","03":"https://farm9.staticflickr.com/8582/16543692588_3d2803e859.jpg","02":"https://farm9.staticflickr.com/8397/8631024136_007e41bed8.jpg","01":"https://farm1.staticflickr.com/44/177067083_63dbd85145.jpg"}},"give us":{"english":"give us","type":"pronouns","bangla":"amader dao","bLetters":"অমডএর্ ডও","index":23,"img":{"05":"https://farm1.staticflickr.com/40/83782892_fe9e00b2ae.jpg","04":"https://farm8.staticflickr.com/7610/16900576496_b829c555ce.jpg","03":"https://farm6.staticflickr.com/5220/5534510743_ac08e23172.jpg","02":"https://farm9.staticflickr.com/8159/7406941382_8dd6cabec2.jpg","01":"https://farm6.staticflickr.com/5537/12724343923_44bbcb5a8b.jpg"}},"give them":{"english":"give them","type":"pronouns","bangla":"segulo dao","bLetters":"সএগুলও ডও","index":25,"img":{"05":"https://farm4.staticflickr.com/3536/3754816504_21c77e4baa.jpg","04":"https://farm6.staticflickr.com/5314/14044895417_006f7f8c18.jpg","03":"https://farm4.staticflickr.com/3943/15749171071_cd946e381d.jpg","02":"https://farm4.staticflickr.com/3072/2719751373_8190144701.jpg","01":"https://farm6.staticflickr.com/5025/5644374556_eab2caf4f4.jpg"}},"my book":{"english":"my book","type":"pronouns","bangla":"amar boi","bLetters":"অমর্ বওই","index":29,"img":{"05":"https://farm8.staticflickr.com/7192/7012090071_4e6d04dcb1.jpg","04":"https://farm8.staticflickr.com/7059/6946414955_cd74755129.jpg","03":"https://farm5.staticflickr.com/4037/4252987860_17ed6e0943.jpg","02":"https://farm4.staticflickr.com/3487/3932116856_7ef0c8d1cb.jpg","01":"https://farm3.staticflickr.com/2466/3963908042_5918356999.jpg"}},"your book":{"english":"your book","type":"pronouns","bangla":"tomar boi","bLetters":"টওমর্ বওই","index":31,"img":{"05":"https://farm4.staticflickr.com/3440/13057875465_66dec69901.jpg","04":"https://farm9.staticflickr.com/8383/8583721758_3f9c8d9325.jpg","03":"https://farm6.staticflickr.com/5119/14244956665_d2b0a7f6a3.jpg","02":"https://farm8.staticflickr.com/7017/6747984061_4510bb64de.jpg","01":"https://farm5.staticflickr.com/4058/4646244984_23466e73f4.jpg"}},"his book":{"english":"his book","type":"pronouns","bangla":"tar boi","bLetters":"টর্ বওই","index":33,"img":{"05":"https://farm1.staticflickr.com/742/21974355158_48e905b22b.jpg","04":"https://farm9.staticflickr.com/8099/8490682774_900c83dee8.jpg","03":"https://farm4.staticflickr.com/3421/3235234898_75b28e46de.jpg","02":"https://farm8.staticflickr.com/7063/6916278323_cbeaa5f0ab.jpg","01":"https://farm4.staticflickr.com/3578/3525645713_e70966bf5e.jpg"}},"her book":{"english":"her book","type":"pronouns","bangla":"tar boi","bLetters":"টর্ বওই","index":35,"img":{"05":"https://farm5.staticflickr.com/4078/4829260793_b26b73137e.jpg","04":"https://farm3.staticflickr.com/2519/5765879162_793508b14c.jpg","03":"https://farm6.staticflickr.com/5106/5632193708_01d1b44eb4.jpg","02":"https://farm5.staticflickr.com/4068/4527041736_ef6717533f.jpg","01":"https://farm4.staticflickr.com/3162/3074105514_36f6cf4765.jpg"}},"our book":{"english":"our book","type":"pronouns","bangla":"amader boi","bLetters":"অমডএর্ বওই","index":37,"img":{"05":"https://farm2.staticflickr.com/1505/23543440553_c68bd5f5cd.jpg","04":"https://farm8.staticflickr.com/7321/13663153853_abcd986ee1.jpg","03":"https://farm4.staticflickr.com/3835/14961813370_c7e296a3e0.jpg","02":"https://farm9.staticflickr.com/8075/8293346464_4d72f6243d.jpg","01":"https://farm9.staticflickr.com/8431/7506881692_661c570995.jpg"}},"their book":{"english":"their book","type":"pronouns","bangla":"tahader boi","bLetters":"টহডএর্ বওই","index":39,"img":{"05":"https://farm8.staticflickr.com/7211/7275532510_2310584759.jpg","04":"https://farm1.staticflickr.com/49/143112830_be75a83b5d.jpg","03":"https://farm5.staticflickr.com/4104/5088254388_3a32e61ab8.jpg","02":"https://farm9.staticflickr.com/8247/8468252386_46db74e449.jpg","01":"https://farm5.staticflickr.com/4021/5155144858_df5a77c19c.jpg"}}},"articles":{"Food":{"english":"Food","type":"articles","bangla":"khabar","bLetters":"খবর্","index":1,"img":{"05":"https://farm9.staticflickr.com/8383/8467080293_fe90204219.jpg","04":"https://farm8.staticflickr.com/7060/6979191963_e6349c66e3.jpg","03":"https://farm4.staticflickr.com/3781/13507456993_624b1b4d3c.jpg","02":"https://farm3.staticflickr.com/2557/3891554755_2d0c6a1384.jpg","01":"https://farm8.staticflickr.com/7312/13441105255_41d04195f3.jpg"}},"almonds":{"english":"almonds","type":"articles","bangla":"amond","bLetters":"অমওন্ড্","index":3,"img":{"05":"https://farm8.staticflickr.com/7429/8723421436_f43b8f786a.jpg","04":"https://farm8.staticflickr.com/7625/16119846784_247038ab1c.jpg","03":"https://farm5.staticflickr.com/4001/4688589598_2aa7a2be1d.jpg","02":"https://farm8.staticflickr.com/7619/16534872587_a14390c345.jpg","01":"https://farm6.staticflickr.com/5110/5574234194_2b2b34b395.jpg"}},"bread":{"english":"bread","type":"articles","bangla":"ruti","bLetters":"রুটি","index":5,"img":{"05":"https://farm6.staticflickr.com/5288/5359635179_02ce9e8932.jpg","04":"https://farm7.staticflickr.com/6092/6297280401_b2b4ac30ea.jpg","03":"https://farm4.staticflickr.com/3388/3626265280_5dfc7a57ab.jpg","02":"https://farm8.staticflickr.com/7397/12577312844_87608d7488.jpg","01":"https://farm8.staticflickr.com/7162/6621236103_0c487a7bdf.jpg"}},"breakfast":{"english":"breakfast","type":"articles","bangla":"sokaler nasta","bLetters":"সওকলএর্ নস্ট","index":7,"img":{"05":"https://farm9.staticflickr.com/8301/7852026050_3fd72271f8.jpg","04":"https://farm9.staticflickr.com/8361/8269591139_1d0288dab7.jpg","03":"https://farm1.staticflickr.com/730/20341226454_f3493f91c4.jpg","02":"https://farm9.staticflickr.com/8329/8380004305_3b6a158c3a.jpg","01":"https://farm4.staticflickr.com/3678/12101654636_88f5efc467.jpg"}},"butter":{"english":"butter","type":"articles","bangla":"pan","bLetters":"পন্","index":9,"img":{"05":"https://farm7.staticflickr.com/6131/5953472596_cfc4d54e6e.jpg","04":"https://farm9.staticflickr.com/8018/6969230102_eda167b7a8.jpg","03":"https://farm8.staticflickr.com/7156/6772679849_8f6c2cc830.jpg","02":"https://farm8.staticflickr.com/7569/15589758250_af36f59216.jpg","01":"https://farm1.staticflickr.com/131/383404300_0a6f829d87.jpg"}},"candy":{"english":"candy","type":"articles","bangla":"logence, choklet, chuse kaoar jonno ak jatio misti mukhorochok khabar","bLetters":"লওগএন্cএ, চওক্লএট্, চুসএ কওঅর্ জওন্নও অক্ জটিও মিস্টি মুখওরওচওক্ খবর্","index":11,"img":{"05":"https://farm9.staticflickr.com/8440/7949252386_99d088a671.jpg","04":"https://farm8.staticflickr.com/7369/15951554764_effb3b86d3.jpg","03":"https://farm3.staticflickr.com/2946/15316707450_aa9bbc9459.jpg","02":"https://farm9.staticflickr.com/8647/15898119263_3e6ff25aa0.jpg","01":"https://farm2.staticflickr.com/1297/544434077_4f3a92872b.jpg"}},"cheese":{"english":"cheese","type":"articles","bangla":"ponir","bLetters":"পওনির্","index":13,"img":{"05":"https://farm8.staticflickr.com/7537/15912612571_30a71d8196.jpg","04":"https://farm3.staticflickr.com/2096/2039233835_5fe5253bdc.jpg","03":"https://farm5.staticflickr.com/4140/4926366907_bc7c7da571.jpg","02":"https://farm1.staticflickr.com/2/1521988_d367cb661e.jpg","01":"https://farm1.staticflickr.com/172/371261454_840b45641e.jpg"}},"chicken":{"english":"chicken","type":"articles","bangla":"murgir bassa","bLetters":"মুর্গির্ বস্স","index":15,"img":{"05":"https://farm8.staticflickr.com/7162/13951808374_84acc7195d.jpg","04":"https://farm6.staticflickr.com/5117/7429825298_62cac6a95d.jpg","03":"https://farm8.staticflickr.com/7263/7429834398_6dcfc5e086.jpg","02":"https://farm4.staticflickr.com/3258/2720948490_b518c62cc9.jpg","01":"https://farm3.staticflickr.com/2064/2149660950_8c21ccda8b.jpg"}},"cumin":{"english":"cumin","type":"articles","bangla":"jeera","bLetters":"জীর","index":17,"img":{"05":"https://farm6.staticflickr.com/5773/22034637290_ecd5fc81f3.jpg","04":"https://farm1.staticflickr.com/144/405979933_f233d7d790.jpg","03":"https://farm4.staticflickr.com/3920/15261054405_5d163fcb6c.jpg","02":"https://farm9.staticflickr.com/8478/8171256437_84e4318a80.jpg","01":"https://farm3.staticflickr.com/2181/2448627623_edf98afd62.jpg"}},"dessert":{"english":"dessert","type":"articles","bangla":"ice cream","bLetters":"ইcএ cরএঅম্","index":19,"img":{"05":"https://farm6.staticflickr.com/5692/21910447746_ba4077faa4.jpg","04":"https://farm8.staticflickr.com/7405/9714976262_115c73230e.jpg","03":"https://farm8.staticflickr.com/7196/6908762959_f1167843ca.jpg","02":"https://farm8.staticflickr.com/7471/15630242660_908bb06839.jpg","01":"https://farm8.staticflickr.com/7515/16278703472_178ee74750.jpg"}},"dinner":{"english":"dinner","type":"articles","bangla":"rater khabar","bLetters":"রটএর্ খবর্","index":21,"img":{"05":"https://farm8.staticflickr.com/7441/13027202984_16b154d757.jpg","04":"https://farm1.staticflickr.com/642/20111740414_8bb2585e9d.jpg","03":"https://farm4.staticflickr.com/3301/3484497071_faa6f0853f.jpg","02":"https://farm3.staticflickr.com/2707/5850251004_758d35f468.jpg","01":"https://farm3.staticflickr.com/2881/13429805403_2891fbf98d.jpg"}},"fish":{"english":"fish","type":"articles","bangla":"mass","bLetters":"মস্স্","index":23,"img":{"05":"https://farm9.staticflickr.com/8102/8541453944_718baec79a.jpg","04":"https://farm2.staticflickr.com/1084/892454941_56fd34ac3c.jpg","03":"https://farm9.staticflickr.com/8183/8094974730_2057553647.jpg","02":"https://farm4.staticflickr.com/3763/9726286028_f3e34cdb56.jpg","01":"https://farm9.staticflickr.com/8686/16574291008_643bc9c02b.jpg"}},"fruit":{"english":"fruit","type":"articles","bangla":"fol","bLetters":"fওল্","index":25,"img":{"05":"https://farm4.staticflickr.com/3695/12165979954_40dbfa7554.jpg","04":"https://farm8.staticflickr.com/7514/16018186727_ed0a7a5a71.jpg","03":"https://farm4.staticflickr.com/3188/2946491125_8dcd767823.jpg","02":"https://farm4.staticflickr.com/3937/15554877935_0fa0d59f23.jpg","01":"https://farm4.staticflickr.com/3409/3567348254_40459bee0e.jpg"}},"ice cream":{"english":"ice cream","type":"articles","bangla":"malai borof","bLetters":"মলঐ বওরওf","index":27,"img":{"05":"https://farm8.staticflickr.com/7199/6977754833_24c701a055.jpg","04":"https://farm4.staticflickr.com/3542/3680382105_5abaa830f4.jpg","03":"https://farm4.staticflickr.com/3013/2679254250_c8c6d18109.jpg","02":"https://farm8.staticflickr.com/7046/6958695611_8d818350f8.jpg","01":"https://farm9.staticflickr.com/8160/7211934760_e68d698fe6.jpg"}},"lamb":{"english":"lamb","type":"articles","bangla":"vera, ak jatio posu","bLetters":"বএর, অক্ জটিও পওসু","index":29,"img":{"05":"https://farm2.staticflickr.com/1369/1093142541_8e96e244ca.jpg","04":"https://farm8.staticflickr.com/7422/13672009483_e024a017fa.jpg","03":"https://farm9.staticflickr.com/8249/8507553485_1a078ed230.jpg","02":"https://farm3.staticflickr.com/2842/13453279244_d0894fd4c0.jpg","01":"https://farm9.staticflickr.com/8066/8207587269_a9db9386cc.jpg"}},"lemon":{"english":"lemon","type":"articles","bangla":"lebu","bLetters":"লএবু","index":31,"img":{"05":"https://farm6.staticflickr.com/5556/15009804481_3e861b637d.jpg","04":"https://farm9.staticflickr.com/8683/16574721925_33ef4cc362.jpg","03":"https://farm8.staticflickr.com/7302/13227260004_949a34b49f.jpg","02":"https://farm6.staticflickr.com/5166/5237985533_e9dabcbc40.jpg","01":"https://farm2.staticflickr.com/1068/831455789_f62ff4a0d8.jpg"}},"lunch":{"english":"lunch","type":"articles","bangla":"dupurer khabar","bLetters":"ডুপুরএর্ খবর্","index":33,"img":{"05":"https://farm4.staticflickr.com/3032/2676312807_29120ba47f.jpg","04":"https://farm1.staticflickr.com/127/386199695_fbc8747ea1.jpg","03":"https://farm6.staticflickr.com/5626/21340561972_edc01fe663.jpg","02":"https://farm9.staticflickr.com/8188/8151010750_ab0c4985ea.jpg","01":"https://farm8.staticflickr.com/7570/15723498843_8cd69b3fed.jpg"}},"meal":{"english":"meal","type":"articles","bangla":"khabar","bLetters":"খবর্","index":35,"img":{"05":"https://farm7.staticflickr.com/6222/6242498067_00e152003b.jpg","04":"https://farm6.staticflickr.com/5483/14442073468_9c1dfae9d9.jpg","03":"https://farm4.staticflickr.com/3186/2887680117_7de1383b12.jpg","02":"https://farm4.staticflickr.com/3897/15047817662_e0e6039d94.jpg","01":"https://farm3.staticflickr.com/2908/14195281741_a087529942.jpg"}},"meat":{"english":"meat","type":"articles","bangla":"mangso","bLetters":"মন্গ্সও","index":37,"img":{"05":"https://farm4.staticflickr.com/3228/2505225187_330c950e92.jpg","04":"https://farm3.staticflickr.com/2316/2202561224_323c739caa.jpg","03":"https://farm6.staticflickr.com/5314/14394842514_fea6f11c00.jpg","02":"https://farm3.staticflickr.com/2284/2179078834_867b1c3c1e.jpg","01":"https://farm3.staticflickr.com/2147/2447768052_8b765676d8.jpg"}},"oven":{"english":"oven","type":"articles","bangla":"chula","bLetters":"চুল","index":39,"img":{"05":"https://farm3.staticflickr.com/2748/4247658663_a80d427a20.jpg","04":"https://farm4.staticflickr.com/3241/2753076704_0158c0918f.jpg","03":"https://farm6.staticflickr.com/5216/5534215068_5e8ef2e1b8.jpg","02":"https://farm4.staticflickr.com/3550/3300650223_f98a4351ea.jpg","01":"https://farm4.staticflickr.com/3258/3160886636_1d61bd2b17.jpg"}},"pepper":{"english":"pepper","type":"articles","bangla":"toiri kora","bLetters":"টওইরি কওর","index":41,"img":{"05":"https://farm4.staticflickr.com/3891/14800797873_be43010dd6.jpg","04":"https://farm9.staticflickr.com/8739/16687177659_06992fec42.jpg","03":"https://farm3.staticflickr.com/2385/1954813849_17d5b3b3d0.jpg","02":"https://farm4.staticflickr.com/3053/2892441164_f0540480fd.jpg","01":"https://farm8.staticflickr.com/7295/11477650826_6bc15cc872.jpg"}},"plants":{"english":"plants","type":"articles","bangla":"pori kolpona kora","bLetters":"পওরি কওল্পওন কওর","index":43,"img":{"05":"https://farm3.staticflickr.com/2238/1760138220_5336c4c3db.jpg","04":"https://farm9.staticflickr.com/8171/8039504473_a7ec9c90fb.jpg","03":"https://farm8.staticflickr.com/7576/15976191358_a405ebe0c7.jpg","02":"https://farm8.staticflickr.com/7543/15716166756_ac5f904a19.jpg","01":"https://farm7.staticflickr.com/6153/6174174925_9b6622c43c.jpg"}},"pork":{"english":"pork","type":"articles","bangla":"sukorer mangso","bLetters":"সুকওরএর্ মন্গ্সও","index":45,"img":{"05":"https://farm9.staticflickr.com/8071/8392390521_89b19080c7.jpg","04":"https://farm8.staticflickr.com/7631/16778586505_837784387d.jpg","03":"https://farm7.staticflickr.com/6235/6876799754_0d73cfa81a.jpg","02":"https://farm8.staticflickr.com/7724/16669501293_fca5787817.jpg","01":"https://farm6.staticflickr.com/5093/5470923943_dcb9ccc5a1.jpg"}},"salad":{"english":"salad","type":"articles","bangla":"sobjir misron","bLetters":"সওব্জির্ মিস্রওন্","index":47,"img":{"05":"https://farm5.staticflickr.com/4046/4687246381_ab5027178f.jpg","04":"https://farm5.staticflickr.com/4116/4902040546_fc928e3fd1.jpg","03":"https://farm6.staticflickr.com/5087/5358599242_7251dc7de4.jpg","02":"https://farm4.staticflickr.com/3533/3179124771_9edf3c4963.jpg","01":"https://farm5.staticflickr.com/4140/4794588293_3471a38f63.jpg"}},"salt":{"english":"salt","type":"articles","bangla":"lobon","bLetters":"লওবওন্","index":49,"img":{"05":"https://farm4.staticflickr.com/3109/2850748902_74a166fe69.jpg","04":"https://farm1.staticflickr.com/186/478297714_33e2c8157a.jpg","03":"https://farm5.staticflickr.com/4098/4812611934_448af23196.jpg","02":"https://farm1.staticflickr.com/276/18679191831_f5cc87d504.jpg","01":"https://farm3.staticflickr.com/2703/4246252627_5ab583c27a.jpg"}},"sandwich":{"english":"sandwich","type":"articles","bangla":"fast food jatio khabar, ruti jatio khabar","bLetters":"fঅস্ট্ fঊড্ জটিও খবর্, রুটি জটিও খবর্","index":51,"img":{"05":"https://farm4.staticflickr.com/3270/2312382751_7fa943dbef.jpg","04":"https://farm8.staticflickr.com/7008/6798997671_6d751bfbb8.jpg","03":"https://farm5.staticflickr.com/4083/5123596413_b9fbd05f4e.jpg","02":"https://farm4.staticflickr.com/3907/15188986635_a3aecde2e2.jpg","01":"https://farm3.staticflickr.com/2248/2451527936_2cb87da32d.jpg"}},"sausage":{"english":"sausage","type":"articles","bangla":"tometo vona/ vorta","bLetters":"টওমএটও বওন/ বওর্ট","index":53,"img":{"05":"https://farm9.staticflickr.com/8390/8487661895_c1bf2b616e.jpg","04":"https://farm9.staticflickr.com/8229/8487661997_69985f11f1.jpg","03":"https://farm9.staticflickr.com/8230/8487661927_c5884924f3.jpg","02":"https://farm9.staticflickr.com/8509/8488754674_d2396ac5fb.jpg","01":"https://farm9.staticflickr.com/8389/8487661815_f167835247.jpg"}},"soup":{"english":"soup","type":"articles","bangla":"torol kabar","bLetters":"টওরওল্ কবর্","index":55,"img":{"05":"https://farm4.staticflickr.com/3081/2891056617_6125055b78.jpg","04":"https://farm4.staticflickr.com/3242/3129934357_7469b1188b.jpg","03":"https://farm4.staticflickr.com/3264/3224970565_ba8d0e0d9d.jpg","02":"https://farm3.staticflickr.com/2240/2059450564_3f4dba78df.jpg","01":"https://farm4.staticflickr.com/3506/3923603343_6338edec91.jpg"}},"sugar":{"english":"sugar","type":"articles","bangla":"chini","bLetters":"চিনি","index":57,"img":{"05":"https://farm3.staticflickr.com/2207/1546082810_6ff4a91518.jpg","04":"https://farm3.staticflickr.com/2810/9099073061_0130fe0c4b.jpg","03":"https://farm8.staticflickr.com/7308/16329999826_80b1c61b45.jpg","02":"https://farm6.staticflickr.com/5203/5227054131_e646c9d258.jpg","01":"https://farm4.staticflickr.com/3291/2984461059_4d41e8bd7f.jpg"}},"supper":{"english":"supper","type":"articles","bangla":"rater khabar","bLetters":"রটএর্ খবর্","index":59,"img":{"05":"https://farm2.staticflickr.com/1086/956951148_a722bbe25c.jpg","04":"https://farm9.staticflickr.com/8092/8588325413_fd890de0c6.jpg","03":"https://farm6.staticflickr.com/5260/5457274555_621950e024.jpg","02":"https://farm1.staticflickr.com/203/550460474_f6406fdd1f.jpg","01":"https://farm4.staticflickr.com/3008/2567557278_286c85cc34.jpg"}},"turkey":{"english":"turkey","type":"articles","bangla":"turki vasa","bLetters":"টুর্কি বস","index":61,"img":{"05":"https://farm6.staticflickr.com/5607/15588003195_6c16781e6f.jpg","04":"https://farm7.staticflickr.com/6141/5979253232_1d746f4d7d.jpg","03":"https://farm4.staticflickr.com/3054/2392628838_0aba8580ff.jpg","02":"https://farm4.staticflickr.com/3946/15588890492_546571df1d.jpg","01":"https://farm3.staticflickr.com/2581/3758688702_01141a1a07.jpg"}},"apple":{"english":"apple","type":"articles","bangla":"apple, ak jation fol","bLetters":"অপ্প্লএ, অক্ জটিওন্ fওল্","index":63,"img":{"05":"https://farm9.staticflickr.com/8589/16104491773_9cc84cfefc.jpg","04":"https://farm2.staticflickr.com/1012/4731447079_7ce71e2353.jpg","03":"https://farm6.staticflickr.com/5210/5381301033_a8ef922a61.jpg","02":"https://farm4.staticflickr.com/3037/3033956681_a8d1d5f6d1.jpg","01":"https://farm8.staticflickr.com/7303/16431559325_cec6aa8a8a.jpg"}},"banana":{"english":"banana","type":"articles","bangla":"kola","bLetters":"কওল","index":65,"img":{"05":"https://farm2.staticflickr.com/1111/4733944968_a6f994e8b4.jpg","04":"https://farm2.staticflickr.com/1406/1168480410_813c8d1428.jpg","03":"https://farm9.staticflickr.com/8532/8561163490_6dc17ff37a.jpg","02":"https://farm8.staticflickr.com/7688/17138159716_120786cb64.jpg","01":"https://farm9.staticflickr.com/8673/16014574470_03bd46af01.jpg"}},"oranges":{"english":"oranges","type":"articles","bangla":"comla lebu","bLetters":"cওম্ল লএবু","index":67,"img":{"05":"https://farm8.staticflickr.com/7289/16578433411_ef413f1632.jpg","04":"https://farm3.staticflickr.com/2654/4111054661_c294681b54.jpg","03":"https://farm6.staticflickr.com/5285/5256018586_3c33a85064.jpg","02":"https://farm6.staticflickr.com/5585/14429015795_a242373123.jpg","01":"https://farm8.staticflickr.com/7209/6952101543_22ca32bcc3.jpg"}},"peaches":{"english":"peaches","type":"articles","bangla":"peach fol","bLetters":"পএঅচ্ fওল্","index":69,"img":{"05":"https://farm7.staticflickr.com/6197/6040288634_6cac7ebc04.jpg","04":"https://farm7.staticflickr.com/6002/5947149819_0b69e7c485.jpg","03":"https://farm4.staticflickr.com/3867/14690591067_92efd28966.jpg","02":"https://farm6.staticflickr.com/5210/5377795177_24f15b3630.jpg","01":"https://farm2.staticflickr.com/1301/1174433580_2780a27e4a.jpg"}},"peanut":{"english":"peanut","type":"articles","bangla":"china badam","bLetters":"চিন বডম্","index":71,"img":{"05":"https://farm5.staticflickr.com/4125/4988983743_c5c983d5c6.jpg","04":"https://farm5.staticflickr.com/4025/4254565625_d6b2f47a92.jpg","03":"https://farm4.staticflickr.com/3151/2657124651_9b131db526.jpg","02":"https://farm9.staticflickr.com/8263/8714083210_6dab664e5c.jpg","01":"https://farm4.staticflickr.com/3942/15641306312_8bdb8d0ab3.jpg"}},"pears":{"english":"pears","type":"articles","bangla":"naspoti, ak jatio fol dekte apeler moto","bLetters":"নস্পওটি, অক্ জটিও fওল্ ডএক্টএ অপএলএর্ মওটও","index":73,"img":{"05":"https://farm7.staticflickr.com/6179/6264275270_931c793caa.jpg","04":"https://farm3.staticflickr.com/2524/3895770896_dde13a52c4.jpg","03":"https://farm6.staticflickr.com/5520/14351337545_5bfde28df6.jpg","02":"https://farm6.staticflickr.com/5597/15543808621_03718c8fc9.jpg","01":"https://farm8.staticflickr.com/7372/12586564234_fe42ea4183.jpg"}},"pineapple":{"english":"pineapple","type":"articles","bangla":"anaros","bLetters":"অনরওস্","index":75,"img":{"05":"https://farm1.staticflickr.com/173/413682055_272b9d58a2.jpg","04":"https://farm7.staticflickr.com/6044/6335239789_dec74e976f.jpg","03":"https://farm9.staticflickr.com/8245/8565363791_0153aecd59.jpg","02":"https://farm4.staticflickr.com/3403/3534901557_827f7fc5f2.jpg","01":"https://farm9.staticflickr.com/8743/16625120048_e81244417e.jpg"}},"grapes":{"english":"grapes","type":"articles","bangla":"angur fol","bLetters":"অন্গুর্ fওল্","index":77,"img":{"05":"https://farm4.staticflickr.com/3149/2816590278_f404507bba.jpg","04":"https://farm1.staticflickr.com/616/21413277358_6150b32ae6.jpg","03":"https://farm5.staticflickr.com/4063/4414048468_ebb9533c95.jpg","02":"https://farm8.staticflickr.com/7439/13738277035_b80e03f535.jpg","01":"https://farm4.staticflickr.com/3829/10376888204_053c96782f.jpg"}},"strawberries":{"english":"strawberries","type":"articles","bangla":"straw berry","bLetters":"স্ট্রw বএর্র্য্","index":79,"img":{"05":"https://farm4.staticflickr.com/3193/2625819083_9108aedefe.jpg","04":"https://farm9.staticflickr.com/8149/6984507532_2249b0f525.jpg","03":"https://farm9.staticflickr.com/8684/16147796033_ce83b4bae0.jpg","02":"https://farm7.staticflickr.com/6192/6140401103_b1da46396b.jpg","01":"https://farm8.staticflickr.com/7776/17146667867_a4218108f6.jpg"}},"vegetables":{"english":"vegetables","type":"articles","bangla":"saksobji","bLetters":"সক্সওব্জি","index":81,"img":{"05":"https://farm4.staticflickr.com/3525/3936776513_0415f1d822.jpg","04":"https://farm4.staticflickr.com/3569/3418355570_30a7b00346.jpg","03":"https://farm4.staticflickr.com/3684/13909566414_e91d79fd15.jpg","02":"https://farm2.staticflickr.com/1216/1390161932_2ddaa94aac.jpg","01":"https://farm4.staticflickr.com/3916/14708049101_110f070878.jpg"}},"carrot":{"english":"carrot","type":"articles","bangla":"totapakhi, tia pakhi","bLetters":"টওটপখি, টিঅ পখি","index":83,"img":{"05":"https://farm7.staticflickr.com/6238/6350461052_7a33600b90.jpg","04":"https://farm1.staticflickr.com/4/4785000_10dea08fc8.jpg","03":"https://farm9.staticflickr.com/8513/8462031172_d6cf40d6b5.jpg","02":"https://farm3.staticflickr.com/2539/4097540177_4aff190d4a.jpg","01":"https://farm6.staticflickr.com/5069/5585670350_c2a6ed8641.jpg"}},"corn":{"english":"corn","type":"articles","bangla":"sosso, payer kura","bLetters":"সওস্সও, পযএর্ কুর","index":85,"img":{"05":"https://farm4.staticflickr.com/3601/3572306382_5d8a339b7a.jpg","04":"https://farm7.staticflickr.com/6114/6294855408_75b433e63e.jpg","03":"https://farm9.staticflickr.com/8281/7564086796_feaae9f1bf.jpg","02":"https://farm8.staticflickr.com/7400/12523826155_9c18e55f32.jpg","01":"https://farm3.staticflickr.com/2644/3929675039_c06b6a9440.jpg"}},"cucumber":{"english":"cucumber","type":"articles","bangla":"sosa","bLetters":"সওস","index":87,"img":{"05":"https://farm9.staticflickr.com/8041/7991723438_f13941e56f.jpg","04":"https://farm6.staticflickr.com/5493/11650459036_c4966b7062.jpg","03":"https://farm4.staticflickr.com/3680/9215336069_94f1a9a7bd.jpg","02":"https://farm3.staticflickr.com/2624/3820717167_d5f6b8cc0b.jpg","01":"https://farm3.staticflickr.com/2187/2436864189_92c36ed0d4.jpg"}},"garlic":{"english":"garlic","type":"articles","bangla":"rasun  ","bLetters":"রসুন্  ","index":89,"img":{"05":"https://farm3.staticflickr.com/2889/10890394815_c1c7eb0d13.jpg","04":"https://farm6.staticflickr.com/5019/5489297375_e6ea5bebbe.jpg","03":"https://farm1.staticflickr.com/127/411981734_97d19bf10f.jpg","02":"https://farm7.staticflickr.com/6099/6345243719_e6dea277a3.jpg","01":"https://farm1.staticflickr.com/269/19344106070_b3387a0a97.jpg"}},"lettuce":{"english":"lettuce","type":"articles","bangla":"letus pata","bLetters":"লএটুস্ পট","index":91,"img":{"05":"https://farm6.staticflickr.com/5309/5626137125_24409be95b.jpg","04":"https://farm7.staticflickr.com/6175/6202249943_a15e3b375f.jpg","03":"https://farm5.staticflickr.com/4141/4852382644_a028961489.jpg","02":"https://farm6.staticflickr.com/5172/5478646915_b982d1ca2e.jpg","01":"https://farm6.staticflickr.com/5259/5497236232_39cbe167dd.jpg"}},"olives":{"english":"olives","type":"articles","bangla":"jolpai","bLetters":"জওল্পঐ","index":93,"img":{"05":"https://farm6.staticflickr.com/5738/21415746488_79673b6b72.jpg","04":"https://farm3.staticflickr.com/2615/3886338385_560d235401.jpg","03":"https://farm9.staticflickr.com/8055/8112469756_74309008ac.jpg","02":"https://farm6.staticflickr.com/5106/5793189064_0045ae1893.jpg","01":"https://farm3.staticflickr.com/2635/5793195720_9d4b85d974.jpg"}},"onions":{"english":"onions","type":"articles","bangla":"pewaj","bLetters":"পএwঅজ্","index":95,"img":{"05":"https://farm5.staticflickr.com/4098/4869134977_32b995c784.jpg","04":"https://farm9.staticflickr.com/8661/16093921324_df6564fc53.jpg","03":"https://farm9.staticflickr.com/8615/15834133239_2c0ffb777c.jpg","02":"https://farm6.staticflickr.com/5001/5348161205_e67c99bfdc.jpg","01":"https://farm4.staticflickr.com/3925/14818764282_921fe59ce3.jpg"}},"peppers":{"english":"peppers","type":"articles","bangla":"toiri kora","bLetters":"টওইরি কওর","index":97,"img":{"05":"https://farm4.staticflickr.com/3161/2683582935_dfbb685cca.jpg","04":"https://farm8.staticflickr.com/7411/9096023706_f6d0fc342c.jpg","03":"https://farm5.staticflickr.com/4067/4255385711_1a096f3011.jpg","02":"https://farm7.staticflickr.com/6103/6366384617_1faec06e84.jpg","01":"https://farm5.staticflickr.com/4013/4394834950_637f2d587a.jpg"}},"potatoes":{"english":"potatoes","type":"articles","bangla":"alu gulo","bLetters":"অলু গুলও","index":99,"img":{"05":"https://farm5.staticflickr.com/4041/4523747331_6d4db8436a.jpg","04":"https://farm7.staticflickr.com/6164/6258784571_f915eee044.jpg","03":"https://farm9.staticflickr.com/8264/8745996901_faf3b64111.jpg","02":"https://farm8.staticflickr.com/7308/8747118608_20115b742d.jpg","01":"https://farm8.staticflickr.com/7411/8718336756_e9b00245f2.jpg"}},"pumpkin":{"english":"pumpkin","type":"articles","bangla":"lau, kumra","bLetters":"লঔ, কুম্র","index":101,"img":{"05":"https://farm6.staticflickr.com/5579/15105483349_6e4dd96596.jpg","04":"https://farm6.staticflickr.com/5571/15102787879_8c4c62fbaf.jpg","03":"https://farm7.staticflickr.com/6102/6228065502_af90c15eb6.jpg","02":"https://farm7.staticflickr.com/6054/6288954398_216c202386.jpg","01":"https://farm6.staticflickr.com/5489/11884027793_2cb7406e5a.jpg"}},"beans":{"english":"beans","type":"articles","bangla":"bins","bLetters":"বিন্স্","index":103,"img":{"05":"https://farm6.staticflickr.com/5135/5535637416_247ae33f5c.jpg","04":"https://farm4.staticflickr.com/3351/3214780639_c0fec9b2e6.jpg","03":"https://farm9.staticflickr.com/8042/7973426002_77c30cd7d6.jpg","02":"https://farm6.staticflickr.com/5011/5535638066_e22a345211.jpg","01":"https://farm4.staticflickr.com/3921/15134304555_ec73f5bd82.jpg"}},"tomatoes":{"english":"tomatoes","type":"articles","bangla":"dometo gulo","bLetters":"ডওমএটও গুলও","index":105,"img":{"05":"https://farm4.staticflickr.com/3854/15015336498_3a27ba67d3.jpg","04":"https://farm9.staticflickr.com/8784/18362470876_57bcb39c49.jpg","03":"https://farm9.staticflickr.com/8442/7801846634_9511fb9d8d.jpg","02":"https://farm8.staticflickr.com/7499/15580325293_22726b03d1.jpg","01":"https://farm7.staticflickr.com/6017/5956509347_7dac83dd13.jpg"}}},"verbs":{"I can accept that":{"english":"I can accept that","type":"verbs","bangla":"ami grohon ata korte ","bLetters":"অমি গ্রওহওন্ অট কওর্টএ ","index":1,"img":{"05":"https://farm8.staticflickr.com/7063/6886825077_681d2de53c.jpg","04":"https://farm3.staticflickr.com/2898/14622594924_428a0c08db.jpg","03":"https://farm8.staticflickr.com/7772/17774794503_afa7c8dff9.jpg","02":"https://farm8.staticflickr.com/7087/7328329808_46c9039b84.jpg","01":"https://farm4.staticflickr.com/3924/14773909245_a8c29ce39a.jpg"}},"she added it":{"english":"she added it","type":"verbs","bangla":"se ar sathe jog diasilo","bLetters":"সএ অর্ সতএ জওগ্ ডিঅসিলও","index":3,"img":{"05":"https://farm7.staticflickr.com/6069/6038293434_ae9b9cb5e4.jpg","04":"https://farm9.staticflickr.com/8189/8085329105_288b216a16.jpg","03":"https://farm4.staticflickr.com/3715/10813920205_a4b2ce4859.jpg","02":"https://farm4.staticflickr.com/3352/3485328729_22727dbd3b.jpg","01":"https://farm4.staticflickr.com/3929/15418676782_a54eb84399.jpg"}},"we admit it":{"english":"we admit it","type":"verbs","bangla":"amora atate probesh korbo","bLetters":"অমওর অটটএ প্রওবএশ্ কওর্বও","index":5,"img":{"05":"https://farm4.staticflickr.com/3691/20240953459_b701db9161.jpg","04":"https://farm1.staticflickr.com/550/20432209075_2ce6a13298.jpg","03":"https://farm1.staticflickr.com/630/22259119656_f3de1369f5.jpg","02":"https://farm9.staticflickr.com/8656/16490088816_5b450efa8e.jpg","01":"https://farm4.staticflickr.com/3927/15419202562_361047c3c9.jpg"}},"they advised him":{"english":"they advised him","type":"verbs","bangla":"tahar take upodesh diasilo","bLetters":"টহর্ টকএ উপওডএশ্ ডিঅসিলও","index":7,"img":{"05":"https://farm3.staticflickr.com/2772/4392246568_754ab965db.jpg","04":"https://farm6.staticflickr.com/5024/5548571649_7d50dffa2f.jpg","03":"https://farm9.staticflickr.com/8397/8653550240_9b984eb9a5.jpg","02":"https://farm5.staticflickr.com/4069/4389452122_260470f545.jpg","01":"https://farm9.staticflickr.com/8016/7175093266_12b993542a.jpg"}},"I can agree with that":{"english":"I can agree with that","type":"verbs","bangla":"ami ar sathe sommoti dite pari","bLetters":"অমি অর্ সতএ সওম্মওটি ডিটএ পরি","index":9,"img":{"05":"https://farm4.staticflickr.com/3325/3218683167_bbb9f62135.jpg","04":"https://farm4.staticflickr.com/3189/3966518200_f7d92c797a.jpg","03":"https://farm8.staticflickr.com/7551/16292391921_094011d01c.jpg","02":"https://farm9.staticflickr.com/8194/8089262244_3817886eac.jpg","01":"https://farm4.staticflickr.com/3624/3525383540_bf346a7629.jpg"}},"she allows it":{"english":"she allows it","type":"verbs","bangla":"se sorbodai ata kore","bLetters":"সএ সওর্বওডঐ অট কওরএ","index":11,"img":{"05":"https://farm8.staticflickr.com/7504/16173726951_4e5314299a.jpg","04":"https://farm2.staticflickr.com/1006/538942114_9b41c2e62a.jpg","03":"https://farm9.staticflickr.com/8380/8548108341_8267556576.jpg","02":"https://farm4.staticflickr.com/3192/3371819754_2af8587367.jpg","01":"https://farm3.staticflickr.com/2199/2233518458_f6e2ac59dc.jpg"}},"we announce it":{"english":"we announce it","type":"verbs","bangla":"amora ata ghosona koresi","bLetters":"অমওর অট ঘওসওন কওরএসি","index":13,"img":{"05":"https://farm4.staticflickr.com/3429/3206300489_47b67522fa.jpg","04":"https://farm3.staticflickr.com/2815/11065083476_e780ea968b.jpg","03":"https://farm6.staticflickr.com/5028/5567313353_46a27966ef.jpg","02":"https://farm6.staticflickr.com/5094/5567156567_1da4300225.jpg","01":"https://farm6.staticflickr.com/5147/5567666142_4552805d21.jpg"}},"I can apologize":{"english":"I can apologize","type":"verbs","bangla":"ami bismito","bLetters":"অমি বিস্মিটও","index":15,"img":{"05":"https://farm5.staticflickr.com/4135/4793180590_1c846fd68d.jpg","04":"https://farm5.staticflickr.com/4089/4958310693_723b7b4bd4.jpg","03":"https://farm3.staticflickr.com/2729/4060339089_ec803efdc0.jpg","02":"https://farm3.staticflickr.com/2673/3760762879_1c124f0942.jpg","01":"https://farm6.staticflickr.com/5071/7227423912_4a032cc356.jpg"}},"she appears today":{"english":"she appears today","type":"verbs","bangla":"se ajke dekha debe","bLetters":"সএ অজ্কএ ডএখ ডএবএ","index":17,"img":{"05":"https://farm4.staticflickr.com/3885/14553802044_0e059d9531.jpg","04":"https://farm5.staticflickr.com/4049/4636485627_ff21b89192.jpg","03":"https://farm3.staticflickr.com/2512/3840891161_b28344cb35.jpg","02":"https://farm4.staticflickr.com/3163/3058074575_0ee81d1140.jpg","01":"https://farm3.staticflickr.com/2593/5756347988_55e11a4df4.jpg"}},"they arranged that":{"english":"they arranged that","type":"verbs","bangla":"se oi gulo gusiyesilo","bLetters":"সএ ওই গুলও গুসিযএসিলও","index":19,"img":{"05":"https://farm2.staticflickr.com/1695/24512087549_e617d6d84b.jpg","04":"https://farm4.staticflickr.com/3610/3350874733_05fbefb357.jpg","03":"https://farm1.staticflickr.com/54/151886797_4dfe631540.jpg","02":"https://farm3.staticflickr.com/2542/4135671205_948693866e.jpg","01":"https://farm1.staticflickr.com/149/369488182_6518f3ef28.jpg"}},"I can arrive tomorrow":{"english":"I can arrive tomorrow","type":"verbs","bangla":"ami agamikal pousate pari","bLetters":"অমি অগমিকল্ পওউসটএ পরি","index":21,"img":{"05":"https://farm4.staticflickr.com/3334/3212130369_4d80881a25.jpg","04":"https://farm4.staticflickr.com/3409/3412846411_86b7f5c54a.jpg","03":"https://farm5.staticflickr.com/4008/4467048134_30ed44d3b1.jpg","02":"https://farm3.staticflickr.com/2642/4229087830_f1ddac9429.jpg","01":"https://farm5.staticflickr.com/4018/4398579953_e8ef01b9ea.jpg"}},"she can ask him":{"english":"she can ask him","type":"verbs","bangla":"se take prosno korte pare","bLetters":"সএ টকএ প্রওস্নও কওর্টএ পরএ","index":23,"img":{"05":"https://farm4.staticflickr.com/3481/3858563773_08d40aae2f.jpg","04":"https://farm4.staticflickr.com/3839/14929064082_19265d5fd8.jpg","03":"https://farm3.staticflickr.com/2470/3793453924_29fe4c99ca.jpg","02":"https://farm6.staticflickr.com/5682/23429699026_d9c7c43d62.jpg","01":"https://farm4.staticflickr.com/3278/2949640966_61634f6e44.jpg"}},"she attaches that":{"english":"she attaches that","type":"verbs","bangla":"se oi gulo songjukto koresilo","bLetters":"সএ ওই গুলও সওন্গ্জুক্টও কওরএসিলও","index":25,"img":{"05":"https://farm6.staticflickr.com/5137/5450073974_9d7c88d171.jpg","04":"https://farm8.staticflickr.com/7209/6891291365_c2cf97e378.jpg","03":"https://farm4.staticflickr.com/3485/3177160864_0a9e1a6000.jpg","02":"https://farm6.staticflickr.com/5493/9079053359_15719e2810.jpg","01":"https://farm8.staticflickr.com/7011/6538586623_7ee407f3e3.jpg"}},"we attack them":{"english":"we attack them","type":"verbs","bangla":"amora tahader akromon kori","bLetters":"অমওর টহডএর্ অক্রওমওন্ কওরি","index":27,"img":{"05":"https://farm8.staticflickr.com/7367/16372127605_550bf81854.jpg","04":"https://farm8.staticflickr.com/7695/16682268454_6eeeaaf4b9.jpg","03":"https://farm8.staticflickr.com/7294/12209979384_2d366d2c77.jpg","02":"https://farm6.staticflickr.com/5084/5261563753_cfbba277df.jpg","01":"https://farm5.staticflickr.com/4018/4670662627_b2ca1a74e9.jpg"}},"they avoid her":{"english":"they avoid her","type":"verbs","bangla":"tahara take ariye chole","bLetters":"টহর টকএ অরিযএ চওলএ","index":29,"img":{"05":"https://farm7.staticflickr.com/6130/6040407083_5e335fb3cb.jpg","04":"https://farm7.staticflickr.com/6017/5932256447_e080b042c5.jpg","03":"https://farm5.staticflickr.com/4057/5163581644_50c1683d96.jpg","02":"https://farm5.staticflickr.com/4085/5078334344_34bbab9847.jpg","01":"https://farm3.staticflickr.com/2615/4086285621_eb6f87ef83.jpg"}},"I can bake it":{"english":"I can bake it","type":"verbs","bangla":"ami ata theke fire jabo","bLetters":"অমি অট তএকএ fইরএ জবও","index":31,"img":{"05":"https://farm6.staticflickr.com/5190/5743401569_4581c7376f.jpg","04":"https://farm6.staticflickr.com/5179/5542751978_fefdc464ef.jpg","03":"https://farm9.staticflickr.com/8006/7161593523_92616d809f.jpg","02":"https://farm6.staticflickr.com/5590/14240198861_5994831b3c.jpg","01":"https://farm9.staticflickr.com/8364/8431077683_7c7a160919.jpg"}},"she is like him":{"english":"she is like him","type":"verbs","bangla":"se take valo base","bLetters":"সএ টকএ বলও বসএ","index":33,"img":{"05":"https://farm6.staticflickr.com/5245/5271319534_3d10ba61e9.jpg","04":"https://farm2.staticflickr.com/1174/5099014617_0751113646.jpg","03":"https://farm3.staticflickr.com/2349/2089071471_3b86dd22bd.jpg","02":"https://farm4.staticflickr.com/3245/2781919440_5e3210b06e.jpg","01":"https://farm3.staticflickr.com/2587/5853370386_51cfe289e2.jpg"}},"we beat it":{"english":"we beat it","type":"verbs","bangla":"amora ata marbo","bLetters":"অমওর অট মর্বও","index":35,"img":{"05":"https://farm1.staticflickr.com/60/268122420_1d892d1398.jpg","04":"https://farm3.staticflickr.com/2652/5832030854_63c9250d74.jpg","03":"https://farm1.staticflickr.com/34/90177473_37524473d5.jpg","02":"https://farm4.staticflickr.com/3075/2669671276_c5b177365f.jpg","01":"https://farm8.staticflickr.com/7271/7435766504_8937d709b8.jpg"}},"they became happy":{"english":"they became happy","type":"verbs","bangla":"tahar khusi hoyse","bLetters":"টহর্ খুসি হওয্সএ","index":37,"img":{"05":"https://farm9.staticflickr.com/8221/8333348054_d9cfc0db92.jpg","04":"https://farm4.staticflickr.com/3089/3152604375_0359f2c997.jpg","03":"https://farm6.staticflickr.com/5290/5360798169_a321082247.jpg","02":"https://farm9.staticflickr.com/8464/8104044527_b5c292ffdc.jpg","01":"https://farm3.staticflickr.com/2761/4215511677_fe4ff7142a.jpg"}},"I can begin that":{"english":"I can begin that","type":"verbs","bangla":"ami ata suru korte pari","bLetters":"অমি অট সুরু কওর্টএ পরি","index":39,"img":{"05":"https://farm6.staticflickr.com/5249/5335388042_2c8a30406a.jpg","04":"https://farm9.staticflickr.com/8043/8442780790_7dedd903bf.jpg","03":"https://farm8.staticflickr.com/7053/6970783481_d80e0957cf.jpg","02":"https://farm8.staticflickr.com/7328/11861068314_dd916fd97c.jpg","01":"https://farm9.staticflickr.com/8167/7592714522_ca2cd7c076.jpg"}},"we borrowed money":{"english":"we borrowed money","type":"verbs","bangla":"amora rin koresilam","bLetters":"অমওর রিন্ কওরএসিলম্","index":41,"img":{"05":"https://farm3.staticflickr.com/2002/2344225802_6a94eae2e1.jpg","04":"https://farm4.staticflickr.com/3026/2344233442_bbaf60b994.jpg","03":"https://farm8.staticflickr.com/7079/6964870170_a9072a3a0b.jpg","02":"https://farm3.staticflickr.com/2268/5757652360_7ba566ae9b.jpg","01":"https://farm6.staticflickr.com/5142/5691631300_2228449944.jpg"}},"they breathe air":{"english":"they breathe air","type":"verbs","bangla":"tara sasher songe hawa nei","bLetters":"টর সশএর্ সওন্গএ হwঅ নএই","index":43,"img":{"05":"https://farm6.staticflickr.com/5716/22439248104_c417909833.jpg","04":"https://farm9.staticflickr.com/8423/7527755436_59974a35c4.jpg","03":"https://farm6.staticflickr.com/5699/22687187239_82f99df2fa.jpg","02":"https://farm6.staticflickr.com/5117/7199972270_281102f344.jpg","01":"https://farm9.staticflickr.com/8054/8094621992_1303a02a5b.jpg"}},"I can bring it":{"english":"I can bring it","type":"verbs","bangla":"ami ata ante pari","bLetters":"অমি অট অন্টএ পরি","index":45,"img":{"05":"https://farm4.staticflickr.com/3229/2599360506_9efc12848c.jpg","04":"https://farm3.staticflickr.com/2019/2659943448_5b125e3788.jpg","03":"https://farm1.staticflickr.com/225/487023839_29168f9965.jpg","02":"https://farm8.staticflickr.com/7480/15699840914_35bf554737.jpg","01":"https://farm4.staticflickr.com/3115/2644989563_c25441f867.jpg"}},"I can build that":{"english":"I can build that","type":"verbs","bangla":"ami oita toiri korte pari","bLetters":"অমি ওইট টওইরি কওর্টএ পরি","index":47,"img":{"05":"https://farm5.staticflickr.com/4154/4838702983_791358dae8.jpg","04":"https://farm8.staticflickr.com/7385/9255071007_5a9be38c1a.jpg","03":"https://farm3.staticflickr.com/2657/4158594208_e8b158619c.jpg","02":"https://farm3.staticflickr.com/2001/2443507972_76f8794c6a.jpg","01":"https://farm8.staticflickr.com/7225/7016213901_1166ce03a7.jpg"}},"she buys food":{"english":"she buys food","type":"verbs","bangla":"se khabar kine","bLetters":"সএ খবর্ কিনএ","index":49,"img":{"05":"https://farm4.staticflickr.com/3182/4567435594_c70e24986e.jpg","04":"https://farm8.staticflickr.com/7371/12524017114_529f877b16.jpg","03":"https://farm9.staticflickr.com/8441/7792181070_87fe3416e5.jpg","02":"https://farm7.staticflickr.com/6152/6166585036_52774edd10.jpg","01":"https://farm3.staticflickr.com/2296/2108402633_7577b0a60d.jpg"}},"we calculate it":{"english":"we calculate it","type":"verbs","bangla":"amora ata gonona kori","bLetters":"অমওর অট গওনওন কওরি","index":51,"img":{"05":"https://farm4.staticflickr.com/3540/3481910535_0b76d03073.jpg","04":"https://farm3.staticflickr.com/2701/4086079670_21ce747567.jpg","03":"https://farm5.staticflickr.com/4038/4301153588_9518f69e98.jpg","02":"https://farm8.staticflickr.com/7619/16577760353_0761c88b40.jpg","01":"https://farm8.staticflickr.com/7320/13284677093_91dac27c3f.jpg"}},"they carry it":{"english":"they carry it","type":"verbs","bangla":"tahara ata bohon kore","bLetters":"টহর অট বওহওন্ কওরএ","index":53,"img":{"05":"https://farm4.staticflickr.com/3373/3189755167_33098d478f.jpg","04":"https://farm3.staticflickr.com/2683/4062040570_98e7e4202d.jpg","03":"https://farm8.staticflickr.com/7207/6899042137_8a27db296f.jpg","02":"https://farm7.staticflickr.com/6186/6077191725_c8f6769b12.jpg","01":"https://farm1.staticflickr.com/92/251489793_829434d2ba.jpg"}},"they don't cheat":{"english":"they don't cheat","type":"verbs","bangla":"tara dhoka dey na","bLetters":"টর দওক ডএয্ ন","index":55,"img":{"05":"https://farm5.staticflickr.com/4071/4516769404_7ba2b938b8.jpg","04":"https://farm7.staticflickr.com/6024/5916804154_dac66d23ef.jpg","03":"https://farm7.staticflickr.com/6007/5917771746_3d22e77110.jpg","02":"https://farm6.staticflickr.com/5260/5402389940_8153344077.jpg","01":"https://farm4.staticflickr.com/3246/2388196893_5446e35fea.jpg"}},"she chooses him":{"english":"she chooses him","type":"verbs","bangla":"se take posondo koresilo","bLetters":"সএ টকএ পওসওন্ডও কওরএসিলও","index":57,"img":{"05":"https://farm7.staticflickr.com/6070/6158079865_0bf07a64ff.jpg","04":"https://farm1.staticflickr.com/126/344083654_c11bfc969e.jpg","03":"https://farm6.staticflickr.com/5504/10629438044_0e1d47bd58.jpg","02":"https://farm3.staticflickr.com/2727/4513578434_a264d7dea0.jpg","01":"https://farm4.staticflickr.com/3278/2949640966_61634f6e44.jpg"}},"we close it":{"english":"we close it","type":"verbs","bangla":"amora ata bondho korbo","bLetters":"অমওর অট বওন্দও কওর্বও","index":59,"img":{"05":"https://farm8.staticflickr.com/7199/6966299191_0a3fdf52ae.jpg","04":"https://farm8.staticflickr.com/7004/6525391451_aac49879ac.jpg","03":"https://farm3.staticflickr.com/2705/4255857134_942ece58ae.jpg","02":"https://farm4.staticflickr.com/3039/2663951544_7756592d44.jpg","01":"https://farm9.staticflickr.com/8284/7678968758_d25650d65d.jpg"}},"he comes here":{"english":"he comes here","type":"verbs","bangla":"se akhane asbe","bLetters":"সএ অখনএ অস্বএ","index":61,"img":{"05":"https://farm4.staticflickr.com/3217/2738428986_f842871404.jpg","04":"https://farm4.staticflickr.com/3762/9019337680_17670997ea.jpg","03":"https://farm5.staticflickr.com/4081/4934724191_df35245f59.jpg","02":"https://farm3.staticflickr.com/2004/5763939914_2014dc7cbb.jpg","01":"https://farm3.staticflickr.com/2517/3707034630_b8bc15847b.jpg"}},"I can compare that":{"english":"I can compare that","type":"verbs","bangla":"ami oitar sathe tulona korte pari","bLetters":"অমি ওইটর্ সতএ টুলওন কওর্টএ পরি","index":63,"img":{"05":"https://farm4.staticflickr.com/3680/8998126996_c785b99a04.jpg","04":"https://farm9.staticflickr.com/8568/15403588994_8ccd93c670.jpg","03":"https://farm9.staticflickr.com/8573/16394357191_78f49b85ff.jpg","02":"https://farm3.staticflickr.com/2911/14549734185_d5c16c4601.jpg","01":"https://farm6.staticflickr.com/5570/15112962000_84750e5f73.jpg"}},"she competes with me":{"english":"she competes with me","type":"verbs","bangla":"se amar songre pratijogita kare","bLetters":"সএ অমর্ সওন্গ্রএ প্রটিজওগিট করএ","index":65,"img":{"05":"https://farm8.staticflickr.com/7681/17231803263_c27e8c8dd9.jpg","04":"https://farm3.staticflickr.com/2756/4376401911_4443048d94.jpg","03":"https://farm8.staticflickr.com/7229/7390281526_53f43f467e.jpg","02":"https://farm5.staticflickr.com/4072/4538547105_b1b12e3d01.jpg","01":"https://farm3.staticflickr.com/2022/3535531279_9c71461c89.jpg"}},"we complain about it":{"english":"we complain about it","type":"verbs","bangla":"amora ata somondhe ovijog korbo","bLetters":"অমওর অট সওমওন্দএ ওবিজওগ্ কওর্বও","index":67,"img":{"05":"https://farm1.staticflickr.com/35/64123566_3a35aa37d7.jpg","04":"https://farm4.staticflickr.com/3111/2704882297_6e22ee6bd6.jpg","03":"https://farm8.staticflickr.com/7374/8728714701_8b70a6789b.jpg","02":"https://farm9.staticflickr.com/8291/7598733354_795c0733b2.jpg","01":"https://farm5.staticflickr.com/4013/4408882706_1e1bd9f57a.jpg"}},"they continued reading":{"english":"they continued reading","type":"verbs","bangla":"tahara poritese","bLetters":"টহর পওরিটএসএ","index":69,"img":{"05":"https://farm8.staticflickr.com/7209/6950618031_f37e17ab99.jpg","04":"https://farm4.staticflickr.com/3481/3795164750_72dc4ec707.jpg","03":"https://farm9.staticflickr.com/8103/8541651006_0b0b0e35a8.jpg","02":"https://farm8.staticflickr.com/7369/16310741469_9ef6954f14.jpg","01":"https://farm4.staticflickr.com/3036/2708660678_a0729aed20.jpg"}},"he cried about that":{"english":"he cried about that","type":"verbs","bangla":"she oi bishaye checheiye uthlo","bLetters":"শএ ওই বিশযএ চএচএইযএ উত্লও","index":71,"img":{"05":"https://farm5.staticflickr.com/4057/4284540523_f2e0a72581.jpg","04":"https://farm1.staticflickr.com/68/215233902_5deddff2d2.jpg","03":"https://farm9.staticflickr.com/8036/7987131423_f6782ece27.jpg","02":"https://farm6.staticflickr.com/5142/5869594656_1bddffb4c8.jpg","01":"https://farm9.staticflickr.com/8623/15677785143_e5c410efe4.jpg"}},"I can decide now":{"english":"I can decide now","type":"verbs","bangla":"ami akhon siddhanto nite pari","bLetters":"অমি অখওন্ সিড্দন্টও নিটএ পরি","index":73,"img":{"05":"https://farm8.staticflickr.com/7495/15526558318_c891ce8351.jpg","04":"https://farm4.staticflickr.com/3330/3560094847_b587a13fce.jpg","03":"https://farm4.staticflickr.com/3352/3195558295_ffcd5f7739.jpg","02":"https://farm6.staticflickr.com/5249/5335388042_2c8a30406a.jpg","01":"https://farm6.staticflickr.com/5174/5724301567_e42583d714.jpg"}},"they disappeared quickly":{"english":"they disappeared quickly","type":"verbs","bangla":"tara druto hotas hoysilo","bLetters":"টর ড্রুটও হওটস্ হওয্সিলও","index":79,"img":{"05":"https://farm8.staticflickr.com/7158/6534171131_e74f2c09cf.jpg","04":"https://farm3.staticflickr.com/2869/12176552594_f311893bee.jpg","03":"https://farm4.staticflickr.com/3234/2915978465_67a97a8399.jpg","02":"https://farm8.staticflickr.com/7146/6436661603_eafaa3c013.jpg","01":"https://farm6.staticflickr.com/5579/14721624486_4a3c10427c.jpg"}},"I discovered that":{"english":"I discovered that","type":"verbs","bangla":"ami eha oticrom koresilam","bLetters":"অমি এহ ওটিcরওম্ কওরএসিলম্","index":81,"img":{"05":"https://farm8.staticflickr.com/7232/7224310522_f507b64550.jpg","04":"https://farm1.staticflickr.com/384/20463109361_740e3ef246.jpg","03":"https://farm3.staticflickr.com/2071/3527344617_8901423da7.jpg","02":"https://farm8.staticflickr.com/7377/11081720934_056927f2c1.jpg","01":"https://farm9.staticflickr.com/8480/8254734632_5ffe91db1e.jpg"}},"she dislikes that":{"english":"she dislikes that","type":"verbs","bangla":"se oita auposondo kore, se oita posondo kore na","bLetters":"সএ ওইট ঔপওসওন্ডও কওরএ, সএ ওইট পওসওন্ডও কওরএ ন","index":83,"img":{"05":"https://farm9.staticflickr.com/8687/17175269888_e2bb2474be.jpg","04":"https://farm9.staticflickr.com/8254/8700165126_f2e05b1f7d.jpg","03":"https://farm7.staticflickr.com/6208/6051759785_e6a381ecd4.jpg","02":"https://farm3.staticflickr.com/2565/3952960610_14a8988ebd.jpg","01":"https://farm3.staticflickr.com/2847/8830617976_91e44d2147.jpg"}},"we do it":{"english":"we do it","type":"verbs","bangla":"amora ata korbo","bLetters":"অমওর অট কওর্বও","index":85,"img":{"05":"https://farm8.staticflickr.com/7145/6635387085_f22b588878.jpg","04":"https://farm9.staticflickr.com/8206/8240826405_084d91b595.jpg","03":"https://farm3.staticflickr.com/2465/3585775078_c37296ebd1.jpg","02":"https://farm8.staticflickr.com/7147/6681804005_b445edf364.jpg","01":"https://farm4.staticflickr.com/3734/12000867405_17a314da49.jpg"}},"they dream about it":{"english":"they dream about it","type":"verbs","bangla":"tahara ata somonddhe sopno dekhe","bLetters":"টহর অট সওমওন্ড্দএ সওপ্নও ডএখএ","index":87,"img":{"05":"https://farm7.staticflickr.com/6188/6088729236_95c02b926a.jpg","04":"https://farm7.staticflickr.com/6092/6239502651_8fb09f60f1.jpg","03":"https://farm3.staticflickr.com/2430/3957731715_4aa499f009.jpg","02":"https://farm3.staticflickr.com/2630/3724072982_a1686f79c9.jpg","01":"https://farm7.staticflickr.com/6074/6160310446_a549fa3f83.jpg"}},"I earned":{"english":"I earned","type":"verbs","bangla":"ami uparjon koresilam","bLetters":"অমি উপর্জওন্ কওরএসিলম্","index":89,"img":{"05":"https://farm7.staticflickr.com/6171/6203304281_15ab75e110.jpg","04":"https://farm6.staticflickr.com/5471/10617763766_65583b0172.jpg","03":"https://farm8.staticflickr.com/7394/9466213053_e1f00fa1c9.jpg","02":"https://farm4.staticflickr.com/3545/3418568476_fd3a144dcd.jpg","01":"https://farm9.staticflickr.com/8371/8356184427_ede5a55d7f.jpg"}},"he eats a lot":{"english":"he eats a lot","type":"verbs","bangla":"se prochur khay","bLetters":"সএ প্রওচুর্ খয্","index":91,"img":{"05":"https://farm3.staticflickr.com/2234/3530093150_9e11dbf5e9.jpg","04":"https://farm3.staticflickr.com/2229/2351218756_267dd0086d.jpg","03":"https://farm5.staticflickr.com/4113/5076269925_9e64ce0c32.jpg","02":"https://farm6.staticflickr.com/5167/5248631499_e9e93fd16b.jpg","01":"https://farm3.staticflickr.com/2684/4425404759_b270db1102.jpg"}},"we enjoyed that":{"english":"we enjoyed that","type":"verbs","bangla":"amora eha upovog koresilam","bLetters":"অমওর এহ উপওবওগ্ কওরএসিলম্","index":93,"img":{"05":"https://farm5.staticflickr.com/4120/4809935155_600c2af2d3.jpg","04":"https://farm1.staticflickr.com/18/23732228_1dd68390b4.jpg","03":"https://farm9.staticflickr.com/8378/8472504690_144e895c1a.jpg","02":"https://farm6.staticflickr.com/5143/5619636467_de2e19d9d7.jpg","01":"https://farm2.staticflickr.com/1266/4674252499_574804a097.jpg"}},"they entered here":{"english":"they entered here","type":"verbs","bangla":"tara akhane probesh koresilo","bLetters":"টর অখনএ প্রওবএশ্ কওরএসিলও","index":95,"img":{"05":"https://farm3.staticflickr.com/2946/15302260428_7b19cbf0b4.jpg","04":"https://farm1.staticflickr.com/271/20080839586_c856ce02a6.jpg","03":"https://farm9.staticflickr.com/8801/17366077811_453499f5e3.jpg","02":"https://farm6.staticflickr.com/5020/5407179929_a9826e679f.jpg","01":"https://farm4.staticflickr.com/3843/14329465448_2d4bfbe521.jpg"}},"he escaped that":{"english":"he escaped that","type":"verbs","bangla":"se paliye giasilo","bLetters":"সএ পলিযএ গিঅসিলও","index":97,"img":{"05":"https://farm3.staticflickr.com/2324/2206230805_fa911b1756.jpg","04":"https://farm3.staticflickr.com/2137/2206230811_b2bf6ea06c.jpg","03":"https://farm3.staticflickr.com/2086/2206230797_1295ca0bc6.jpg","02":"https://farm9.staticflickr.com/8160/7335758000_be2f7f8565.jpg","01":"https://farm6.staticflickr.com/5123/5247364544_c7526a3bae.jpg"}},"I can explain that":{"english":"I can explain that","type":"verbs","bangla":"ami eha bakkha korte pari","bLetters":"অমি এহ বক্খ কওর্টএ পরি","index":99,"img":{"05":"https://farm8.staticflickr.com/7797/17750669390_6fa32a90f5.jpg","04":"https://farm3.staticflickr.com/2825/9167325610_ced5c25c3e.jpg","03":"https://farm3.staticflickr.com/2603/4115760587_b8995e3177.jpg","02":"https://farm9.staticflickr.com/8452/7966473430_1f02b06fe2.jpg","01":"https://farm5.staticflickr.com/4133/4961351187_e6c5671659.jpg"}},"she feels that too":{"english":"she feels that too","type":"verbs","bangla":"se eha o onuvob korlo","bLetters":"সএ এহ ও ওনুবওব্ কওর্লও","index":101,"img":{"05":"https://farm6.staticflickr.com/5299/5568472316_8fe104834c.jpg","04":"https://farm8.staticflickr.com/7034/6777971095_739853d5ea.jpg","03":"https://farm4.staticflickr.com/3692/13389461174_8b578ee00f.jpg","02":"https://farm7.staticflickr.com/6022/5959626406_11f7233d78.jpg","01":"https://farm6.staticflickr.com/5595/14133544147_934c526c81.jpg"}},"we fled from there":{"english":"we fled from there","type":"verbs","bangla":"amra okhan theke paliye gechlam","bLetters":"অম্র ওখন্ তএকএ পলিযএ গএচ্লম্","index":103,"img":{"05":"https://farm3.staticflickr.com/2935/14064543001_a5a56918e9.jpg","04":"https://farm9.staticflickr.com/8730/16863595905_b1269e43dc.jpg","03":"https://farm8.staticflickr.com/7299/13935555537_a8cc92a6a4.jpg","02":"https://farm6.staticflickr.com/5085/5299119651_14221e34e9.jpg","01":"https://farm2.staticflickr.com/1515/24085169244_6723a90615.jpg"}},"they will fly tomorrow":{"english":"they will fly tomorrow","type":"verbs","bangla":"se agami kal urbe","bLetters":"সএ অগমি কল্ উর্বএ","index":105,"img":{"05":"https://farm5.staticflickr.com/4111/5180824512_2b93001f9b.jpg","04":"https://farm2.staticflickr.com/1007/5181611328_f3a14dcfa3.jpg","03":"https://farm6.staticflickr.com/5124/5241024348_fdf4922fa2.jpg","02":"https://farm9.staticflickr.com/8709/16953429300_5c74613a00.jpg","01":"https://farm5.staticflickr.com/4092/5054184338_cb37832e05.jpg"}},"I can follow you":{"english":"I can follow you","type":"verbs","bangla":"ami tomake aunusoron korte pari","bLetters":"অমি টওমকএ ঔনুসওরওন্ কওর্টএ পরি","index":107,"img":{"05":"https://farm4.staticflickr.com/3917/14492967672_5e6915fbfd.jpg","04":"https://farm9.staticflickr.com/8827/17614952376_42db33b535.jpg","03":"https://farm8.staticflickr.com/7160/6757851569_5ddcd6f87a.jpg","02":"https://farm1.staticflickr.com/706/20769936828_bcab0822af.jpg","01":"https://farm4.staticflickr.com/3269/3737723282_0abde720f8.jpg"}},"she forgot me":{"english":"she forgot me","type":"verbs","bangla":"se amake vule gelo","bLetters":"সএ অমকএ বুলএ গএলও","index":109,"img":{"05":"https://farm4.staticflickr.com/3911/15145981706_bfbf9868d2.jpg","04":"https://farm8.staticflickr.com/7434/12939131154_d355d4db5b.jpg","03":"https://farm3.staticflickr.com/2199/2233518458_f6e2ac59dc.jpg","02":"https://farm3.staticflickr.com/2090/2467517423_630f477297.jpg","01":"https://farm6.staticflickr.com/5093/5487840611_242d40957e.jpg"}},"we forgive him":{"english":"we forgive him","type":"verbs","bangla":"amora take khoma kori","bLetters":"অমওর টকএ খওম কওরি","index":111,"img":{"05":"https://farm8.staticflickr.com/7432/12885419764_e16628220a.jpg","04":"https://farm8.staticflickr.com/7055/6852886367_974d042fbc.jpg","03":"https://farm4.staticflickr.com/3285/3147461049_35b009962d.jpg","02":"https://farm8.staticflickr.com/7012/13945712724_892f2ebc3c.jpg","01":"https://farm1.staticflickr.com/112/268605957_2331fb412d.jpg"}},"I can give her that":{"english":"I can give her that","type":"verbs","bangla":"ami tahake uha dite pari","bLetters":"অমি টহকএ উহ ডিটএ পরি","index":113,"img":{"05":"https://farm4.staticflickr.com/3079/3200732258_785eefc67b.jpg","04":"https://farm8.staticflickr.com/7496/16169321711_b6e3f4c248.jpg","03":"https://farm5.staticflickr.com/4041/4251856861_c2a180b66e.jpg","02":"https://farm8.staticflickr.com/7288/16327066369_4287927c51.jpg","01":"https://farm9.staticflickr.com/8338/8227661294_1c1b59fba1.jpg"}},"she goes there":{"english":"she goes there","type":"verbs","bangla":"se sekhane jay","bLetters":"সএ সএখনএ জয্","index":115,"img":{"05":"https://farm6.staticflickr.com/5043/5339002127_d269397255.jpg","04":"https://farm5.staticflickr.com/4146/5057937720_d79d765660.jpg","03":"https://farm8.staticflickr.com/7347/9858307554_50df6b4d95.jpg","02":"https://farm5.staticflickr.com/4122/5057937926_030180e5d7.jpg","01":"https://farm8.staticflickr.com/7434/10645663306_183aa73085.jpg"}},"we greeted them":{"english":"we greeted them","type":"verbs","bangla":"amora segulo jani","bLetters":"অমওর সএগুলও জনি","index":117,"img":{"05":"https://farm8.staticflickr.com/7378/15961284883_7cae6c2e82.jpg","04":"https://farm5.staticflickr.com/4135/4750048040_30d80c767e.jpg","03":"https://farm9.staticflickr.com/8837/17488167125_b4ac611018.jpg","02":"https://farm6.staticflickr.com/5083/5249934061_9e1f7f31c2.jpg","01":"https://farm3.staticflickr.com/2235/2360409743_79145b2b17.jpg"}},"I hate that":{"english":"I hate that","type":"verbs","bangla":"ami uha ghrina kori","bLetters":"অমি উহ ঘ্রিন কওরি","index":119,"img":{"05":"https://farm2.staticflickr.com/1327/1357777300_67646771ed.jpg","04":"https://farm9.staticflickr.com/8210/8173070875_4025c25e8f.jpg","03":"https://farm9.staticflickr.com/8057/8171338445_f988e5a766.jpg","02":"https://farm9.staticflickr.com/8484/8171312457_b15097a8df.jpg","01":"https://farm6.staticflickr.com/5474/9391343094_859a9a68fc.jpg"}},"I can hear it":{"english":"I can hear it","type":"verbs","bangla":"ami eha sunte pari","bLetters":"অমি এহ সুন্টএ পরি","index":121,"img":{"05":"https://farm8.staticflickr.com/7680/17408098405_a254ecafbd.jpg","04":"https://farm9.staticflickr.com/8141/7605861924_df9a5ffd3d.jpg","03":"https://farm8.staticflickr.com/7780/16695079933_76a6ce455c.jpg","02":"https://farm8.staticflickr.com/7016/6794309237_fc7812da81.jpg","01":"https://farm7.staticflickr.com/6182/6061588483_a596ac8339.jpg"}},"she imagine that":{"english":"she imagine that","type":"verbs","bangla":"se bismito hoysilo","bLetters":"সএ বিস্মিটও হওয্সিলও","index":123,"img":{"05":"https://farm5.staticflickr.com/4086/4971883017_4772150d69.jpg","04":"https://farm2.staticflickr.com/1092/5099583435_ff2d9f7c59.jpg","03":"https://farm6.staticflickr.com/5589/14092382550_14e9f081cd.jpg","02":"https://farm3.staticflickr.com/2776/13058721613_e71f75d9ea.jpg","01":"https://farm4.staticflickr.com/3340/3330252113_25bebfc2c1.jpg"}},"we invited them":{"english":"we invited them","type":"verbs","bangla":"amora amontrito hoysilam","bLetters":"অমওর অমওন্ট্রিটও হওয্সিলম্","index":125,"img":{"05":"https://farm4.staticflickr.com/3291/3040692147_2bcc7b9ba8.jpg","04":"https://farm3.staticflickr.com/2513/3853257123_f0e836982f.jpg","03":"https://farm4.staticflickr.com/3542/3853257275_5e0093dd11.jpg","02":"https://farm8.staticflickr.com/7299/16402922932_c88e664db5.jpg","01":"https://farm5.staticflickr.com/4020/4542949349_d404d7eb60.jpg"}},"I know him":{"english":"I know him","type":"verbs","bangla":"ami take chini","bLetters":"অমি টকএ চিনি","index":127,"img":{"05":"https://farm6.staticflickr.com/5615/15739910905_d780d41e2f.jpg","04":"https://farm4.staticflickr.com/3481/3301913374_818ddec5aa.jpg","03":"https://farm8.staticflickr.com/7395/15966721254_3ed775df56.jpg","02":"https://farm4.staticflickr.com/3822/10033577953_8e77a90f8c.jpg","01":"https://farm8.staticflickr.com/7001/6800151527_895aa354ba.jpg"}},"she learned it":{"english":"she learned it","type":"verbs","bangla":"se uha poresilo","bLetters":"সএ উহ পওরএসিলও","index":129,"img":{"05":"https://farm1.staticflickr.com/237/458117370_21dad91420.jpg","04":"https://farm6.staticflickr.com/5151/6937083904_226a2c66d5.jpg","03":"https://farm3.staticflickr.com/2565/4108590023_b796daec16.jpg","02":"https://farm4.staticflickr.com/3620/3639137700_cca852f164.jpg","01":"https://farm6.staticflickr.com/5191/7182218395_733bd390aa.jpg"}},"we leave now":{"english":"we leave now","type":"verbs","bangla":"amora akhon tag korbo","bLetters":"অমওর অখওন্ টগ্ কওর্বও","index":131,"img":{"05":"https://farm2.staticflickr.com/1106/542366576_50f9df8d14.jpg","04":"https://farm8.staticflickr.com/7355/13904942511_066fd966ed.jpg","03":"https://farm3.staticflickr.com/2163/2538749757_278406f7a8.jpg","02":"https://farm7.staticflickr.com/6098/6243338143_b2347e3c64.jpg","01":"https://farm5.staticflickr.com/4129/5042911222_359450fd1c.jpg"}},"they lied about him":{"english":"they lied about him","type":"verbs","bangla":"tahar tar somonddhe mittha bolesilo","bLetters":"টহর্ টর্ সওমওন্ড্দএ মিট্ত বওলএসিলও","index":133,"img":{"05":"https://farm8.staticflickr.com/7438/11771887754_d83e439abe.jpg","04":"https://farm8.staticflickr.com/7479/16036791462_2e52b3e23d.jpg","03":"https://farm8.staticflickr.com/7381/12756848165_900f0f9365.jpg","02":"https://farm5.staticflickr.com/4119/4941612591_d4cf24e99b.jpg","01":"https://farm6.staticflickr.com/5551/15236383426_a05b5047a5.jpg"}},"I can listen to that":{"english":"I can listen to that","type":"verbs","bangla":"ami uha soron korte pari","bLetters":"অমি উহ সওরওন্ কওর্টএ পরি","index":135,"img":{"05":"https://farm4.staticflickr.com/3226/4593428381_17452febcb.jpg","04":"https://farm8.staticflickr.com/7290/16615589736_34fa64728c.jpg","03":"https://farm6.staticflickr.com/5609/15417438748_2a46b6c41d.jpg","02":"https://farm8.staticflickr.com/7447/10710622056_2b96129c9d.jpg","01":"https://farm4.staticflickr.com/3702/9288221390_2a2cb9749d.jpg"}},"she lost that":{"english":"she lost that","type":"verbs","bangla":"se uha hariyesilo","bLetters":"সএ উহ হরিযএসিলও","index":137,"img":{"05":"https://farm8.staticflickr.com/7324/9721567274_96bd115e26.jpg","04":"https://farm5.staticflickr.com/4132/5431337997_b05d1f772d.jpg","03":"https://farm4.staticflickr.com/3020/2716801189_602a722e00.jpg","02":"https://farm5.staticflickr.com/4031/4546686195_6c3dcdd0dd.jpg","01":"https://farm4.staticflickr.com/3943/15634107922_4d85df0dcc.jpg"}},"we made it yesterday":{"english":"we made it yesterday","type":"verbs","bangla":"amora eha gotokal toiri koresilam","bLetters":"অমওর এহ গওটওকল্ টওইরি কওরএসিলম্","index":139,"img":{"05":"https://farm6.staticflickr.com/5053/5415334459_6845671af5.jpg","04":"https://farm4.staticflickr.com/3227/3125269643_4bd91d6087.jpg","03":"https://farm8.staticflickr.com/7430/16542478512_c73bf4a94a.jpg","02":"https://farm8.staticflickr.com/7743/17122181087_0392fa5eee.jpg","01":"https://farm4.staticflickr.com/3045/2630949578_5d0c796517.jpg"}},"they met him":{"english":"they met him","type":"verbs","bangla":"tahar tar sathe sakkhat koresilo","bLetters":"টহর্ টর্ সতএ সক্খট্ কওরএসিলও","index":141,"img":{"05":"https://farm1.staticflickr.com/497/20350818622_fdf686e591.jpg","04":"https://farm1.staticflickr.com/686/20264328043_15d1a976be.jpg","03":"https://farm6.staticflickr.com/5601/15643859162_38b4313803.jpg","02":"https://farm2.staticflickr.com/1152/1167093048_ce3a8f7de1.jpg","01":"https://farm7.staticflickr.com/6153/6234662828_45d66b5ca8.jpg"}},"I misspell that":{"english":"I misspell that","type":"verbs","bangla":"ami ata vul banan koresilam","bLetters":"অমি অট বুল্ বনন্ কওরএসিলম্","index":143,"img":{"05":"https://farm1.staticflickr.com/88/228507620_28a2a462de.jpg","04":"https://farm1.staticflickr.com/77/206221063_e40d482e32.jpg","03":"https://farm4.staticflickr.com/3610/3386253199_bae09d019b.jpg","02":"https://farm7.staticflickr.com/6015/6013781171_a7d487a7f9.jpg","01":"https://farm4.staticflickr.com/3371/3286761206_8cc2b21e91.jpg"}},"I always pray":{"english":"I always pray","type":"verbs","bangla":"ami sorboda dowa kori","bLetters":"অমি সওর্বওড ডওwঅ কওরি","index":145,"img":{"05":"https://farm4.staticflickr.com/3318/3640935401_511fc87ce8.jpg","04":"https://farm5.staticflickr.com/4086/4962281047_3fbff3c4e0.jpg","03":"https://farm3.staticflickr.com/2050/2043138992_7287ce5ac2.jpg","02":"https://farm6.staticflickr.com/5044/5641808302_cc1333cfd5.jpg","01":"https://farm7.staticflickr.com/6165/6199922562_8197bc806c.jpg"}},"she prefers that":{"english":"she prefers that","type":"verbs","bangla":"se eha posondo kore","bLetters":"সএ এহ পওসওন্ডও কওরএ","index":147,"img":{"05":"https://farm4.staticflickr.com/3580/3427989563_13994d2fac.jpg","04":"https://farm4.staticflickr.com/3531/3962194779_69478f1fde.jpg","03":"https://farm5.staticflickr.com/4059/4720289454_2546d9b3bf.jpg","02":"https://farm4.staticflickr.com/3774/12883507263_b4a5b5e45a.jpg","01":"https://farm4.staticflickr.com/3876/14489683598_f36e8e5d3d.jpg"}},"we protected them":{"english":"we protected them","type":"verbs","bangla":"amora segulo rokkha korbo","bLetters":"অমওর সএগুলও রওক্খ কওর্বও","index":149,"img":{"05":"https://farm6.staticflickr.com/5305/5621342834_358df8d674.jpg","04":"https://farm8.staticflickr.com/7346/16507944941_0c18763360.jpg","03":"https://farm6.staticflickr.com/5545/11091373596_ce0227d943.jpg","02":"https://farm9.staticflickr.com/8033/7894970626_6521a6244c.jpg","01":"https://farm4.staticflickr.com/3886/14605792196_f9914d65e3.jpg"}},"they will punish her":{"english":"they will punish her","type":"verbs","bangla":"tahara take sasti debe","bLetters":"টহর টকএ সস্টি ডএবএ","index":151,"img":{"05":"https://farm3.staticflickr.com/2193/2382298090_931387bc1b.jpg","04":"https://farm9.staticflickr.com/8109/8654284213_227869e6a4.jpg","03":"https://farm8.staticflickr.com/7201/6814963040_06f960e432.jpg","02":"https://farm4.staticflickr.com/3203/2361257868_a77f4e1079.jpg","01":"https://farm5.staticflickr.com/4090/5146256049_e8679eeb96.jpg"}},"I can put it there":{"english":"I can put it there","type":"verbs","bangla":"ami ata akhane rakhte pari","bLetters":"অমি অট অখনএ রখ্টএ পরি","index":153,"img":{"05":"https://farm5.staticflickr.com/4074/4804257404_4a7831580e.jpg","04":"https://farm4.staticflickr.com/3558/3570228755_921b30e491.jpg","03":"https://farm8.staticflickr.com/7698/17389092386_164f851c93.jpg","02":"https://farm4.staticflickr.com/3638/3331206365_a297b42f07.jpg","01":"https://farm2.staticflickr.com/1334/5103069185_b765363321.jpg"}},"she will read it":{"english":"she will read it","type":"verbs","bangla":"se ata porbe","bLetters":"সএ অট পওর্বএ","index":155,"img":{"05":"https://farm4.staticflickr.com/3560/3412682317_c677f0cd7e.jpg","04":"https://farm3.staticflickr.com/2416/2095911353_59f850c9d8.jpg","03":"https://farm8.staticflickr.com/7405/9348746302_db9beb744a.jpg","02":"https://farm3.staticflickr.com/2592/3947701780_7e32b3f1f6.jpg","01":"https://farm4.staticflickr.com/3246/3122894715_5123ee3cec.jpg"}},"we received that":{"english":"we received that","type":"verbs","bangla":"amora uha grohon koresilam","bLetters":"অমওর উহ গ্রওহওন্ কওরএসিলম্","index":157,"img":{"05":"https://farm9.staticflickr.com/8715/17161858032_f82d898143.jpg","04":"https://farm8.staticflickr.com/7534/16017693767_c67b1659f3.jpg","03":"https://farm4.staticflickr.com/3214/3141711998_63a3a4bc8e.jpg","02":"https://farm7.staticflickr.com/6058/6309650606_6107e6d3e1.jpg","01":"https://farm3.staticflickr.com/2778/4301359879_3b0ca083dd.jpg"}},"they refuse to talk":{"english":"they refuse to talk","type":"verbs","bangla":"tahara bolte prottakhan kore","bLetters":"টহর বওল্টএ প্রওট্টখন্ কওরএ","index":159,"img":{"05":"https://farm2.staticflickr.com/1068/700364150_516b819a98.jpg","04":"https://farm5.staticflickr.com/4091/5174025005_64bbb4af54.jpg","03":"https://farm5.staticflickr.com/4131/5085349285_6625343a70.jpg","02":"https://farm5.staticflickr.com/4127/5005790332_433995659a.jpg","01":"https://farm1.staticflickr.com/38/125676907_a064462f8a.jpg"}},"I remember that":{"english":"I remember that","type":"verbs","bangla":"am eha soron kori","bLetters":"অম্ এহ সওরওন্ কওরি","index":161,"img":{"05":"https://farm9.staticflickr.com/8295/7789924636_d6859a26b9.jpg","04":"https://farm5.staticflickr.com/4057/4525455593_131701c8e1.jpg","03":"https://farm4.staticflickr.com/3817/12263821333_bcf4774ed2.jpg","02":"https://farm9.staticflickr.com/8010/7477521876_c3cc164235.jpg","01":"https://farm1.staticflickr.com/778/22828197486_d6327d9933.jpg"}},"she repeats that":{"english":"she repeats that","type":"verbs","bangla":"se eha punoray bole","bLetters":"সএ এহ পুনওরয্ বওলএ","index":163,"img":{"05":"https://farm9.staticflickr.com/8680/15549351944_6b169e76e2.jpg","04":"https://farm9.staticflickr.com/8094/8378832036_9648485bc5.jpg","03":"https://farm3.staticflickr.com/2508/4187489750_5330818d51.jpg","02":"https://farm6.staticflickr.com/5603/15184318434_7f57b2226a.jpg","01":"https://farm6.staticflickr.com/5247/5255189579_e59e7d7433.jpg"}},"we see it":{"english":"we see it","type":"verbs","bangla":"amora ata dehki","bLetters":"অমওর অট ডএহ্কি","index":165,"img":{"05":"https://farm1.staticflickr.com/118/274716465_545e8cddec.jpg","04":"https://farm9.staticflickr.com/8447/7766876244_57eb0ef672.jpg","03":"https://farm2.staticflickr.com/1637/24011209390_ec455e16b2.jpg","02":"https://farm8.staticflickr.com/7003/6485242931_33b2eee757.jpg","01":"https://farm5.staticflickr.com/4002/4306726617_9119ee44d3.jpg"}},"they sell it":{"english":"they sell it","type":"verbs","bangla":"tara ata bikri kore","bLetters":"টর অট বিক্রি কওরএ","index":167,"img":{"05":"https://farm9.staticflickr.com/8619/16662435675_7f864eb9a5.jpg","04":"https://farm9.staticflickr.com/8268/8767748762_33f8f35177.jpg","03":"https://farm4.staticflickr.com/3426/3252903440_ec24a40ec7.jpg","02":"https://farm9.staticflickr.com/8372/8401066063_c5b7278403.jpg","01":"https://farm5.staticflickr.com/4067/4326779653_210b5043b9.jpg"}},"I sent that yesterday":{"english":"I sent that yesterday","type":"verbs","bangla":"ami eha gotokal pathiyesilam ","bLetters":"অমি এহ গওটওকল্ পতিযএসিলম্ ","index":169,"img":{"05":"https://farm6.staticflickr.com/5468/7224593258_0e9abd886d.jpg","04":"https://farm6.staticflickr.com/5007/5280606066_885479e00a.jpg","03":"https://farm6.staticflickr.com/5179/5448164965_9a515718db.jpg","02":"https://farm6.staticflickr.com/5607/15366740527_e268ff98f2.jpg","01":"https://farm6.staticflickr.com/5109/5588223252_a410a52ef2.jpg"}},"he shaved his beard":{"english":"he shaved his beard","type":"verbs","bangla":"se tar dari poriskar kore silo","bLetters":"সএ টর্ ডরি পওরিস্কর্ কওরএ সিলও","index":171,"img":{"05":"https://farm9.staticflickr.com/8642/16102224583_2c47ca1641.jpg","04":"https://farm2.staticflickr.com/1069/3175246802_4b575d7fdf.jpg","03":"https://farm8.staticflickr.com/7389/9987796983_265ee948ab.jpg","02":"https://farm2.staticflickr.com/1034/3174495488_58e254ac28.jpg","01":"https://farm5.staticflickr.com/4029/4566775551_4c05a3a4f0.jpg"}},"it shrunk quickly":{"english":"it shrunk quickly","type":"verbs","bangla":"eta druto dube giyesilo","bLetters":"এট ড্রুটও ডুবএ গিযএসিলও","index":173,"img":{"05":"https://farm6.staticflickr.com/5095/5484332815_d368d86e7a.jpg","04":"https://farm9.staticflickr.com/8170/8060866765_9d71117857.jpg","03":"https://farm6.staticflickr.com/5601/15542595800_8ee208f5ee.jpg","02":"https://farm6.staticflickr.com/5031/6917695230_cbc2b5faff.jpg","01":"https://farm6.staticflickr.com/5451/7059960039_e3c57a7ea4.jpg"}},"we will sing it":{"english":"we will sing it","type":"verbs","bangla":"amora eha gaibo","bLetters":"অমওর এহ গঐবও","index":175,"img":{"05":"https://farm9.staticflickr.com/8136/8698414168_33da6e2a4a.jpg","04":"https://farm9.staticflickr.com/8552/8746948585_9c6441b713.jpg","03":"https://farm8.staticflickr.com/7293/8742916445_5d1bbb4886.jpg","02":"https://farm1.staticflickr.com/226/499358336_73cfa10955.jpg","01":"https://farm9.staticflickr.com/8120/8603322900_ab304caa73.jpg"}},"they sat there":{"english":"they sat there","type":"verbs","bangla":"tahara sekhane bose","bLetters":"টহর সএখনএ বওসএ","index":177,"img":{"05":"https://farm9.staticflickr.com/8022/7555262148_6a56532014.jpg","04":"https://farm1.staticflickr.com/184/462991079_2285253a39.jpg","03":"https://farm4.staticflickr.com/3575/3386695205_c030f795aa.jpg","02":"https://farm8.staticflickr.com/7517/15913849861_4c2d9b8a35.jpg","01":"https://farm2.staticflickr.com/1462/24516412170_b2a9cd525a.jpg"}},"I can speak it":{"english":"I can speak it","type":"verbs","bangla":"ami eha bolte pari","bLetters":"অমি এহ বওল্টএ পরি","index":179,"img":{"05":"https://farm7.staticflickr.com/6142/5929611299_1b5b36f024.jpg","04":"https://farm4.staticflickr.com/3776/18996940569_637237b85e.jpg","03":"https://farm8.staticflickr.com/7156/6824569373_bbfefab0ef.jpg","02":"https://farm4.staticflickr.com/3364/4631684149_92c0a8722f.jpg","01":"https://farm4.staticflickr.com/3183/2590305354_0c6d448358.jpg"}},"she spends money":{"english":"she spends money","type":"verbs","bangla":"she taka kharach korehiclo","bLetters":"শএ টক খরচ্ কওরএহিcলও","index":181,"img":{"05":"https://farm9.staticflickr.com/8392/8584537034_94c380a94a.jpg","04":"https://farm4.staticflickr.com/3852/14810748245_6dc713a003.jpg","03":"https://farm3.staticflickr.com/2803/4364584535_360bfb4c28.jpg","02":"https://farm4.staticflickr.com/3257/5703783486_87cf9bb6a1.jpg","01":"https://farm8.staticflickr.com/7233/7182543239_2281f4452e.jpg"}},"we suffered from that":{"english":"we suffered from that","type":"verbs","bangla":"amora eha hoite vugesilam","bLetters":"অমওর এহ হওইটএ বুগএসিলম্","index":183,"img":{"05":"https://farm5.staticflickr.com/4008/4249689441_76eefa55c5.jpg","04":"https://farm5.staticflickr.com/4091/5093569492_d1e4148a58.jpg","03":"https://farm2.staticflickr.com/1586/24539321399_58f543769f.jpg","02":"https://farm2.staticflickr.com/1546/24611458410_be3a86a997.jpg","01":"https://farm4.staticflickr.com/3348/3277004118_e6fdf39357.jpg"}},"they suggest that":{"english":"they suggest that","type":"verbs","bangla":"tahara eha nirdes koresilo","bLetters":"টহর এহ নির্ডএস্ কওরএসিলও","index":185,"img":{"05":"https://farm9.staticflickr.com/8412/8701570565_192a15101c.jpg","04":"https://farm6.staticflickr.com/5612/15595890912_b678e5e910.jpg","03":"https://farm7.staticflickr.com/6047/6303114563_6c5fceca13.jpg","02":"https://farm6.staticflickr.com/5458/8854915692_5203212b4a.jpg","01":"https://farm9.staticflickr.com/8312/8015205125_bb555d681a.jpg"}},"I surprised him":{"english":"I surprised him","type":"verbs","bangla":"ami  take aubak koresilam","bLetters":"অমি  টকএ ঔবক্ কওরএসিলম্","index":187,"img":{"05":"https://farm4.staticflickr.com/3073/5866823086_fe00c0b741.jpg","04":"https://farm8.staticflickr.com/7407/10325915465_27a191e5ca.jpg","03":"https://farm6.staticflickr.com/5134/5398224270_98081f5ebf.jpg","02":"https://farm4.staticflickr.com/3484/3203751461_7e953c4c4c.jpg","01":"https://farm2.staticflickr.com/1154/760558921_f7e1c36c52.jpg"}},"she took that":{"english":"she took that","type":"verbs","bangla":"se eha niyesilo","bLetters":"সএ এহ নিযএসিলও","index":189,"img":{"05":"https://farm8.staticflickr.com/7061/6887299967_dee93a8e33.jpg","04":"https://farm3.staticflickr.com/2804/4146041563_c607702c92.jpg","03":"https://farm3.staticflickr.com/2100/2517199977_e0cb994b2a.jpg","02":"https://farm4.staticflickr.com/3296/2850148173_0b8799edc1.jpg","01":"https://farm3.staticflickr.com/2882/9097018291_9704bae382.jpg"}},"we teach it":{"english":"we teach it","type":"verbs","bangla":"ami ate sekhabo","bLetters":"অমি অটএ সএখবও","index":191,"img":{"05":"https://farm4.staticflickr.com/3113/2881803527_fe1c18f2d0.jpg","04":"https://farm4.staticflickr.com/3265/2881803231_5d327a283b.jpg","03":"https://farm6.staticflickr.com/5167/5249146940_205aeab4d8.jpg","02":"https://farm3.staticflickr.com/2914/13986718712_92bfa68d6c.jpg","01":"https://farm6.staticflickr.com/5519/10637985075_9103b3e259.jpg"}},"they told us":{"english":"they told us","type":"verbs","bangla":"tahara amaderke bolesilo","bLetters":"টহর অমডএর্কএ বওলএসিলও","index":193,"img":{"05":"https://farm8.staticflickr.com/7158/6813300383_556c883a89.jpg","04":"https://farm3.staticflickr.com/2480/3940469591_f5f08d89fa.jpg","03":"https://farm4.staticflickr.com/3529/3936623421_4c302bf9c5.jpg","02":"https://farm3.staticflickr.com/2818/9904181405_7d2ed9b8a6.jpg","01":"https://farm9.staticflickr.com/8428/7808298636_81e907b982.jpg"}},"she thanked him":{"english":"she thanked him","type":"verbs","bangla":"se take dhonnobad diasilo","bLetters":"সএ টকএ দওন্নওবড্ ডিঅসিলও","index":195,"img":{"05":"https://farm4.staticflickr.com/3286/3156391028_eb121bd720.jpg","04":"https://farm4.staticflickr.com/3157/3099096433_efa43b82b9.jpg","03":"https://farm5.staticflickr.com/4068/4446580731_bcfe0a58ae.jpg","02":"https://farm4.staticflickr.com/3192/2611340780_85b4f7ba4f.jpg","01":"https://farm2.staticflickr.com/1202/893276788_9bdcb46291.jpg"}},"I can think about it":{"english":"I can think about it","type":"verbs","bangla":"ami uha somoporke vabte pari","bLetters":"অমি উহ সওমওপওর্কএ বব্টএ পরি","index":197,"img":{"05":"https://farm6.staticflickr.com/5603/15604473149_b50e642512.jpg","04":"https://farm6.staticflickr.com/5506/10522203154_b24566c54b.jpg","03":"https://farm8.staticflickr.com/7145/13830586165_18f312eb60.jpg","02":"https://farm1.staticflickr.com/382/20214795268_59b2c6e1a7.jpg","01":"https://farm9.staticflickr.com/8380/8632091219_bd8e837673.jpg"}},"she threw it":{"english":"she threw it","type":"verbs","bangla":"se ata nikkhep koresilo","bLetters":"সএ অট নিক্খএপ্ কওরএসিলও","index":199,"img":{"05":"https://farm5.staticflickr.com/4014/4474133407_b3455c18f8.jpg","04":"https://farm4.staticflickr.com/3382/3520951625_1a416479a6.jpg","03":"https://farm8.staticflickr.com/7177/7009916107_02cd2e6be6.jpg","02":"https://farm4.staticflickr.com/3594/3384544291_ea541da30a.jpg","01":"https://farm8.staticflickr.com/7513/16063703029_16d3a7a21a.jpg"}},"we understand that":{"english":"we understand that","type":"verbs","bangla":"amora uha bujhesilam","bLetters":"অমওর উহ বুঝএসিলম্","index":201,"img":{"05":"https://farm7.staticflickr.com/6147/6008444250_b74f07eb5b.jpg","04":"https://farm8.staticflickr.com/7295/10747300743_b65aac83d8.jpg","03":"https://farm8.staticflickr.com/7262/7592620962_57eefb9870.jpg","02":"https://farm2.staticflickr.com/1280/830995576_30491208cf.jpg","01":"https://farm2.staticflickr.com/1454/24132305706_91692c9ea3.jpg"}},"they want that":{"english":"they want that","type":"verbs","bangla":"tahara uha chyesilo","bLetters":"টহর উহ চ্যএসিলও","index":203,"img":{"05":"https://farm4.staticflickr.com/3532/3808003444_de561a5a46.jpg","04":"https://farm2.staticflickr.com/1239/1454147313_006c935d48.jpg","03":"https://farm7.staticflickr.com/6051/6231357464_572f1704e5.jpg","02":"https://farm9.staticflickr.com/8304/7876585350_fa2681d9c0.jpg","01":"https://farm1.staticflickr.com/33/64405770_93c819d37f.jpg"}},"I can wear it":{"english":"I can wear it","type":"verbs","bangla":"ami ata porte pari","bLetters":"অমি অট পওর্টএ পরি","index":205,"img":{"05":"https://farm4.staticflickr.com/3817/13890700146_21c0aea61d.jpg","04":"https://farm4.staticflickr.com/3496/3718368689_1c9e481f83.jpg","03":"https://farm6.staticflickr.com/5771/22231571962_8deb5437fd.jpg","02":"https://farm9.staticflickr.com/8658/16848266741_6c243706ee.jpg","01":"https://farm3.staticflickr.com/2752/4438024763_eb10558ecc.jpg"}},"she writes that":{"english":"she writes that","type":"verbs","bangla":"se eha likhesilo","bLetters":"সএ এহ লিখএসিলও","index":207,"img":{"05":"https://farm3.staticflickr.com/2090/2467517423_630f477297.jpg","04":"https://farm9.staticflickr.com/8327/8090733347_75ca6e919d.jpg","03":"https://farm4.staticflickr.com/3800/13872575133_0ddd463187.jpg","02":"https://farm4.staticflickr.com/3112/3187165914_834b281246.jpg","01":"https://farm7.staticflickr.com/6113/7022143185_0197bd76fd.jpg"}},"we talk about it":{"english":"we talk about it","type":"verbs","bangla":"amora eha somporke boli","bLetters":"অমওর এহ সওম্পওর্কএ বওলি","index":209,"img":{"05":"https://farm6.staticflickr.com/5008/5370273955_fbe40f216d.jpg","04":"https://farm8.staticflickr.com/7019/6546185043_0bf8e58ebf.jpg","03":"https://farm3.staticflickr.com/2123/2267597751_d6348a52b2.jpg","02":"https://farm1.staticflickr.com/41/84761459_3d2dba5c3d.jpg","01":"https://farm9.staticflickr.com/8187/8423164936_7ccccae8f4.jpg"}},"they have it":{"english":"they have it","type":"verbs","bangla":"tahara ase","bLetters":"টহর অসএ","index":211,"img":{"05":"https://farm8.staticflickr.com/7008/6447100219_7960eff8ba.jpg","04":"https://farm4.staticflickr.com/3023/2774641922_03c43dbbe7.jpg","03":"https://farm6.staticflickr.com/5109/5618885425_c62834e32a.jpg","02":"https://farm8.staticflickr.com/7094/7271245964_1c8f630d04.jpg","01":"https://farm8.staticflickr.com/7365/9099720682_9779e21a3c.jpg"}},"I watched it":{"english":"I watched it","type":"verbs","bangla":"amora ata dekhbo","bLetters":"অমওর অট ডএখ্বও","index":213,"img":{"05":"https://farm7.staticflickr.com/6160/6186050257_ec3d6b7c6e.jpg","04":"https://farm9.staticflickr.com/8734/17189585071_ef800c2ed4.jpg","03":"https://farm4.staticflickr.com/3398/3430561889_b6c28e83b4.jpg","02":"https://farm8.staticflickr.com/7361/16363628155_ece09d6786.jpg","01":"https://farm8.staticflickr.com/7356/8809495350_c17160d7f7.jpg"}},"I will talk about it":{"english":"I will talk about it","type":"verbs","bangla":"ami uha somporke bolbo","bLetters":"অমি উহ সওম্পওর্কএ বওল্বও","index":215,"img":{"05":"https://farm4.staticflickr.com/3534/3748312848_22bbe55528.jpg","04":"https://farm4.staticflickr.com/3432/4000112538_12b0799da5.jpg","03":"https://farm2.staticflickr.com/1301/5181295979_8f7c42774e.jpg","02":"https://farm4.staticflickr.com/3239/3131748634_1d1c83a9ac.jpg","01":"https://farm4.staticflickr.com/3206/2307393291_b07fc603f5.jpg"}},"he bought that yesterday":{"english":"he bought that yesterday","type":"verbs","bangla":"se eha gotokal kinesilo","bLetters":"সএ এহ গওটওকল্ কিনএসিলও","index":217,"img":{"05":"https://farm9.staticflickr.com/8647/15403489133_d736334674.jpg","04":"https://farm8.staticflickr.com/7423/13062221124_01d23e544e.jpg","03":"https://farm9.staticflickr.com/8092/8532364248_fc00de4795.jpg","02":"https://farm4.staticflickr.com/3393/3573974128_09493ed561.jpg","01":"https://farm9.staticflickr.com/8620/15995883568_982fb4162e.jpg"}},"we finished it":{"english":"we finished it","type":"verbs","bangla":"amora ata ses korbo","bLetters":"অমওর অট সএস্ কওর্বও","index":219,"img":{"05":"https://farm8.staticflickr.com/7438/11354407506_86442f6b26.jpg","04":"https://farm1.staticflickr.com/516/19460683792_e9327db621.jpg","03":"https://farm9.staticflickr.com/8763/17380794280_b3e725da0a.jpg","02":"https://farm4.staticflickr.com/3057/2876345048_b745800699.jpg","01":"https://farm8.staticflickr.com/7440/16175362568_77d157c6cf.jpg"}}},"food":{"Food":{"english":"Food","type":"food","bangla":"khabar","bLetters":"&#x996;&#x9AC;&#x9B0;&#x9CD;","index":0,"img":{"05":"https://farm8.staticflickr.com/7312/13441105255_41d04195f3.jpg","04":"https://farm4.staticflickr.com/3667/10711785893_4dec83578e.jpg","03":"https://farm6.staticflickr.com/5321/17898720712_706d66a9d6.jpg","02":"https://farm6.staticflickr.com/5491/9192252862_96bb9b6027.jpg","01":"https://farm3.staticflickr.com/2557/3891554755_2d0c6a1384.jpg"}},"bread":{"english":"bread","type":"food","bangla":"ruti","bLetters":"&#x9B0;&#x9C1;&#x99F;&#x9BF;","index":1,"img":{"05":"https://farm4.staticflickr.com/3388/3626265280_5dfc7a57ab.jpg","04":"https://farm4.staticflickr.com/3327/3626263984_f75ee9d5c3.jpg","03":"https://farm9.staticflickr.com/8344/8215697626_9499b49d15.jpg","02":"https://farm5.staticflickr.com/4043/4637967212_de40750af8.jpg","01":"https://farm9.staticflickr.com/8148/7298425240_ae74ba6afa.jpg"}},"cheese":{"english":"cheese","type":"food","bangla":"ponir","bLetters":"&#x9AA;&#x993;&#x9A8;&#x9BF;&#x9B0;&#x9CD;","index":2,"img":{"05":"https://farm8.staticflickr.com/7537/15912612571_30a71d8196.jpg","04":"https://farm3.staticflickr.com/2096/2039233835_5fe5253bdc.jpg","03":"https://farm5.staticflickr.com/4140/4926366907_bc7c7da571.jpg","02":"https://farm1.staticflickr.com/2/1521988_d367cb661e.jpg","01":"https://farm1.staticflickr.com/172/371261454_840b45641e.jpg"}},"meat":{"english":"meat","type":"food","bangla":"mangso","bLetters":"&#x9AE;&#x9A8;&#x9CD;&#x997;&#x9CD;&#x9B8;&#x993;","index":3,"img":{"05":"https://farm4.staticflickr.com/3228/2505225187_330c950e92.jpg","04":"https://farm3.staticflickr.com/2316/2202561224_323c739caa.jpg","03":"https://farm6.staticflickr.com/5314/14394842514_fea6f11c00.jpg","02":"https://farm3.staticflickr.com/2284/2179078834_867b1c3c1e.jpg","01":"https://farm3.staticflickr.com/2147/2447768052_8b765676d8.jpg"}},"chicken":{"english":"chicken","type":"food","bangla":"murgir bassa","bLetters":"&#x9AE;&#x9C1;&#x9B0;&#x9CD;&#x997;&#x9BF;&#x9B0;&#x9CD; &#x9AC;&#x9B8;&#x9CD;&#x9B8;","index":4,"img":{"05":"https://farm2.staticflickr.com/1200/1472348232_3545d53571.jpg","04":"https://farm4.staticflickr.com/3258/2720948490_b518c62cc9.jpg","03":"https://farm3.staticflickr.com/2574/3994252786_14fa855445.jpg","02":"https://farm8.staticflickr.com/7147/6670085437_c93b69700c.jpg","01":"https://farm3.staticflickr.com/2064/2149660950_8c21ccda8b.jpg"}},"fish":{"english":"fish","type":"food","bangla":"mass","bLetters":"&#x9AE;&#x9B8;&#x9CD;&#x9B8;&#x9CD;","index":5,"img":{"05":"https://farm8.staticflickr.com/7381/11950139756_ac2335b913.jpg","04":"https://farm3.staticflickr.com/2841/11949308385_99b33201be.jpg","03":"https://farm3.staticflickr.com/2884/11949607823_4459e20cd1.jpg","02":"https://farm6.staticflickr.com/5513/11949310415_e40b8a4a7e.jpg","01":"https://farm8.staticflickr.com/7025/6766738403_af9beb5368.jpg"}},"sandwich":{"english":"sandwich","type":"food","bangla":"fast food jatio khabarf","bLetters":"f&#x985;&#x9B8;&#x9CD;&#x99F;&#x9CD; f&#x98A;&#x9A1;&#x9CD; &#x99C;&#x99F;&#x9BF;&#x993; &#x996;&#x9AC;&#x9B0;&#x9CD;","index":6,"img":{"05":"https://farm4.staticflickr.com/3270/2312382751_7fa943dbef.jpg","04":"https://farm8.staticflickr.com/7008/6798997671_6d751bfbb8.jpg","03":"https://farm5.staticflickr.com/4083/5123596413_b9fbd05f4e.jpg","02":"https://farm4.staticflickr.com/3907/15188986635_a3aecde2e2.jpg","01":"https://farm3.staticflickr.com/2248/2451527936_2cb87da32d.jpg"}},"salad":{"english":"salad","type":"food","bangla":"sobjir misron","bLetters":"&#x9B8;&#x993;&#x9AC;&#x9CD;&#x99C;&#x9BF;&#x9B0;&#x9CD; &#x9AE;&#x9BF;&#x9B8;&#x9CD;&#x9B0;&#x993;&#x9A8;&#x9CD;","index":7,"img":{"05":"https://farm5.staticflickr.com/4140/4794588293_3471a38f63.jpg","04":"https://farm3.staticflickr.com/2766/4272596276_62f1e8797d.jpg","03":"https://farm4.staticflickr.com/3007/2982492338_29df97e510.jpg","02":"https://farm4.staticflickr.com/3270/2661469645_6cfdb70558.jpg","01":"https://farm5.staticflickr.com/4046/4522605859_11b7019e30.jpg"}},"salt":{"english":"salt","type":"food","bangla":"lobon","bLetters":"&#x9B2;&#x993;&#x9AC;&#x993;&#x9A8;&#x9CD;","index":8,"img":{"05":"https://farm4.staticflickr.com/3109/2850748902_74a166fe69.jpg","04":"https://farm1.staticflickr.com/186/478297714_33e2c8157a.jpg","03":"https://farm5.staticflickr.com/4098/4812611934_448af23196.jpg","02":"https://farm1.staticflickr.com/276/18679191831_f5cc87d504.jpg","01":"https://farm3.staticflickr.com/2703/4246252627_5ab583c27a.jpg"}},"candy":{"english":"candy","type":"food","bangla":"logence","bLetters":"&#x9B2;&#x993;&#x997;&#x98F;&#x9A8;&#x9CD;c&#x98F;","index":9,"img":{"05":"https://farm9.staticflickr.com/8440/7949252386_99d088a671.jpg","04":"https://farm8.staticflickr.com/7369/15951554764_effb3b86d3.jpg","03":"https://farm3.staticflickr.com/2946/15316707450_aa9bbc9459.jpg","02":"https://farm9.staticflickr.com/8647/15898119263_3e6ff25aa0.jpg","01":"https://farm2.staticflickr.com/1297/544434077_4f3a92872b.jpg"}},"fruit":{"english":"fruit","type":"food","bangla":"folf","bLetters":"f&#x993;&#x9B2;&#x9CD;","index":10,"img":{"05":"https://farm6.staticflickr.com/5117/5818218615_c4ce37a65a.jpg","04":"https://farm8.staticflickr.com/7618/17145373376_97f86a16d7.jpg","03":"https://farm4.staticflickr.com/3188/2946491125_8dcd767823.jpg","02":"https://farm4.staticflickr.com/3347/3508869880_a7ea8d554a.jpg","01":"https://farm5.staticflickr.com/4053/4397728418_ae17f9f739.jpg"}},"apple":{"english":"apple","type":"food","bangla":"apple, ak jation fol","bLetters":"&#x985;&#x9AA;&#x9CD;&#x9AA;&#x9CD;&#x9B2;&#x98F;, &#x985;&#x995;&#x9CD; &#x99C;&#x99F;&#x9BF;&#x993;&#x9A8;&#x9CD; f&#x993;&#x9B2;&#x9CD;","index":11,"img":{"05":"https://farm4.staticflickr.com/3906/15143044179_3815e2ed1c.jpg","04":"https://farm7.staticflickr.com/6163/6186159694_5b57c775c2.jpg","03":"https://farm9.staticflickr.com/8051/8104852184_d3980ec3f8.jpg","02":"https://farm8.staticflickr.com/7339/10414265306_e07208ab78.jpg","01":"https://farm4.staticflickr.com/3002/2899950676_3cb82a4c88.jpg"}}},"body":{"head":{"english":"head","type":"body","bangla":"matha","bLetters":"&#x9AE;&#x9A4;","index":0,"img":{"05":"https://farm9.staticflickr.com/8847/18132183294_32b8db86b9.jpg","04":"https://farm4.staticflickr.com/3122/5837316978_1f84e58f00.jpg","03":"https://farm1.staticflickr.com/103/309957939_1e6a4df77a.jpg","02":"https://farm4.staticflickr.com/3949/15502697046_7d66392ec2.jpg","01":"https://farm4.staticflickr.com/3653/3671724045_46c33b6464.jpg"}},"face":{"english":"face","type":"body","bangla":"mukho mondol","bLetters":"&#x9AE;&#x9C1;&#x996;&#x993; &#x9AE;&#x993;&#x9A8;&#x9CD;&#x9A1;&#x993;&#x9B2;&#x9CD;","index":1,"img":{"05":"https://farm4.staticflickr.com/3451/3969808024_ddac8069ed.jpg","04":"https://farm6.staticflickr.com/5275/5909392913_7e07d0fac8.jpg","03":"https://farm8.staticflickr.com/7066/6942713273_6722289cc3.jpg","02":"https://farm1.staticflickr.com/3/4544308396_1039a9f6dd.jpg","01":"https://farm9.staticflickr.com/8187/8372455515_3d8d49ff67.jpg"}},"hair":{"english":"hair","type":"body","bangla":"chul","bLetters":"&#x99A;&#x9C1;&#x9B2;&#x9CD;","index":2,"img":{"05":"https://farm4.staticflickr.com/3009/2993791542_efbb4e3a45.jpg","04":"https://farm4.staticflickr.com/3328/3180504907_b0f480f9a6.jpg","03":"https://farm6.staticflickr.com/5297/5404429317_17958cd3fd.jpg","02":"https://farm7.staticflickr.com/6013/6018710631_bb927c62ae.jpg","01":"https://farm3.staticflickr.com/2191/2292386676_f8ce3baf50.jpg"}},"eye":{"english":"eye","type":"body","bangla":"chok","bLetters":"&#x99A;&#x993;&#x995;&#x9CD;","index":3,"img":{"05":"https://farm6.staticflickr.com/5139/5571780437_a19d89c60f.jpg","04":"https://farm9.staticflickr.com/8202/8203965770_7f08771200.jpg","03":"https://farm8.staticflickr.com/7501/15763580736_3b953c88a5.jpg","02":"https://farm4.staticflickr.com/3073/2555820658_028c7d0879.jpg","01":"https://farm4.staticflickr.com/3637/3526477106_b657abf447.jpg"}},"ear":{"english":"ear","type":"body","bangla":"kan","bLetters":"&#x995;&#x9A8;&#x9CD;","index":4,"img":{"05":"https://farm1.staticflickr.com/263/19221096718_cf74ce25a1.jpg","04":"https://farm6.staticflickr.com/5345/9925068926_8e71fe628e.jpg","03":"https://farm8.staticflickr.com/7708/17078045406_55b055489f.jpg","02":"https://farm8.staticflickr.com/7363/16355451372_faa77d1ce5.jpg","01":"https://farm5.staticflickr.com/4057/4524234540_dd4d631ef5.jpg"}},"nose":{"english":"nose","type":"body","bangla":"nak","bLetters":"&#x9A8;&#x995;&#x9CD;","index":5,"img":{"05":"https://farm2.staticflickr.com/1289/4688091144_be49335107.jpg","04":"https://farm4.staticflickr.com/3061/2920329820_7dfaa74487.jpg","03":"https://farm8.staticflickr.com/7608/16762794182_c017763aa1.jpg","02":"https://farm4.staticflickr.com/3565/3351202310_5bc5c4a46e.jpg","01":"https://farm2.staticflickr.com/1001/524453330_86472e09db.jpg"}},"mouth":{"english":"mouth","type":"body","bangla":"mukh","bLetters":"&#x9AE;&#x9C1;&#x996;&#x9CD;","index":6,"img":{"05":"https://farm5.staticflickr.com/4030/4230136300_96bc2b973f.jpg","04":"https://farm9.staticflickr.com/8615/16774697785_39abcd7a6e.jpg","03":"https://farm1.staticflickr.com/68/166111400_52005954d2.jpg","02":"https://farm1.staticflickr.com/40/85715536_20682a9522.jpg","01":"https://farm3.staticflickr.com/2540/4229367651_1ed31d0b2a.jpg"}},"tooth":{"english":"tooth","type":"body","bangla":"dnat gulo","bLetters":"&#x9A1;&#x9CD;&#x9A8;&#x99F;&#x9CD; &#x997;&#x9C1;&#x9B2;&#x993;","index":7,"img":{"05":"https://farm9.staticflickr.com/8594/16403798519_f122f8c1b4.jpg","04":"https://farm4.staticflickr.com/3117/2767565586_af5df0e26f.jpg","03":"https://farm4.staticflickr.com/3310/4588253473_11ed151c03.jpg","02":"https://farm3.staticflickr.com/2882/11338663515_e67413e607.jpg","01":"https://farm8.staticflickr.com/7327/11338789863_b29a192c91.jpg"}},"arm":{"english":"arm","type":"body","bangla":"bahu","bLetters":"&#x9AC;&#x9B9;&#x9C1;","index":8,"img":{"05":"https://farm9.staticflickr.com/8540/8688054356_1d6e33ee95.jpg","04":"https://farm3.staticflickr.com/2265/2525191806_c7f3227263.jpg","03":"https://farm6.staticflickr.com/5254/5473066399_b5d72f6c62.jpg","02":"https://farm8.staticflickr.com/7069/6924315677_d3be2768e9.jpg","01":"https://farm4.staticflickr.com/3149/2632209784_d6e474d154.jpg"}},"hand":{"english":"hand","type":"body","bangla":"hat","bLetters":"&#x9B9;&#x99F;&#x9CD;","index":9,"img":{"05":"https://farm4.staticflickr.com/3441/3388331442_c477be20fb.jpg","04":"https://farm7.staticflickr.com/6174/6152313839_eef4f64119.jpg","03":"https://farm7.staticflickr.com/6186/6067343866_0a9ea136f8.jpg","02":"https://farm6.staticflickr.com/5469/8881312229_16ffc6098f.jpg","01":"https://farm1.staticflickr.com/170/482004911_339bb4253f.jpg"}},"heart":{"english":"heart","type":"body","bangla":"hridoy","bLetters":"&#x9B9;&#x9CD;&#x9B0;&#x9BF;&#x9A1;&#x993;&#x9AF;&#x9CD;","index":10,"img":{"05":"https://farm3.staticflickr.com/2590/4132914776_431f590ce5.jpg","04":"https://farm1.staticflickr.com/1/2226224_ee95b1c82c.jpg","03":"https://farm2.staticflickr.com/1571/24537786222_5202023e5f.jpg","02":"https://farm1.staticflickr.com/684/21708855774_6f3ab0faf1.jpg","01":"https://farm2.staticflickr.com/1142/3267527244_51822dc5b9.jpg"}},"stomach":{"english":"stomach","type":"body","bangla":"pakostholi","bLetters":"&#x9AA;&#x995;&#x993;&#x9B8;&#x9CD;&#x9A4;&#x993;&#x9B2;&#x9BF;","index":11,"img":{"05":"https://farm1.staticflickr.com/100/310255646_1132217a9a.jpg","04":"https://farm4.staticflickr.com/3127/2856940123_3059a93981.jpg","03":"https://farm1.staticflickr.com/101/310255050_278808d3bf.jpg","02":"https://farm4.staticflickr.com/3070/2796074953_c77008a7a9.jpg","01":"https://farm4.staticflickr.com/3232/2723543040_42644e583d.jpg"}},"leg":{"english":"leg","type":"body","bangla":"pa","bLetters":"&#x9AA;","index":12,"img":{"05":"https://farm4.staticflickr.com/3953/15112869174_fc40040d35.jpg","04":"https://farm7.staticflickr.com/6027/5930840002_8edbdc4803.jpg","03":"https://farm4.staticflickr.com/3454/3386667055_dc814421f9.jpg","02":"https://farm9.staticflickr.com/8024/7666816086_10b9984dc1.jpg","01":"https://farm8.staticflickr.com/7451/16306074199_29faf2b9c8.jpg"}},"foot":{"english":"foot","type":"body","bangla":"payer pata","bLetters":"&#x9AA;&#x9AF;&#x98F;&#x9B0;&#x9CD; &#x9AA;&#x99F;","index":13,"img":{"05":"https://farm4.staticflickr.com/3289/2945702249_8e988ac05b.jpg","04":"https://farm4.staticflickr.com/3098/2361692138_cb1dff3ca5.jpg","03":"https://farm3.staticflickr.com/2086/1496532835_78b291dd8b.jpg","02":"https://farm5.staticflickr.com/4064/4549363124_68d5ff0c73.jpg","01":"https://farm5.staticflickr.com/4041/4190708352_2bee4e527b.jpg"}}},"nature":{"beach":{"english":"beach","type":"nature","bangla":"sagorer upokul","bLetters":"&#x9B8;&#x997;&#x993;&#x9B0;&#x98F;&#x9B0;&#x9CD; &#x989;&#x9AA;&#x993;&#x995;&#x9C1;&#x9B2;&#x9CD;","index":0,"img":{"05":"https://farm8.staticflickr.com/7031/6779479599_c8b11ed636.jpg","04":"https://farm6.staticflickr.com/5522/9078334359_6bdaf7466a.jpg","03":"https://farm9.staticflickr.com/8549/8710052788_0c55624f48.jpg","02":"https://farm8.staticflickr.com/7259/7655022536_9d51e82f39.jpg","01":"https://farm9.staticflickr.com/8638/15478063854_c1dded1972.jpg"}},"island":{"english":"island","type":"nature","bangla":"iland akti desher name","bLetters":"&#x987;&#x9B2;&#x9A8;&#x9CD;&#x9A1;&#x9CD; &#x985;&#x995;&#x9CD;&#x99F;&#x9BF; &#x9A1;&#x98F;&#x9B6;&#x98F;&#x9B0;&#x9CD; &#x9A8;&#x9AE;&#x98F;","index":1,"img":{"05":"https://farm8.staticflickr.com/7568/15335698034_c4885541c7.jpg","04":"https://farm5.staticflickr.com/4047/4383359524_f73ce302a0.jpg","03":"https://farm8.staticflickr.com/7453/13903823750_c91770879b.jpg","02":"https://farm9.staticflickr.com/8028/7543996230_95f58efe81.jpg","01":"https://farm8.staticflickr.com/7452/8866517467_7aa4d46c76.jpg"}},"desert":{"english":"desert","type":"nature","bangla":"moruvumi","bLetters":"&#x9AE;&#x993;&#x9B0;&#x9C1;&#x9AC;&#x9C1;&#x9AE;&#x9BF;","index":2,"img":{"05":"https://farm9.staticflickr.com/8154/7179847951_1e25e9d7e8.jpg","04":"https://farm4.staticflickr.com/3365/3279707300_3fdee4a53a.jpg","03":"https://farm8.staticflickr.com/7463/16245166436_04075e233b.jpg","02":"https://farm8.staticflickr.com/7568/16147652341_1c77a5bee0.jpg","01":"https://farm3.staticflickr.com/2501/4195060100_01dc46f7dc.jpg"}},"mountain":{"english":"mountain","type":"nature","bangla":"porbot","bLetters":"&#x9AA;&#x993;&#x9B0;&#x9CD;&#x9AC;&#x993;&#x99F;&#x9CD;","index":3,"img":{"05":"https://farm6.staticflickr.com/5530/9576346296_1db9a70ebc.jpg","04":"https://farm9.staticflickr.com/8219/8286657525_a6a0ce78e4.jpg","03":"https://farm8.staticflickr.com/7122/7430524528_19b36ea82a.jpg","02":"https://farm8.staticflickr.com/7567/16079165929_e650456a8c.jpg","01":"https://farm2.staticflickr.com/1502/24192358620_3319269cc3.jpg"}},"forest":{"english":"forest","type":"nature","bangla":"boan","bLetters":"&#x9AC;&#x993;&#x985;&#x9A8;&#x9CD;","index":4,"img":{"05":"https://farm3.staticflickr.com/2810/13781208954_c1aea5530d.jpg","04":"https://farm9.staticflickr.com/8669/15501461804_66373b950f.jpg","03":"https://farm1.staticflickr.com/454/19080460599_aceb50a1f6.jpg","02":"https://farm8.staticflickr.com/7087/7344444750_5c3194e244.jpg","01":"https://farm4.staticflickr.com/3858/15164479128_89bfe1fa7e.jpg"}},"tree":{"english":"tree","type":"nature","bangla":"gas, gasali,","bLetters":"&#x997;&#x9B8;&#x9CD;, &#x997;&#x9B8;&#x9B2;&#x9BF;,","index":5,"img":{"05":"https://farm4.staticflickr.com/3862/14925223160_00cd1d55c6.jpg","04":"https://farm4.staticflickr.com/3669/13337678125_0b7c72a556.jpg","03":"https://farm4.staticflickr.com/3311/3256561337_dd02fe020d.jpg","02":"https://farm8.staticflickr.com/7294/11211131613_3d2bcaed0c.jpg","01":"https://farm7.staticflickr.com/6016/5949819558_47a5117548.jpg"}},"flowers":{"english":"flowers","type":"nature","bangla":"ful gulof","bLetters":"f&#x989;&#x9B2;&#x9CD; &#x997;&#x9C1;&#x9B2;&#x993;","index":6,"img":{"05":"https://farm9.staticflickr.com/8522/8534950377_465382c334.jpg","04":"https://farm8.staticflickr.com/7681/17127216652_1b77a1aea3.jpg","03":"https://farm4.staticflickr.com/3922/15045568809_b24591e318.jpg","02":"https://farm4.staticflickr.com/3834/10071201363_96442df70c.jpg","01":"https://farm9.staticflickr.com/8653/16007581853_121863f2f1.jpg"}},"garden":{"english":"garden","type":"nature","bangla":"bagan","bLetters":"&#x9AC;&#x997;&#x9A8;&#x9CD;","index":7,"img":{"05":"https://farm7.staticflickr.com/6052/6363665387_3b0a46882d.jpg","04":"https://farm9.staticflickr.com/8095/8599097835_9fd55d1b69.jpg","03":"https://farm3.staticflickr.com/2864/10160030483_cb6ffcfc0c.jpg","02":"https://farm5.staticflickr.com/4036/4693531969_01a560f437.jpg","01":"https://farm9.staticflickr.com/8794/16880573923_3d47a46187.jpg"}},"river":{"english":"river","type":"nature","bangla":"nodi","bLetters":"&#x9A8;&#x993;&#x9A1;&#x9BF;","index":8,"img":{"05":"https://farm7.staticflickr.com/6041/6869475992_56138e8687.jpg","04":"https://farm9.staticflickr.com/8255/8663633743_761c14bcaf.jpg","03":"https://farm8.staticflickr.com/7475/15767200168_f36f3bc883.jpg","02":"https://farm6.staticflickr.com/5603/15576021456_ce99edabed.jpg","01":"https://farm4.staticflickr.com/3174/2953029331_dd6c574838.jpg"}},"lake":{"english":"lake","type":"nature","bangla":"ovab","bLetters":"&#x993;&#x9AC;&#x9AC;&#x9CD;","index":9,"img":{"05":"https://farm8.staticflickr.com/7252/7747441598_7fcaf25025.jpg","04":"https://farm9.staticflickr.com/8184/8145281281_75407e0518.jpg","03":"https://farm3.staticflickr.com/2102/2105990078_8ffc9b912a.jpg","02":"https://farm9.staticflickr.com/8220/8308906606_58040bf42e.jpg","01":"https://farm8.staticflickr.com/7094/7374439340_fe7e0c577e.jpg"}},"sea":{"english":"sea","type":"nature","bangla":"somudro","bLetters":"&#x9B8;&#x993;&#x9AE;&#x9C1;&#x9A1;&#x9CD;&#x9B0;&#x993;","index":10,"img":{"05":"https://farm9.staticflickr.com/8683/16357156737_1f5589a18b.jpg","04":"https://farm6.staticflickr.com/5061/5843945261_1b985d9409.jpg","03":"https://farm3.staticflickr.com/2895/14662466586_c72afe7933.jpg","02":"https://farm6.staticflickr.com/5534/10096627625_0482e12ba5.jpg","01":"https://farm4.staticflickr.com/3836/14499517289_ab6723c4f1.jpg"}},"sky":{"english":"sky","type":"nature","bangla":"akash","bLetters":"&#x985;&#x995;&#x9B6;&#x9CD;","index":11,"img":{"05":"https://farm8.staticflickr.com/7585/16672131948_3c67c4e055.jpg","04":"https://farm8.staticflickr.com/7300/16425242941_639a8c7844.jpg","03":"https://farm4.staticflickr.com/3896/15284453556_7269ef613b.jpg","02":"https://farm9.staticflickr.com/8679/16295078372_068cde0096.jpg","01":"https://farm6.staticflickr.com/5488/10298492824_bf52c534cd.jpg"}},"stars":{"english":"stars","type":"nature","bangla":"taroka gulo","bLetters":"&#x99F;&#x9B0;&#x993;&#x995; &#x997;&#x9C1;&#x9B2;&#x993;","index":12,"img":{"05":"https://farm6.staticflickr.com/5601/15459954198_25943c4242.jpg","04":"https://farm9.staticflickr.com/8116/9010251505_9a53a77526.jpg","03":"https://farm8.staticflickr.com/7619/17210849885_bda04bf6e3.jpg","02":"https://farm6.staticflickr.com/5808/23731587305_faa8d16215.jpg","01":"https://farm9.staticflickr.com/8686/17004434418_f3c3a4688e.jpg"}},"moon":{"english":"moon","type":"nature","bangla":"chnad, chad","bLetters":"&#x99A;&#x9CD;&#x9A8;&#x9A1;&#x9CD;, &#x99A;&#x9A1;&#x9CD;","index":13,"img":{"05":"https://farm1.staticflickr.com/430/20016711981_a1cbeca69d.jpg","04":"https://farm4.staticflickr.com/3918/15005422497_bc2169dbd7.jpg","03":"https://farm1.staticflickr.com/317/20181111042_e342be75ca.jpg","02":"https://farm2.staticflickr.com/1508/23850190071_49142dffd2.jpg","01":"https://farm1.staticflickr.com/578/21754912056_4cb04b26b1.jpg"}},"earth":{"english":"earth","type":"nature","bangla":"prithibi","bLetters":"&#x9AA;&#x9CD;&#x9B0;&#x9BF;&#x9A4;&#x9BF;&#x9AC;&#x9BF;","index":14,"img":{"05":"https://farm8.staticflickr.com/7185/6780203262_e729f8253b.jpg","04":"https://farm3.staticflickr.com/2567/3717759677_4a520a1dbb.jpg","03":"https://farm3.staticflickr.com/2266/4542598720_1fc24d3e4f.jpg","02":"https://farm3.staticflickr.com/2936/14297320475_ae22719b14.jpg","01":"https://farm6.staticflickr.com/5561/14110662330_7eefe4c8b3.jpg"}}},"places":{"pharmacy":{"english":"pharmacy","type":"places","bangla":"ousodher dokan","bLetters":"&#x993;&#x989;&#x9B8;&#x993;&#x9A6;&#x98F;&#x9B0;&#x9CD; &#x9A1;&#x993;&#x995;&#x9A8;&#x9CD;","index":0,"img":{"05":"https://farm3.staticflickr.com/2675/4117138841_e6e5b758cd.jpg","04":"https://farm3.staticflickr.com/2372/2249856700_ecc9f49fbf.jpg","03":"https://farm6.staticflickr.com/5216/5489242824_3404052574.jpg","02":"https://farm3.staticflickr.com/2522/4121148000_4c73b4cdcd.jpg","01":"https://farm7.staticflickr.com/6240/6257718014_77e529239c.jpg"}},"restaurant":{"english":"restaurant","type":"places","bangla":"khabarer dokan","bLetters":"&#x996;&#x9AC;&#x9B0;&#x98F;&#x9B0;&#x9CD; &#x9A1;&#x993;&#x995;&#x9A8;&#x9CD;","index":1,"img":{"05":"https://farm8.staticflickr.com/7023/6511303073_058959d5cf.jpg","04":"https://farm9.staticflickr.com/8020/7553734362_cc895b9670.jpg","03":"https://farm4.staticflickr.com/3823/12680142033_26f25fd155.jpg","02":"https://farm2.staticflickr.com/1715/24319831530_b738924180.jpg","01":"https://farm7.staticflickr.com/6099/6367973937_7ce9715c7f.jpg"}},"house":{"english":"house","type":"places","bangla":"bari","bLetters":"&#x9AC;&#x9B0;&#x9BF;","index":2,"img":{"05":"https://farm9.staticflickr.com/8528/8638854596_0fe1696062.jpg","04":"https://farm4.staticflickr.com/3276/2805074275_90e7b66777.jpg","03":"https://farm3.staticflickr.com/2307/2105991752_cc151b3190.jpg","02":"https://farm8.staticflickr.com/7407/16558456632_ed8271f82b.jpg","01":"https://farm8.staticflickr.com/7239/7344446848_09dc3fe626.jpg"}},"room":{"english":"room","type":"places","bangla":"soto ghor","bLetters":"&#x9B8;&#x993;&#x99F;&#x993; &#x998;&#x993;&#x9B0;&#x9CD;","index":3,"img":{"05":"https://farm2.staticflickr.com/1031/881292177_9e5a536a61.jpg","04":"https://farm3.staticflickr.com/2607/3922038423_6b844586b3.jpg","03":"https://farm3.staticflickr.com/2905/14369304040_425e7a65e1.jpg","02":"https://farm9.staticflickr.com/8700/17493625396_896181f043.jpg","01":"https://farm8.staticflickr.com/7156/6751236525_b3c9556b6e.jpg"}},"bathroom":{"english":"bathroom","type":"places","bangla":"gosol khana","bLetters":"&#x997;&#x993;&#x9B8;&#x993;&#x9B2;&#x9CD; &#x996;&#x9A8;","index":4,"img":{"05":"https://farm3.staticflickr.com/2164/3535653325_f8d31e0d67.jpg","04":"https://farm3.staticflickr.com/2021/2466819324_2d3edcbe60.jpg","03":"https://farm6.staticflickr.com/5299/5465330544_08f65e5e52.jpg","02":"https://farm9.staticflickr.com/8306/8007901628_d5168cbaba.jpg","01":"https://farm3.staticflickr.com/2095/2086365849_1413497b16.jpg"}},"toilet":{"english":"toilet","type":"places","bangla":"paykhana","bLetters":"&#x9AA;&#x9AF;&#x9CD;&#x996;&#x9A8;","index":5,"img":{"05":"https://farm8.staticflickr.com/7340/8791383717_0815f9d001.jpg","04":"https://farm8.staticflickr.com/7282/8843607169_07cd30239a.jpg","03":"https://farm8.staticflickr.com/7389/8844460014_f0b3dc0af7.jpg","02":"https://farm8.staticflickr.com/7717/17149036881_9e368f613a.jpg","01":"https://farm1.staticflickr.com/89/241563205_4aeab6998f.jpg"}},"bedroom":{"english":"bedroom","type":"places","bangla":"sowar ghor","bLetters":"&#x9B8;&#x993;w&#x985;&#x9B0;&#x9CD; &#x998;&#x993;&#x9B0;&#x9CD;","index":6,"img":{"05":"https://farm4.staticflickr.com/3264/2797139381_5dca6b0d7a.jpg","04":"https://farm5.staticflickr.com/4102/4909854396_94b1a23654.jpg","03":"https://farm6.staticflickr.com/5256/5558355698_3e265008f9.jpg","02":"https://farm3.staticflickr.com/2650/3978424055_50a8040aa7.jpg","01":"https://farm4.staticflickr.com/3587/3426964503_5d03cb608f.jpg"}},"kitchen":{"english":"kitchen","type":"places","bangla":"ranna ghar","bLetters":"&#x9B0;&#x9A8;&#x9CD;&#x9A8; &#x998;&#x9B0;&#x9CD;","index":7,"img":{"05":"https://farm2.staticflickr.com/1340/1336091819_bf2a2abb61.jpg","04":"https://farm5.staticflickr.com/4086/5125564910_21f7aca2b3.jpg","03":"https://farm5.staticflickr.com/4101/4749772029_0e1cd96b93.jpg","02":"https://farm5.staticflickr.com/4028/4575816410_87436a92d3.jpg","01":"https://farm5.staticflickr.com/4077/4934853948_8985e8884f.jpg"}},"floor":{"english":"floor","type":"places","bangla":"tola, mejhe","bLetters":"&#x99F;&#x993;&#x9B2;, &#x9AE;&#x98F;&#x99D;&#x98F;","index":8,"img":{"05":"https://farm3.staticflickr.com/2176/2301405501_99eecd8c93.jpg","04":"https://farm8.staticflickr.com/7295/16259549949_c9eb00614b.jpg","03":"https://farm8.staticflickr.com/7017/6457907969_321cda5d09.jpg","02":"https://farm3.staticflickr.com/2624/4195129951_a6566e5b7a.jpg","01":"https://farm9.staticflickr.com/8003/6959974636_a7dbf60b2f.jpg"}},"roof":{"english":"roof","type":"places","bangla":"sad","bLetters":"&#x9B8;&#x9A1;&#x9CD;","index":9,"img":{"05":"https://farm8.staticflickr.com/7501/16068659070_ea5cfcfaef.jpg","04":"https://farm4.staticflickr.com/3034/2753528364_033f262b9e.jpg","03":"https://farm4.staticflickr.com/3915/14521510232_d0b939084a.jpg","02":"https://farm4.staticflickr.com/3668/11604703365_020379d148.jpg","01":"https://farm4.staticflickr.com/3764/12055832233_331ced6cfc.jpg"}},"ceiling":{"english":"ceiling","type":"places","bangla":"tak","bLetters":"&#x99F;&#x995;&#x9CD;","index":10,"img":{"05":"https://farm4.staticflickr.com/3922/15327413922_282b22e5d5.jpg","04":"https://farm1.staticflickr.com/157/396338876_daf98a4f6e.jpg","03":"https://farm4.staticflickr.com/3796/12436956113_e65629ca1f.jpg","02":"https://farm6.staticflickr.com/5504/12364677024_0702d28fd0.jpg","01":"https://farm8.staticflickr.com/7014/6720292973_440156e132.jpg"}},"wall":{"english":"wall","type":"places","bangla":"dowal","bLetters":"&#x9A1;&#x993;w&#x985;&#x9B2;&#x9CD;","index":11,"img":{"05":"https://farm8.staticflickr.com/7017/6690163827_429e1e7e04.jpg","04":"https://farm8.staticflickr.com/7465/15794121085_b27d4f63f4.jpg","03":"https://farm4.staticflickr.com/3742/13916335733_1e92f0db93.jpg","02":"https://farm4.staticflickr.com/3880/14750649779_38ae8885f3.jpg","01":"https://farm8.staticflickr.com/7590/17191262131_84e7808cae.jpg"}},"window":{"english":"window","type":"places","bangla":"janala","bLetters":"&#x99C;&#x9A8;&#x9B2;","index":12,"img":{"05":"https://farm9.staticflickr.com/8592/16556549556_5ce77b9a89.jpg","04":"https://farm4.staticflickr.com/3844/14621174745_3c9a934698.jpg","03":"https://farm8.staticflickr.com/7184/6853556237_0e35a6c608.jpg","02":"https://farm9.staticflickr.com/8748/17314354571_433613c6b1.jpg","01":"https://farm9.staticflickr.com/8749/16591857088_7e808cb5c2.jpg"}}},"clothes":{"clothes":{"english":"clothes","type":"clothes","bangla":"posak","bLetters":"&#x9AA;&#x993;&#x9B8;&#x995;&#x9CD;","index":0,"img":{"05":"https://farm4.staticflickr.com/3601/3346599485_a717de5922.jpg","04":"https://farm4.staticflickr.com/3611/3347437028_ae7de6b5e9.jpg","03":"https://farm5.staticflickr.com/4129/4976354471_836d1083ec.jpg","02":"https://farm6.staticflickr.com/5028/5599620043_99739392dc.jpg","01":"https://farm4.staticflickr.com/3060/2943297443_d3148d9f6f.jpg"}},"coat":{"english":"coat","type":"clothes","bangla":"jama, aboron","bLetters":"&#x99C;&#x9AE;, &#x985;&#x9AC;&#x993;&#x9B0;&#x993;&#x9A8;&#x9CD;","index":1,"img":{"05":"https://farm4.staticflickr.com/3209/3005052340_bb1b86f53f.jpg","04":"https://farm9.staticflickr.com/8217/8298847115_7606fa9619.jpg","03":"https://farm4.staticflickr.com/3252/2950681813_437c63b286.jpg","02":"https://farm4.staticflickr.com/3071/2946650257_61f5483715.jpg","01":"https://farm4.staticflickr.com/3069/2971769534_089d9dcc00.jpg"}},"hat":{"english":"hat","type":"clothes","bangla":"hat","bLetters":"&#x9B9;&#x99F;&#x9CD;","index":2,"img":{"05":"https://farm4.staticflickr.com/3471/3271553401_102e26f9af.jpg","04":"https://farm4.staticflickr.com/3915/15063303870_7a674d5b37.jpg","03":"https://farm2.staticflickr.com/1392/1284028968_4f522812be.jpg","02":"https://farm5.staticflickr.com/4137/4859331582_536dda6e29.jpg","01":"https://farm1.staticflickr.com/126/400785787_660f4bff05.jpg"}},"jacket":{"english":"jacket","type":"clothes","bangla":"jaket (siter posak","bLetters":"&#x99C;&#x995;&#x98F;&#x99F;&#x9CD; (&#x9B8;&#x9BF;&#x99F;&#x98F;&#x9B0;&#x9CD; &#x9AA;&#x993;&#x9B8;&#x995;&#x9CD;","index":3,"img":{"05":"https://farm1.staticflickr.com/688/21870118069_fb190ab781.jpg","04":"https://farm8.staticflickr.com/7195/7085664153_f658718009.jpg","03":"https://farm8.staticflickr.com/7365/10433135273_d20861ff41.jpg","02":"https://farm3.staticflickr.com/2029/2176690980_820451203e.jpg","01":"https://farm4.staticflickr.com/3021/3077199321_c491c21d87.jpg"}},"pants":{"english":"pants","type":"clothes","bangla":"pant, payjama","bLetters":"&#x9AA;&#x9A8;&#x9CD;&#x99F;&#x9CD;, &#x9AA;&#x9AF;&#x9CD;&#x99C;&#x9AE;","index":4,"img":{"05":"https://farm3.staticflickr.com/2837/9634562443_d96a455583.jpg","04":"https://farm3.staticflickr.com/2820/9603939535_ec52322106.jpg","03":"https://farm4.staticflickr.com/3046/2915108151_d3710ef2d5.jpg","02":"https://farm8.staticflickr.com/7456/9603903979_365010a253.jpg","01":"https://farm4.staticflickr.com/3214/3021784524_0495c46f25.jpg"}},"shoes":{"english":"shoes","type":"clothes","bangla":"juta ","bLetters":"&#x99C;&#x9C1;&#x99F; ","index":5,"img":{"05":"https://farm6.staticflickr.com/5012/5469283493_737bcc716f.jpg","04":"https://farm7.staticflickr.com/6211/6323122529_141eafd004.jpg","03":"https://farm6.staticflickr.com/5059/5416317249_b7c738270a.jpg","02":"https://farm8.staticflickr.com/7027/6520705999_9c57c375f3.jpg","01":"https://farm8.staticflickr.com/7352/9373548583_9a80f3b62a.jpg"}},"umbrella":{"english":"umbrella","type":"clothes","bangla":"sata","bLetters":"&#x9B8;&#x99F;","index":6,"img":{"05":"https://farm8.staticflickr.com/7416/14152934203_a3f091a224.jpg","04":"https://farm8.staticflickr.com/7361/13060784693_6b84f47dc1.jpg","03":"https://farm4.staticflickr.com/3935/15559228745_2b90095d95.jpg","02":"https://farm1.staticflickr.com/221/494485698_b5de82aba6.jpg","01":"https://farm9.staticflickr.com/8075/8312412960_aa86478980.jpg"}},"socks":{"english":"socks","type":"clothes","bangla":"muja","bLetters":"&#x9AE;&#x9C1;&#x99C;","index":7,"img":{"05":"https://farm4.staticflickr.com/3287/2931926265_c46819f13b.jpg","04":"https://farm7.staticflickr.com/6177/6151280035_af9d2bfd0d.jpg","03":"https://farm4.staticflickr.com/3203/2931926211_0e6df5e10b.jpg","02":"https://farm4.staticflickr.com/3156/2932784848_5a8e753b9a.jpg","01":"https://farm4.staticflickr.com/3242/2932785108_93cdab9cae.jpg"}}},"nouns":{"arm":{"english":"arm","type":"nouns","bangla":"bahu","bLetters":"বহু","index":1,"img":{"05":"https://farm6.staticflickr.com/5293/5510376532_05297dc68c.jpg","04":"https://farm6.staticflickr.com/5091/5510379468_93899b1442.jpg","03":"https://farm6.staticflickr.com/5254/5510368180_e32eef834b.jpg","02":"https://farm6.staticflickr.com/5135/5510372440_49905ab152.jpg","01":"https://farm1.staticflickr.com/213/513981786_8d550548db.jpg"}},"back":{"english":"back","type":"nouns","bangla":"pisone","bLetters":"পিসওনএ","index":3,"img":{"05":"https://farm8.staticflickr.com/7466/15908464382_e90223fcd3.jpg","04":"https://farm3.staticflickr.com/2701/4330026676_039aa4f93e.jpg","03":"https://farm2.staticflickr.com/1240/4552183476_cd1927332e.jpg","02":"https://farm6.staticflickr.com/5211/5515394136_895e833473.jpg","01":"https://farm4.staticflickr.com/3101/2773967861_c4f13d4765.jpg"}},"cheeks":{"english":"cheeks","type":"nouns","bangla":"gal gulo, gal","bLetters":"গল্ গুলও, গল্","index":5,"img":{"05":"https://farm4.staticflickr.com/3623/3390710752_51ca5f9e34.jpg","04":"https://farm6.staticflickr.com/5087/5262783360_3bb3b44c60.jpg","03":"https://farm5.staticflickr.com/4149/5021022615_3eff774c0b.jpg","02":"https://farm1.staticflickr.com/51/117983427_c4c236e077.jpg","01":"https://farm4.staticflickr.com/3364/3507621866_b6c59d6b3f.jpg"}},"chest":{"english":"chest","type":"nouns","bangla":"buk, bokkho","bLetters":"বুক্, বওক্খও","index":7,"img":{"05":"https://farm2.staticflickr.com/1275/5180500921_1754c69f3c.jpg","04":"https://farm2.staticflickr.com/1322/988666165_5345164d3f.jpg","03":"https://farm6.staticflickr.com/5528/9324930760_fa406dcbca.jpg","02":"https://farm8.staticflickr.com/7135/7750480094_111dee869b.jpg","01":"https://farm9.staticflickr.com/8390/8680870126_e480f4aa01.jpg"}},"chin":{"english":"chin","type":"nouns","bangla":"chibuk, chibuni","bLetters":"চিবুক্, চিবুনি","index":9,"img":{"05":"https://farm6.staticflickr.com/5487/14475651995_e04438b3af.jpg","04":"https://farm3.staticflickr.com/2829/8890909397_a131644308.jpg","03":"https://farm8.staticflickr.com/7541/15871899965_fc569e6c82.jpg","02":"https://farm1.staticflickr.com/774/23053662203_d0b35a59ab.jpg","01":"https://farm8.staticflickr.com/7287/16411984208_b29d2ff7fb.jpg"}},"ear":{"english":"ear","type":"nouns","bangla":"kan","bLetters":"কন্","index":11,"img":{"05":"https://farm8.staticflickr.com/7363/16355451372_faa77d1ce5.jpg","04":"https://farm6.staticflickr.com/5599/15422101451_f06c0df836.jpg","03":"https://farm5.staticflickr.com/4057/4524234540_dd4d631ef5.jpg","02":"https://farm3.staticflickr.com/2843/9405603152_9575b529e3.jpg","01":"https://farm6.staticflickr.com/5138/5401558078_e4e9180778.jpg"}},"elbow":{"english":"elbow","type":"nouns","bangla":"konui","bLetters":"কওনুই","index":13,"img":{"05":"https://farm5.staticflickr.com/4013/4424273918_a9c51c39db.jpg","04":"https://farm6.staticflickr.com/5514/10107486463_7ab8bddff3.jpg","03":"https://farm4.staticflickr.com/3773/9574751872_deb0a04db9.jpg","02":"https://farm6.staticflickr.com/5345/7214900772_eea00321ca.jpg","01":"https://farm3.staticflickr.com/2900/14042723739_95a69d42e7.jpg"}},"eye":{"english":"eye","type":"nouns","bangla":"chok","bLetters":"চওক্","index":15,"img":{"05":"https://farm6.staticflickr.com/5139/5571780437_a19d89c60f.jpg","04":"https://farm9.staticflickr.com/8202/8203965770_7f08771200.jpg","03":"https://farm8.staticflickr.com/7501/15763580736_3b953c88a5.jpg","02":"https://farm4.staticflickr.com/3073/2555820658_028c7d0879.jpg","01":"https://farm4.staticflickr.com/3637/3526477106_b657abf447.jpg"}},"face":{"english":"face","type":"nouns","bangla":"mukho mondol","bLetters":"মুখও মওন্ডওল্","index":17,"img":{"05":"https://farm9.staticflickr.com/8638/16155138732_a409f3c23f.jpg","04":"https://farm3.staticflickr.com/2939/14013845961_6ffd23828b.jpg","03":"https://farm3.staticflickr.com/2532/3777208713_50e3caa3f0.jpg","02":"https://farm9.staticflickr.com/8099/8509224125_053ed01b4a.jpg","01":"https://farm3.staticflickr.com/2446/3881465979_514682eb7c.jpg"}},"finger":{"english":"finger","type":"nouns","bangla":"angul","bLetters":"অন্গুল্","index":19,"img":{"05":"https://farm3.staticflickr.com/2628/4439690259_bfd15522f4.jpg","04":"https://farm4.staticflickr.com/3152/3060795867_a33a5df575.jpg","03":"https://farm4.staticflickr.com/3291/3061633826_395ed2e46e.jpg","02":"https://farm9.staticflickr.com/8726/16667726413_b0a1522f8e.jpg","01":"https://farm2.staticflickr.com/1397/5832123914_5abcd174f2.jpg"}},"fingers":{"english":"fingers","type":"nouns","bangla":"angul gulo","bLetters":"অন্গুল্ গুলও","index":21,"img":{"05":"https://farm3.staticflickr.com/2628/4439690259_bfd15522f4.jpg","04":"https://farm4.staticflickr.com/3152/3060795867_a33a5df575.jpg","03":"https://farm4.staticflickr.com/3291/3061633826_395ed2e46e.jpg","02":"https://farm9.staticflickr.com/8726/16667726413_b0a1522f8e.jpg","01":"https://farm2.staticflickr.com/1397/5832123914_5abcd174f2.jpg"}},"foot":{"english":"foot","type":"nouns","bangla":"payer pata","bLetters":"পযএর্ পট","index":23,"img":{"05":"https://farm4.staticflickr.com/3629/3335567347_ea5169a5f7.jpg","04":"https://farm8.staticflickr.com/7424/9734083839_21a509c338.jpg","03":"https://farm4.staticflickr.com/3358/4631829755_98d5d81309.jpg","02":"https://farm5.staticflickr.com/4063/4244764102_7d30cb2735.jpg","01":"https://farm2.staticflickr.com/1353/4611117008_4960c8ff92.jpg"}},"hair":{"english":"hair","type":"nouns","bangla":"chul","bLetters":"চুল্","index":25,"img":{"05":"https://farm3.staticflickr.com/2898/14482402978_c7c5acd285.jpg","04":"https://farm8.staticflickr.com/7104/7167750125_c0c5774dc4.jpg","03":"https://farm3.staticflickr.com/2191/2292386676_f8ce3baf50.jpg","02":"https://farm7.staticflickr.com/6059/6239862654_3ce019facb.jpg","01":"https://farm9.staticflickr.com/8337/8240840568_074027c602.jpg"}},"hand":{"english":"hand","type":"nouns","bangla":"hat","bLetters":"হট্","index":27,"img":{"05":"https://farm4.staticflickr.com/3441/3388331442_c477be20fb.jpg","04":"https://farm7.staticflickr.com/6174/6152313839_eef4f64119.jpg","03":"https://farm7.staticflickr.com/6186/6067343866_0a9ea136f8.jpg","02":"https://farm6.staticflickr.com/5469/8881312229_16ffc6098f.jpg","01":"https://farm1.staticflickr.com/170/482004911_339bb4253f.jpg"}},"head":{"english":"head","type":"nouns","bangla":"matha","bLetters":"মত","index":29,"img":{"05":"https://farm6.staticflickr.com/5257/5485789554_4e71c37bc8.jpg","04":"https://farm4.staticflickr.com/3949/15502697046_7d66392ec2.jpg","03":"https://farm8.staticflickr.com/7175/6697188521_0a34ed6a04.jpg","02":"https://farm3.staticflickr.com/2618/4085556206_efb8f1266b.jpg","01":"https://farm4.staticflickr.com/3653/3671724045_46c33b6464.jpg"}},"heart":{"english":"heart","type":"nouns","bangla":"hridoy","bLetters":"হ্রিডওয্","index":31,"img":{"05":"https://farm3.staticflickr.com/2590/4132914776_431f590ce5.jpg","04":"https://farm1.staticflickr.com/1/2226224_ee95b1c82c.jpg","03":"https://farm2.staticflickr.com/1571/24537786222_5202023e5f.jpg","02":"https://farm1.staticflickr.com/684/21708855774_6f3ab0faf1.jpg","01":"https://farm2.staticflickr.com/1142/3267527244_51822dc5b9.jpg"}},"knee":{"english":"knee","type":"nouns","bangla":"hatu","bLetters":"হটু","index":33,"img":{"05":"https://farm3.staticflickr.com/2672/3730711506_d4ce853a6c.jpg","04":"https://farm5.staticflickr.com/4140/4817305217_f3abd22349.jpg","03":"https://farm6.staticflickr.com/5015/5416870754_d6c8822b21.jpg","02":"https://farm5.staticflickr.com/4052/4640604900_4cffc87693.jpg","01":"https://farm9.staticflickr.com/8634/15680562386_46889a07ae.jpg"}},"leg":{"english":"leg","type":"nouns","bangla":"pa","bLetters":"প","index":35,"img":{"05":"https://farm4.staticflickr.com/3953/15112869174_fc40040d35.jpg","04":"https://farm7.staticflickr.com/6027/5930840002_8edbdc4803.jpg","03":"https://farm4.staticflickr.com/3454/3386667055_dc814421f9.jpg","02":"https://farm9.staticflickr.com/8024/7666816086_10b9984dc1.jpg","01":"https://farm8.staticflickr.com/7451/16306074199_29faf2b9c8.jpg"}},"lip":{"english":"lip","type":"nouns","bangla":"thot","bLetters":"তওট্","index":37,"img":{"05":"https://farm1.staticflickr.com/27/63963392_7c13801638.jpg","04":"https://farm1.staticflickr.com/9/16128403_7732cf84e1.jpg","03":"https://farm6.staticflickr.com/5497/14635386585_4267e13171.jpg","02":"https://farm3.staticflickr.com/2278/1850120180_8e92572f1b.jpg","01":"https://farm4.staticflickr.com/3941/15474206162_cc670e1c30.jpg"}},"mouth":{"english":"mouth","type":"nouns","bangla":"mukh","bLetters":"মুখ্","index":39,"img":{"05":"https://farm1.staticflickr.com/110/253314736_b58502c414.jpg","04":"https://farm3.staticflickr.com/2317/2445577777_ffebf43665.jpg","03":"https://farm1.staticflickr.com/197/514336058_0667173538.jpg","02":"https://farm1.staticflickr.com/145/429937571_7390670b3d.jpg","01":"https://farm5.staticflickr.com/4030/4230136300_96bc2b973f.jpg"}},"neck":{"english":"neck","type":"nouns","bangla":"ghar","bLetters":"ঘর্","index":41,"img":{"05":"https://farm9.staticflickr.com/8104/8535106878_622b1ab1c1.jpg","04":"https://farm9.staticflickr.com/8634/16212672950_159605f45d.jpg","03":"https://farm4.staticflickr.com/3450/3234322611_b700bfa4e3.jpg","02":"https://farm8.staticflickr.com/7331/16561143306_0626111f67.jpg","01":"https://farm8.staticflickr.com/7136/7546656974_99274092df.jpg"}},"nose":{"english":"nose","type":"nouns","bangla":"nak","bLetters":"নক্","index":43,"img":{"05":"https://farm4.staticflickr.com/3565/3351202310_5bc5c4a46e.jpg","04":"https://farm9.staticflickr.com/8331/8095829892_2206910ab9.jpg","03":"https://farm2.staticflickr.com/1001/524453330_86472e09db.jpg","02":"https://farm4.staticflickr.com/3082/3165299851_911360809d.jpg","01":"https://farm4.staticflickr.com/3498/3818222227_9e749f41bc.jpg"}},"shoulder":{"english":"shoulder","type":"nouns","bangla":"knadh","bLetters":"ক্নদ্","index":45,"img":{"05":"https://farm1.staticflickr.com/655/21453101124_0f02902114.jpg","04":"https://farm4.staticflickr.com/3740/13542213883_382e5d485b.jpg","03":"https://farm5.staticflickr.com/4150/4831941561_fd2a4f5cab.jpg","02":"https://farm8.staticflickr.com/7302/9357660875_d29da25e72.jpg","01":"https://farm1.staticflickr.com/177/456377196_c7ac1c2039.jpg"}},"stomach":{"english":"stomach","type":"nouns","bangla":"pakostholi","bLetters":"পকওস্তওলি","index":47,"img":{"05":"https://farm1.staticflickr.com/100/310255646_1132217a9a.jpg","04":"https://farm4.staticflickr.com/3127/2856940123_3059a93981.jpg","03":"https://farm1.staticflickr.com/101/310255050_278808d3bf.jpg","02":"https://farm4.staticflickr.com/3070/2796074953_c77008a7a9.jpg","01":"https://farm4.staticflickr.com/3232/2723543040_42644e583d.jpg"}},"teeth":{"english":"teeth","type":"nouns","bangla":"dnat, daat","bLetters":"ড্নট্, ডাট্","index":49,"img":{"05":"https://farm7.staticflickr.com/6058/6370387703_5e718ea681.jpg","04":"https://farm1.staticflickr.com/200/486190876_da2bfdf2b6.jpg","03":"https://farm1.staticflickr.com/22/95078437_ef448104a0.jpg","02":"https://farm5.staticflickr.com/4018/4348697104_20bf04b0e8.jpg","01":"https://farm3.staticflickr.com/2479/3780617347_e33b8d7416.jpg"}},"thigh":{"english":"thigh","type":"nouns","bangla":"uru","bLetters":"উরু","index":51,"img":{"05":"https://farm8.staticflickr.com/7660/17157138328_0dfc34bb48.jpg","04":"https://farm2.staticflickr.com/1154/1427859561_58d6a77933.jpg","03":"https://farm4.staticflickr.com/3644/3498769783_a0928be3c7.jpg","02":"https://farm1.staticflickr.com/738/22816399343_3a2e5eafbe.jpg","01":"https://farm9.staticflickr.com/8825/17219265106_9d09c786dd.jpg"}},"throat":{"english":"throat","type":"nouns","bangla":"gola","bLetters":"গওল","index":53,"img":{"05":"https://farm4.staticflickr.com/3181/2314823519_65b20b6b1a.jpg","04":"https://farm4.staticflickr.com/3214/2419341753_004feb77c9.jpg","03":"https://farm2.staticflickr.com/1331/1021938363_d561cf8007.jpg","02":"https://farm3.staticflickr.com/2904/14817011114_d72b7813a2.jpg","01":"https://farm4.staticflickr.com/3341/3423100077_849ffca6cf.jpg"}},"thumb":{"english":"thumb","type":"nouns","bangla":"boro angul","bLetters":"বওরও অন্গুল্","index":55,"img":{"05":"https://farm1.staticflickr.com/89/220903902_ef1e671fe1.jpg","04":"https://farm9.staticflickr.com/8123/8679705034_7133ee8aee.jpg","03":"https://farm1.staticflickr.com/90/272896684_95fc29f55d.jpg","02":"https://farm3.staticflickr.com/2832/9902255755_39b4f9ac20.jpg","01":"https://farm6.staticflickr.com/5121/5342682280_f4bba0323a.jpg"}},"toe":{"english":"toe","type":"nouns","bangla":"payer tola","bLetters":"পযএর্ টওল","index":57,"img":{"05":"https://farm6.staticflickr.com/5141/5606329346_c2fba4c0f5.jpg","04":"https://farm6.staticflickr.com/5010/5357958404_a6cb8b5c6a.jpg","03":"https://farm1.staticflickr.com/15/21826078_7c21ae9545.jpg","02":"https://farm6.staticflickr.com/5281/5278796025_6e98014373.jpg","01":"https://farm4.staticflickr.com/3029/2414248220_99a3e0f5e0.jpg"}},"tongue":{"english":"tongue","type":"nouns","bangla":"jibba, vasa","bLetters":"জিব্ব, বস","index":59,"img":{"05":"https://farm6.staticflickr.com/5289/5219131607_8131ae3216.jpg","04":"https://farm4.staticflickr.com/3257/2652373677_8ebda2e61d.jpg","03":"https://farm1.staticflickr.com/1/4531_194039bbbb.jpg","02":"https://farm4.staticflickr.com/3770/13627508315_c606804cf5.jpg","01":"https://farm6.staticflickr.com/5070/5600277100_3c8e55a8b7.jpg"}},"tooth":{"english":"tooth","type":"nouns","bangla":"dnat gulo","bLetters":"ড্নট্ গুলও","index":61,"img":{"05":"https://farm9.staticflickr.com/8594/16403798519_f122f8c1b4.jpg","04":"https://farm4.staticflickr.com/3117/2767565586_af5df0e26f.jpg","03":"https://farm4.staticflickr.com/3310/4588253473_11ed151c03.jpg","02":"https://farm3.staticflickr.com/2882/11338663515_e67413e607.jpg","01":"https://farm8.staticflickr.com/7327/11338789863_b29a192c91.jpg"}}},"numbers":{"one":{"english":"one","type":"numbers","bangla":"ak, akmatro","bLetters":"&#x985;&#x995;&#x9CD;, &#x985;&#x995;&#x9CD;&#x9AE;&#x99F;&#x9CD;&#x9B0;&#x993;","index":0,"img":{"05":"https://farm4.staticflickr.com/3880/14753851451_1d15bfece8.jpg","04":"https://farm8.staticflickr.com/7597/16617554309_1db3c3612e.jpg","03":"https://farm4.staticflickr.com/3304/3177700220_d77b3bbb48.jpg","02":"https://farm8.staticflickr.com/7001/6619983853_bf1aed4f26.jpg","01":"https://farm9.staticflickr.com/8687/17120755000_80672ca765.jpg"}},"two":{"english":"two","type":"numbers","bangla":"dui,","bLetters":"&#x9A1;&#x9C1;&#x987;,","index":1,"img":{"05":"https://farm5.staticflickr.com/4115/4917557809_4e575f6925.jpg","04":"https://farm3.staticflickr.com/2768/4423549313_fa0b2d6db1.jpg","03":"https://farm3.staticflickr.com/2577/3708739953_1c5c5302d3.jpg","02":"https://farm3.staticflickr.com/2091/2128062912_c37a21b5d1.jpg","01":"https://farm6.staticflickr.com/5146/5877446370_f151cd4fc4.jpg"}},"three":{"english":"three","type":"numbers","bangla":"tin","bLetters":"&#x99F;&#x9BF;&#x9A8;&#x9CD;","index":2,"img":{"05":"https://farm8.staticflickr.com/7577/15977871572_e74b17ce97.jpg","04":"https://farm3.staticflickr.com/2355/2367657459_c50749a1ab.jpg","03":"https://farm1.staticflickr.com/39/81510915_0cfc243d63.jpg","02":"https://farm4.staticflickr.com/3431/3382472138_a94274754d.jpg","01":"https://farm7.staticflickr.com/6022/5882633345_f9ef13c696.jpg"}},"four":{"english":"four","type":"numbers","bangla":"char","bLetters":"&#x99A;&#x9B0;&#x9CD;","index":3,"img":{"05":"https://farm1.staticflickr.com/182/427759347_c79704cc52.jpg","04":"https://farm8.staticflickr.com/7324/8979436461_629eda27c2.jpg","03":"https://farm1.staticflickr.com/4/5996001_a7ee11caaa.jpg","02":"https://farm9.staticflickr.com/8650/15668806503_6a090871b0.jpg","01":"https://farm6.staticflickr.com/5581/14909213587_84e5b46016.jpg"}},"five":{"english":"five","type":"numbers","bangla":"pnach","bLetters":"&#x9AA;&#x9CD;&#x9A8;&#x99A;&#x9CD;","index":4,"img":{"05":"https://farm7.staticflickr.com/6221/6324496389_791ca4563f.jpg","04":"https://farm9.staticflickr.com/8898/17522943301_39bd992186.jpg","03":"https://farm5.staticflickr.com/4010/5134436037_e8b600f773.jpg","02":"https://farm4.staticflickr.com/3797/12881077725_34d368fa95.jpg","01":"https://farm4.staticflickr.com/3809/9190114743_2806d806ec.jpg"}},"six":{"english":"six","type":"numbers","bangla":"soy","bLetters":"&#x9B8;&#x993;&#x9AF;&#x9CD;","index":5,"img":{"05":"https://farm9.staticflickr.com/8529/8589378636_3ce09f89fd.jpg","04":"https://farm2.staticflickr.com/1568/24503202080_b7edefd639.jpg","03":"https://farm4.staticflickr.com/3069/2949798387_21489603a1.jpg","02":"https://farm9.staticflickr.com/8391/8504933929_e388589417.jpg","01":"https://farm9.staticflickr.com/8297/7991987946_bc597ebe6f.jpg"}},"seven":{"english":"seven","type":"numbers","bangla":"sat","bLetters":"&#x9B8;&#x99F;&#x9CD;","index":6,"img":{"05":"https://farm9.staticflickr.com/8611/16531895387_c1e007bb78.jpg","04":"https://farm9.staticflickr.com/8283/7589910868_7b323e3481.jpg","03":"https://farm5.staticflickr.com/4054/4649035987_e8cda11632.jpg","02":"https://farm1.staticflickr.com/52/147589104_5050bfb03f.jpg","01":"https://farm8.staticflickr.com/7131/7589824858_094c89e6ab.jpg"}},"eight":{"english":"eight","type":"numbers","bangla":"aat","bLetters":"&#x986;&#x99F;&#x9CD;","index":7,"img":{"05":"https://farm9.staticflickr.com/8308/7799495286_806d1e2b41.jpg","04":"https://farm3.staticflickr.com/2524/3957232469_86bfb60639.jpg","03":"https://farm6.staticflickr.com/5494/12247868916_ef1e0f6d20.jpg","02":"https://farm4.staticflickr.com/3202/2931170974_41be9698dd.jpg","01":"https://farm8.staticflickr.com/7712/17418240615_8ba5b27eab.jpg"}},"nine":{"english":"nine","type":"numbers","bangla":"noy","bLetters":"&#x9A8;&#x993;&#x9AF;&#x9CD;","index":8,"img":{"05":"https://farm4.staticflickr.com/3681/11186392034_6e34b6a97d.jpg","04":"https://farm3.staticflickr.com/2884/11233015143_fff122633a.jpg","03":"https://farm4.staticflickr.com/3819/11871212175_12bf3aae27.jpg","02":"https://farm8.staticflickr.com/7156/6641177263_47184dcee0.jpg","01":"https://farm4.staticflickr.com/3910/15244192941_dd8b133c78.jpg"}},"ten":{"english":"ten","type":"numbers","bangla":"dos","bLetters":"&#x9A1;&#x993;&#x9B8;&#x9CD;","index":9,"img":{"05":"https://farm2.staticflickr.com/1261/1470523839_ed2a858658.jpg","04":"https://farm4.staticflickr.com/3768/13631740275_3dd194aa42.jpg","03":"https://farm2.staticflickr.com/1191/534031119_46ee951f7e.jpg","02":"https://farm3.staticflickr.com/2293/2116576367_02593d8b49.jpg","01":"https://farm4.staticflickr.com/3178/2322084993_3898e3793d.jpg"}}},"plural":{"alligator":{"english":"alligator","type":"plural","bangla":"american kumir","bLetters":"অমএরিcঅন্ কুমির্","index":1,"img":{"05":"https://farm9.staticflickr.com/8366/8399425523_74c279ac6b.jpg","04":"https://farm4.staticflickr.com/3110/3195698856_b2b30d3325.jpg","03":"https://farm4.staticflickr.com/3099/3194860899_640ce169ac.jpg","02":"https://farm4.staticflickr.com/3506/3194806745_1465ae0373.jpg","01":"https://farm7.staticflickr.com/6045/6363664385_c3b25ea24c.jpg"}},"alligators":{"english":"alligators","type":"plural","bangla":"american kumir gulo","bLetters":"অমএরিcঅন্ কুমির্ গুলও","index":3,"img":{"05":"https://farm1.staticflickr.com/331/20236618319_1732f45df5.jpg","04":"https://farm8.staticflickr.com/7646/17250018551_eaf395294d.jpg","03":"https://farm6.staticflickr.com/5112/14332022865_c31ed7e9f4.jpg","02":"https://farm8.staticflickr.com/7323/8734363025_f2401f825a.jpg","01":"https://farm2.staticflickr.com/1409/992216795_73bec2f9c5.jpg"}},"bear":{"english":"bear","type":"plural","bangla":"bohon kora","bLetters":"বওহওন্ কওর","index":5,"img":{"05":"https://farm5.staticflickr.com/4027/5149896481_273013315e.jpg","04":"https://farm6.staticflickr.com/5530/11973670596_6460056694.jpg","03":"https://farm4.staticflickr.com/3329/3204041451_f6270da2fe.jpg","02":"https://farm9.staticflickr.com/8475/8079323571_ea8d1cbc45.jpg","01":"https://farm4.staticflickr.com/3594/3489429139_85e55b9967.jpg"}},"bears":{"english":"bears","type":"plural","bangla":"bohon kora","bLetters":"বওহওন্ কওর","index":7,"img":{"05":"https://farm3.staticflickr.com/2664/3952795103_cfa46e22c8.jpg","04":"https://farm9.staticflickr.com/8298/7902256600_7c63415893.jpg","03":"https://farm3.staticflickr.com/2931/14103335792_73e58948c4.jpg","02":"https://farm8.staticflickr.com/7259/7577390134_b1cda83627.jpg","01":"https://farm6.staticflickr.com/5142/5624569781_4dd65ba2d5.jpg"}},"bird":{"english":"bird","type":"plural","bangla":"pakhi","bLetters":"পখি","index":9,"img":{"05":"https://farm8.staticflickr.com/7213/7392533840_8ff216f92f.jpg","04":"https://farm9.staticflickr.com/8147/7663555568_f4137ee4de.jpg","03":"https://farm8.staticflickr.com/7386/10168943246_7aa4975f3c.jpg","02":"https://farm4.staticflickr.com/3917/15123129376_be96826fdf.jpg","01":"https://farm9.staticflickr.com/8188/8126997573_1754efd71f.jpg"}},"birds":{"english":"birds","type":"plural","bangla":"pakhi gulo","bLetters":"পখি গুলও","index":11,"img":{"05":"https://farm7.staticflickr.com/6049/6288258621_017c47e364.jpg","04":"https://farm8.staticflickr.com/7213/7392533840_8ff216f92f.jpg","03":"https://farm5.staticflickr.com/4075/4791631090_98c494c88c.jpg","02":"https://farm6.staticflickr.com/5700/21708839280_4e1444709b.jpg","01":"https://farm6.staticflickr.com/5478/14435672836_f182a912f1.jpg"}},"bull":{"english":"bull","type":"plural","bangla":"bis, sar ","bLetters":"বিস্, সর্ ","index":13,"img":{"05":"https://farm9.staticflickr.com/8068/8189952412_005d0a77a9.jpg","04":"https://farm3.staticflickr.com/2450/3810488188_c81f340a67.jpg","03":"https://farm2.staticflickr.com/1368/1379628126_ca7dff4620.jpg","02":"https://farm8.staticflickr.com/7426/12346804053_69a0ea1bc1.jpg","01":"https://farm8.staticflickr.com/7215/7246249478_c2954c0978.jpg"}},"bulls":{"english":"bulls","type":"plural","bangla":"basur, soto goru","bLetters":"বসুর্, সওটও গওরু","index":15,"img":{"05":"https://farm9.staticflickr.com/8068/8189952412_005d0a77a9.jpg","04":"https://farm3.staticflickr.com/2450/3810488188_c81f340a67.jpg","03":"https://farm2.staticflickr.com/1368/1379628126_ca7dff4620.jpg","02":"https://farm8.staticflickr.com/7426/12346804053_69a0ea1bc1.jpg","01":"https://farm8.staticflickr.com/7215/7246249478_c2954c0978.jpg"}},"cat":{"english":"cat","type":"plural","bangla":"biral","bLetters":"বিরল্","index":17,"img":{"05":"https://farm4.staticflickr.com/3352/3474831728_a03450606a.jpg","04":"https://farm8.staticflickr.com/7496/16236770082_205f4e358f.jpg","03":"https://farm6.staticflickr.com/5589/14818641818_b0058c0cfc.jpg","02":"https://farm6.staticflickr.com/5170/5372754294_db6acaa1e5.jpg","01":"https://farm4.staticflickr.com/3845/14284324148_360ae173b8.jpg"}},"cats":{"english":"cats","type":"plural","bangla":"biral gulo","bLetters":"বিরল্ গুলও","index":19,"img":{"05":"https://farm6.staticflickr.com/5704/20443802614_d0b0c0b5c5.jpg","04":"https://farm8.staticflickr.com/7786/17202266828_46e1464ef1.jpg","03":"https://farm3.staticflickr.com/2602/3977203168_b9d02a0233.jpg","02":"https://farm9.staticflickr.com/8065/8168159947_94b3a89a2a.jpg","01":"https://farm8.staticflickr.com/7401/16393044637_72e93d96b6.jpg"}},"cow":{"english":"cow","type":"plural","bangla":"gavi","bLetters":"গবি","index":21,"img":{"05":"https://farm4.staticflickr.com/3249/3123170162_d98aa215fc.jpg","04":"https://farm4.staticflickr.com/3596/3593285308_a582837c82.jpg","03":"https://farm3.staticflickr.com/2195/2248665589_89c7789276.jpg","02":"https://farm4.staticflickr.com/3260/2902422030_bb5321c452.jpg","01":"https://farm8.staticflickr.com/7224/6901443466_f45b4c235e.jpg"}},"cows":{"english":"cows","type":"plural","bangla":"gavi gulo","bLetters":"গবি গুলও","index":23,"img":{"05":"https://farm4.staticflickr.com/3156/2957382365_86f10cf8d9.jpg","04":"https://farm4.staticflickr.com/3134/2519080020_056af1c36d.jpg","03":"https://farm8.staticflickr.com/7107/7442171028_79e58a5a45.jpg","02":"https://farm4.staticflickr.com/3260/2902422030_bb5321c452.jpg","01":"https://farm3.staticflickr.com/2923/14302980989_73d5802120.jpg"}},"deer":{"english":"deer","type":"plural","bangla":"horin ","bLetters":"হওরিন্ ","index":25,"img":{"05":"https://farm6.staticflickr.com/5082/5201918258_bc3e70b7ab.jpg","04":"https://farm8.staticflickr.com/7538/16094100549_23e0a7872d.jpg","03":"https://farm4.staticflickr.com/3075/5778143128_e7f64cc882.jpg","02":"https://farm3.staticflickr.com/2479/3735473510_d0a3b159a0.jpg","01":"https://farm3.staticflickr.com/2919/14226109195_f8f9f5c313.jpg"}},"many deer":{"english":"many deer","type":"plural","bangla":"aunek horin  ","bLetters":"ঔনএক্ হওরিন্  ","index":27,"img":{"05":"https://farm6.staticflickr.com/5607/14929351814_c5d269d465.jpg","04":"https://farm6.staticflickr.com/5583/14740500669_6014cb31fc.jpg","03":"https://farm3.staticflickr.com/2664/3964233122_9bc67ff7e2.jpg","02":"https://farm4.staticflickr.com/3789/9192742678_7f7d2bd4fa.jpg","01":"https://farm4.staticflickr.com/3932/15252814268_4f26dd113a.jpg"}},"dog":{"english":"dog","type":"plural","bangla":"kukur","bLetters":"কুকুর্","index":29,"img":{"05":"https://farm8.staticflickr.com/7140/8153507018_7407c28481.jpg","04":"https://farm4.staticflickr.com/3757/9443882615_04a21a4860.jpg","03":"https://farm5.staticflickr.com/4026/4489119695_87144ba60b.jpg","02":"https://farm9.staticflickr.com/8873/17137531187_19c34dc8ee.jpg","01":"https://farm5.staticflickr.com/4131/4846208207_eb7d525741.jpg"}},"dogs":{"english":"dogs","type":"plural","bangla":"kukur gulo","bLetters":"কুকুর্ গুলও","index":31,"img":{"05":"https://farm8.staticflickr.com/7140/8153507018_7407c28481.jpg","04":"https://farm4.staticflickr.com/3757/9443882615_04a21a4860.jpg","03":"https://farm5.staticflickr.com/4026/4489119695_87144ba60b.jpg","02":"https://farm9.staticflickr.com/8873/17137531187_19c34dc8ee.jpg","01":"https://farm5.staticflickr.com/4131/4846208207_eb7d525741.jpg"}},"donkey":{"english":"donkey","type":"plural","bangla":"gadda","bLetters":"গড্ড","index":33,"img":{"05":"https://farm3.staticflickr.com/2012/3543366994_06446a21a9.jpg","04":"https://farm3.staticflickr.com/2163/2087626130_bf9ba846c4.jpg","03":"https://farm8.staticflickr.com/7387/11813380194_54cba0f81a.jpg","02":"https://farm1.staticflickr.com/130/379415000_26e33b3b1f.jpg","01":"https://farm4.staticflickr.com/3039/2342323191_bf294f1391.jpg"}},"donkeys":{"english":"donkeys","type":"plural","bangla":"gadda gulo","bLetters":"গড্ড গুলও","index":35,"img":{"05":"https://farm3.staticflickr.com/2012/3543366994_06446a21a9.jpg","04":"https://farm3.staticflickr.com/2163/2087626130_bf9ba846c4.jpg","03":"https://farm8.staticflickr.com/7387/11813380194_54cba0f81a.jpg","02":"https://farm1.staticflickr.com/130/379415000_26e33b3b1f.jpg","01":"https://farm4.staticflickr.com/3039/2342323191_bf294f1391.jpg"}},"eagle":{"english":"eagle","type":"plural","bangla":"igol pakhi","bLetters":"ইগওল্ পখি","index":37,"img":{"05":"https://farm6.staticflickr.com/5164/5344407138_41a0036006.jpg","04":"https://farm4.staticflickr.com/3096/3223507845_130e37c681.jpg","03":"https://farm9.staticflickr.com/8717/17129201342_e5d7207be9.jpg","02":"https://farm4.staticflickr.com/3946/15399146127_6d64cf820b.jpg","01":"https://farm9.staticflickr.com/8097/8464486007_79f4e69569.jpg"}},"eagles":{"english":"eagles","type":"plural","bangla":"igol pakhi gulo","bLetters":"ইগওল্ পখি গুলও","index":39,"img":{"05":"https://farm4.staticflickr.com/3096/3223507845_130e37c681.jpg","04":"https://farm9.staticflickr.com/8717/17129201342_e5d7207be9.jpg","03":"https://farm8.staticflickr.com/7274/7489630742_af0146a93e.jpg","02":"https://farm4.staticflickr.com/3946/15399146127_6d64cf820b.jpg","01":"https://farm9.staticflickr.com/8097/8464486007_79f4e69569.jpg"}},"elephant":{"english":"elephant","type":"plural","bangla":"hati","bLetters":"হটি","index":41,"img":{"05":"https://farm5.staticflickr.com/4112/4839032436_3ba7167102.jpg","04":"https://farm5.staticflickr.com/4103/4839031518_3765f997a4.jpg","03":"https://farm5.staticflickr.com/4088/4838416433_ffc564eb4b.jpg","02":"https://farm5.staticflickr.com/4128/4839030572_b4f0f2c314.jpg","01":"https://farm5.staticflickr.com/4131/4838418209_f962448bd8.jpg"}},"elephants":{"english":"elephants","type":"plural","bangla":"hati gulo","bLetters":"হটি গুলও","index":43,"img":{"05":"https://farm5.staticflickr.com/4112/4839032436_3ba7167102.jpg","04":"https://farm5.staticflickr.com/4103/4839031518_3765f997a4.jpg","03":"https://farm5.staticflickr.com/4088/4838416433_ffc564eb4b.jpg","02":"https://farm5.staticflickr.com/4128/4839030572_b4f0f2c314.jpg","01":"https://farm5.staticflickr.com/4131/4838418209_f962448bd8.jpg"}},"giraffe":{"english":"giraffe","type":"plural","bangla":"ziraff (ak jatio lamba prani)","bLetters":"zইরff (অক্ জটিও লম্ব প্রনি)","index":45,"img":{"05":"https://farm6.staticflickr.com/5175/5420865965_e057fe53d6.jpg","04":"https://farm8.staticflickr.com/7370/15832053493_4fa7477876.jpg","03":"https://farm8.staticflickr.com/7330/13929005447_ae733b3418.jpg","02":"https://farm8.staticflickr.com/7430/14211763203_77cc7fa3b3.jpg","01":"https://farm5.staticflickr.com/4023/4511365064_75cee9bef5.jpg"}},"giraffes":{"english":"giraffes","type":"plural","bangla":"ziraff gulo (ak jatio lamba prani)","bLetters":"zইরff গুলও (অক্ জটিও লম্ব প্রনি)","index":47,"img":{"05":"https://farm3.staticflickr.com/2016/2271387261_89629c082c.jpg","04":"https://farm6.staticflickr.com/5483/11215082773_ecddbcd116.jpg","03":"https://farm5.staticflickr.com/4144/4838438551_17e90c8a0c.jpg","02":"https://farm8.staticflickr.com/7330/13929005447_ae733b3418.jpg","01":"https://farm6.staticflickr.com/5174/13981993126_13927fce72.jpg"}},"goat":{"english":"goat","type":"plural","bangla":"sagol","bLetters":"সগওল্","index":49,"img":{"05":"https://farm6.staticflickr.com/5144/5624304186_c602fb2c16.jpg","04":"https://farm4.staticflickr.com/3074/2994844503_14281e4016.jpg","03":"https://farm4.staticflickr.com/3214/3056858518_802fcd39d0.jpg","02":"https://farm6.staticflickr.com/5091/5571990930_2f66625f16.jpg","01":"https://farm9.staticflickr.com/8614/15988110939_01d3a5365f.jpg"}},"goats":{"english":"goats","type":"plural","bangla":"sagol gulo","bLetters":"সগওল্ গুলও","index":51,"img":{"05":"https://farm4.staticflickr.com/3074/2994844503_14281e4016.jpg","04":"https://farm4.staticflickr.com/3214/3056858518_802fcd39d0.jpg","03":"https://farm6.staticflickr.com/5091/5571990930_2f66625f16.jpg","02":"https://farm9.staticflickr.com/8614/15988110939_01d3a5365f.jpg","01":"https://farm6.staticflickr.com/5251/5565995483_9534daa9a4.jpg"}},"horse":{"english":"horse","type":"plural","bangla":"ghora","bLetters":"ঘওর","index":53,"img":{"05":"https://farm5.staticflickr.com/4069/4231428890_982f85f6df.jpg","04":"https://farm5.staticflickr.com/4105/5022317471_2f9a0558c8.jpg","03":"https://farm9.staticflickr.com/8111/8497866256_bcabcdcf2d.jpg","02":"https://farm9.staticflickr.com/8158/7261285256_ac0f4fbc54.jpg","01":"https://farm6.staticflickr.com/5173/5412377622_2f5cb4156d.jpg"}},"horses":{"english":"horses","type":"plural","bangla":"ghora gulo","bLetters":"ঘওর গুলও","index":55,"img":{"05":"https://farm5.staticflickr.com/4069/4231428890_982f85f6df.jpg","04":"https://farm5.staticflickr.com/4105/5022317471_2f9a0558c8.jpg","03":"https://farm9.staticflickr.com/8111/8497866256_bcabcdcf2d.jpg","02":"https://farm9.staticflickr.com/8158/7261285256_ac0f4fbc54.jpg","01":"https://farm6.staticflickr.com/5173/5412377622_2f5cb4156d.jpg"}},"lion":{"english":"lion","type":"plural","bangla":"singho","bLetters":"সিন্ঘও","index":57,"img":{"05":"https://farm7.staticflickr.com/6096/6363664889_4968c4e641.jpg","04":"https://farm5.staticflickr.com/4126/4838381651_cbb7bdafcb.jpg","03":"https://farm9.staticflickr.com/8186/8094150557_70e59fc72c.jpg","02":"https://farm9.staticflickr.com/8316/8040094305_e70ba3f3cf.jpg","01":"https://farm5.staticflickr.com/4144/4977443186_9e934e230b.jpg"}},"lions":{"english":"lions","type":"plural","bangla":"singho gulo","bLetters":"সিন্ঘও গুলও","index":59,"img":{"05":"https://farm8.staticflickr.com/7301/16500945081_8d06d920df.jpg","04":"https://farm4.staticflickr.com/3071/3697550589_53ca993dab.jpg","03":"https://farm7.staticflickr.com/6048/6288258569_24da3d4ba7.jpg","02":"https://farm8.staticflickr.com/7234/7272740218_d248e3b069.jpg","01":"https://farm7.staticflickr.com/6096/6363664889_4968c4e641.jpg"}},"monkey":{"english":"monkey","type":"plural","bangla":"banor","bLetters":"বনওর্","index":61,"img":{"05":"https://farm4.staticflickr.com/3746/9508941857_d6fc9e32b8.jpg","04":"https://farm3.staticflickr.com/2277/2081791806_c2fa67b06e.jpg","03":"https://farm1.staticflickr.com/640/21633222009_5bf1021e51.jpg","02":"https://farm1.staticflickr.com/563/23030717935_86ccb18673.jpg","01":"https://farm4.staticflickr.com/3841/14865115045_4f3ccba328.jpg"}},"monkeys":{"english":"monkeys","type":"plural","bangla":"banor gulo","bLetters":"বনওর্ গুলও","index":63,"img":{"05":"https://farm3.staticflickr.com/2277/2081791806_c2fa67b06e.jpg","04":"https://farm1.staticflickr.com/640/21633222009_5bf1021e51.jpg","03":"https://farm1.staticflickr.com/563/23030717935_86ccb18673.jpg","02":"https://farm4.staticflickr.com/3841/14865115045_4f3ccba328.jpg","01":"https://farm4.staticflickr.com/3928/15557905405_05357b440d.jpg"}},"mouse":{"english":"mouse","type":"plural","bangla":"idur","bLetters":"ইডুর্","index":65,"img":{"05":"https://farm8.staticflickr.com/7446/9698334635_b907632de5.jpg","04":"https://farm8.staticflickr.com/7052/6898771053_4d15808fc5.jpg","03":"https://farm8.staticflickr.com/7162/6620107219_fb93bae29c.jpg","02":"https://farm6.staticflickr.com/5108/5643983263_9e156bdd7f.jpg","01":"https://farm9.staticflickr.com/8076/8365895042_95f8ec379d.jpg"}},"mice":{"english":"mice","type":"plural","bangla":"soto idur","bLetters":"সওটও ইডুর্","index":67,"img":{"05":"https://farm8.staticflickr.com/7446/9698334635_b907632de5.jpg","04":"https://farm8.staticflickr.com/7052/6898771053_4d15808fc5.jpg","03":"https://farm8.staticflickr.com/7162/6620107219_fb93bae29c.jpg","02":"https://farm6.staticflickr.com/5108/5643983263_9e156bdd7f.jpg","01":"https://farm9.staticflickr.com/8076/8365895042_95f8ec379d.jpg"}},"rabbit":{"english":"rabbit","type":"plural","bangla":"khorgos","bLetters":"খওর্গওস্","index":69,"img":{"05":"https://farm1.staticflickr.com/27/268655305_5c5d929645.jpg","04":"https://farm6.staticflickr.com/5487/14265926166_f85db28b92.jpg","03":"https://farm3.staticflickr.com/2571/3952842119_017fc590bf.jpg","02":"https://farm8.staticflickr.com/7131/7459856246_c77dbb5748.jpg","01":"https://farm3.staticflickr.com/2914/14759385173_a483418e27.jpg"}},"rabbits":{"english":"rabbits","type":"plural","bangla":"khorgos gulo","bLetters":"খওর্গওস্ গুলও","index":71,"img":{"05":"https://farm3.staticflickr.com/2848/9321961625_7c984fe9e3.jpg","04":"https://farm8.staticflickr.com/7679/17298823096_9b4e0dc728.jpg","03":"https://farm8.staticflickr.com/7308/9260207734_cfdd63b1b0.jpg","02":"https://farm4.staticflickr.com/3644/3520094319_3979007bff.jpg","01":"https://farm1.staticflickr.com/27/268655305_5c5d929645.jpg"}},"snake":{"english":"snake","type":"plural","bangla":"sap","bLetters":"সপ্","index":73,"img":{"05":"https://farm3.staticflickr.com/2346/1553471288_be56c349a2.jpg","04":"https://farm4.staticflickr.com/3286/2425754622_c29700db84.jpg","03":"https://farm4.staticflickr.com/3715/8893270845_753c115cc9.jpg","02":"https://farm6.staticflickr.com/5106/5569660792_0b17551cbc.jpg","01":"https://farm8.staticflickr.com/7331/16273942650_104e4c0776.jpg"}},"snakes":{"english":"snakes","type":"plural","bangla":"sap gulo","bLetters":"সপ্ গুলও","index":75,"img":{"05":"https://farm3.staticflickr.com/2011/1552619433_9aec3b062d.jpg","04":"https://farm3.staticflickr.com/2346/1553471288_be56c349a2.jpg","03":"https://farm4.staticflickr.com/3750/9507218243_a09f4fb585.jpg","02":"https://farm9.staticflickr.com/8097/8534589263_c591734dda.jpg","01":"https://farm3.staticflickr.com/2213/1552618587_508a3a6922.jpg"}},"tiger":{"english":"tiger","type":"plural","bangla":"bagh","bLetters":"বঘ্","index":77,"img":{"05":"https://farm5.staticflickr.com/4041/5159256935_6d65db4d81.jpg","04":"https://farm4.staticflickr.com/3169/2988799601_2f187a7bb8.jpg","03":"https://farm8.staticflickr.com/7523/15506377508_a45616ff27.jpg","02":"https://farm9.staticflickr.com/8588/15912220596_0efe5578be.jpg","01":"https://farm9.staticflickr.com/8373/8389456987_8c15ec272f.jpg"}},"tigers":{"english":"tigers","type":"plural","bangla":"bagh gulo","bLetters":"বঘ্ গুলও","index":79,"img":{"05":"https://farm4.staticflickr.com/3828/9346101440_2d8d21c2dd.jpg","04":"https://farm6.staticflickr.com/5583/14573241088_e9fec44aab.jpg","03":"https://farm9.staticflickr.com/8583/16047803903_0820f9834d.jpg","02":"https://farm4.staticflickr.com/3169/2988799601_2f187a7bb8.jpg","01":"https://farm9.staticflickr.com/8373/8389456987_8c15ec272f.jpg"}},"wolf":{"english":"wolf","type":"plural","bangla":"nekre bagh","bLetters":"নএক্রএ বঘ্","index":81,"img":{"05":"https://farm6.staticflickr.com/5062/5767911832_6840a9c92c.jpg","04":"https://farm9.staticflickr.com/8527/8468252269_bf25d01351.jpg","03":"https://farm8.staticflickr.com/7209/6994239253_ab2253305b.jpg","02":"https://farm1.staticflickr.com/56/148292918_266dec39e8.jpg","01":"https://farm4.staticflickr.com/3516/5767909554_458f82dff9.jpg"}},"wolves":{"english":"wolves","type":"plural","bangla":"nekre bagh gulo","bLetters":"নএক্রএ বঘ্ গুলও","index":83,"img":{"05":"https://farm9.staticflickr.com/8527/8468252269_bf25d01351.jpg","04":"https://farm8.staticflickr.com/7209/6994239253_ab2253305b.jpg","03":"https://farm6.staticflickr.com/5478/10894408424_1c69683539.jpg","02":"https://farm1.staticflickr.com/56/148292918_266dec39e8.jpg","01":"https://farm4.staticflickr.com/3516/5767909554_458f82dff9.jpg"}}},"objects":{"objects":{"english":"objects","type":"objects","bangla":"uddesso ","bLetters":"&#x989;&#x9A1;&#x9CD;&#x9A1;&#x98F;&#x9B8;&#x9CD;&#x9B8;&#x993; ","index":0,"img":{"05":"https://farm1.staticflickr.com/121/297018594_8a296d8d1c.jpg","04":"https://farm3.staticflickr.com/2821/9553827394_f829b2cc38.jpg","03":"https://farm8.staticflickr.com/7325/15761061463_8b67132dd7.jpg","02":"https://farm8.staticflickr.com/7287/8864243830_ea93e5405b.jpg","01":"https://farm5.staticflickr.com/4008/4216814000_f9118928fd.jpg"}},"shampoo":{"english":"shampoo","type":"objects","bangla":"shampoo","bLetters":"&#x9B6;&#x9AE;&#x9CD;&#x9AA;&#x9C2;","index":1,"img":{"05":"https://farm9.staticflickr.com/8332/8382862694_990c0fa926.jpg","04":"https://farm8.staticflickr.com/7438/9620727730_a6233fa791.jpg","03":"https://farm9.staticflickr.com/8188/8382847902_4f4f71940b.jpg","02":"https://farm8.staticflickr.com/7286/8737736498_8496c57a19.jpg","01":"https://farm9.staticflickr.com/8378/8358868470_1e1d6e345c.jpg"}},"soap":{"english":"soap","type":"objects","bangla":"saban","bLetters":"&#x9B8;&#x9AC;&#x9A8;&#x9CD;","index":2,"img":{"05":"https://farm7.staticflickr.com/6136/6032583716_1243d733bb.jpg","04":"https://farm8.staticflickr.com/7491/15940896206_334e3725a8.jpg","03":"https://farm4.staticflickr.com/3636/5710275118_e73acb0b14.jpg","02":"https://farm7.staticflickr.com/6209/6119942055_88407a9f60.jpg","01":"https://farm7.staticflickr.com/6136/6002345198_2f3e631116.jpg"}},"towel":{"english":"towel","type":"objects","bangla":"toale","bLetters":"&#x99F;&#x993;&#x985;&#x9B2;&#x98F;","index":3,"img":{"05":"https://farm2.staticflickr.com/1314/836430566_af1329eaf6.jpg","04":"https://farm3.staticflickr.com/2910/14651347006_04f79967da.jpg","03":"https://farm4.staticflickr.com/3918/14679319604_edcfe6d511.jpg","02":"https://farm6.staticflickr.com/5508/14686833703_e4690716ee.jpg","01":"https://farm3.staticflickr.com/2328/2354415857_5243f07334.jpg"}},"toothbrush":{"english":"toothbrush","type":"objects","bangla":"dat majar brash","bLetters":"&#x9A1;&#x99F;&#x9CD; &#x9AE;&#x99C;&#x9B0;&#x9CD; &#x9AC;&#x9CD;&#x9B0;&#x9B6;&#x9CD;","index":4,"img":{"05":"https://farm4.staticflickr.com/3417/3304226162_d0677fffec.jpg","04":"https://farm6.staticflickr.com/5240/5825691814_1206c6f70f.jpg","03":"https://farm9.staticflickr.com/8186/8079348579_af1c3f1bcf.jpg","02":"https://farm8.staticflickr.com/7268/13855437513_6f7baa0a81.jpg","01":"https://farm1.staticflickr.com/540/19831942842_1bb0ec3852.jpg"}},"toothpaste":{"english":"toothpaste","type":"objects","bangla":"dater majon","bLetters":"&#x9A1;&#x99F;&#x98F;&#x9B0;&#x9CD; &#x9AE;&#x99C;&#x993;&#x9A8;&#x9CD;","index":5,"img":{"05":"https://farm8.staticflickr.com/7784/17301973943_64e2325308.jpg","04":"https://farm8.staticflickr.com/7077/6862751108_d8fe9ee251.jpg","03":"https://farm8.staticflickr.com/7008/6576363035_38d9d49b02.jpg","02":"https://farm1.staticflickr.com/188/412580888_de8a8e276d.jpg","01":"https://farm6.staticflickr.com/5538/9567936413_46fa1cdb98.jpg"}},"bed":{"english":"bed","type":"objects","bangla":"bisana","bLetters":"&#x9AC;&#x9BF;&#x9B8;&#x9A8;","index":6,"img":{"05":"https://farm4.staticflickr.com/3057/2884135028_81da01934a.jpg","04":"https://farm7.staticflickr.com/6071/6158659127_295b597b9a.jpg","03":"https://farm4.staticflickr.com/3573/3681124095_b156642078.jpg","02":"https://farm1.staticflickr.com/68/198784420_90275414d6.jpg","01":"https://farm3.staticflickr.com/2919/14321467025_135b91ac62.jpg"}},"refrigerator":{"english":"refrigerator","type":"objects","bangla":"frigf","bLetters":"f&#x9B0;&#x9BF;&#x997;&#x9CD;","index":7,"img":{"05":"https://farm6.staticflickr.com/5067/5660505282_de2f4e79b0.jpg","04":"https://farm3.staticflickr.com/2612/3911603331_2313904a5e.jpg","03":"https://farm4.staticflickr.com/3800/11307200314_9c4cc7ec68.jpg","02":"https://farm1.staticflickr.com/187/411332543_a63e7f11fb.jpg","01":"https://farm4.staticflickr.com/3211/2283082279_db2ebb9cb6.jpg"}},"table":{"english":"table","type":"objects","bangla":"table, lomba chouki, ","bLetters":"&#x99F;&#x9AC;&#x9CD;&#x9B2;&#x98F;, &#x9B2;&#x993;&#x9AE;&#x9CD;&#x9AC; &#x99A;&#x993;&#x989;&#x995;&#x9BF;, ","index":8,"img":{"05":"https://farm3.staticflickr.com/2562/3917509817_a57974cf18.jpg","04":"https://farm4.staticflickr.com/3110/3135563993_0d37847a35.jpg","03":"https://farm1.staticflickr.com/23/28916908_64db9841f3.jpg","02":"https://farm8.staticflickr.com/7170/6415553169_401ee8c1e7.jpg","01":"https://farm6.staticflickr.com/5182/5641925520_f0fee5c592.jpg"}},"cup":{"english":"cup","type":"objects","bangla":"pewala","bLetters":"&#x9AA;&#x98F;w&#x985;&#x9B2;","index":9,"img":{"05":"https://farm5.staticflickr.com/4094/4892479540_fbf4151576.jpg","04":"https://farm8.staticflickr.com/7014/6569963357_66f676b23a.jpg","03":"https://farm4.staticflickr.com/3911/14639454281_d878c9df5a.jpg","02":"https://farm6.staticflickr.com/5013/5570923745_2deb49111f.jpg","01":"https://farm8.staticflickr.com/7089/6995450970_a031e901c8.jpg"}},"fork":{"english":"fork","type":"objects","bangla":"kata chamach","bLetters":"&#x995;&#x99F; &#x99A;&#x9AE;&#x99A;&#x9CD;","index":10,"img":{"05":"https://farm7.staticflickr.com/6030/5888014979_d31cc65076.jpg","04":"https://farm6.staticflickr.com/5022/5622180903_dab30325c5.jpg","03":"https://farm9.staticflickr.com/8060/8203315329_8343b8a38a.jpg","02":"https://farm6.staticflickr.com/5094/5498466569_e52af10ce3.jpg","01":"https://farm3.staticflickr.com/2398/1965708320_f42b8aa9a8.jpg"}},"knife":{"english":"knife","type":"objects","bangla":"suri (just for cut)","bLetters":"&#x9B8;&#x9C1;&#x9B0;&#x9BF; (&#x99C;&#x9C1;&#x9B8;&#x9CD;&#x99F;&#x9CD; f&#x993;&#x9B0;&#x9CD; c&#x989;&#x99F;&#x9CD;)","index":11,"img":{"05":"https://farm7.staticflickr.com/6050/6277632983_f9d906f3b1.jpg","04":"https://farm8.staticflickr.com/7041/6989374606_479956d731.jpg","03":"https://farm6.staticflickr.com/5114/7092319589_3aef26f145.jpg","02":"https://farm5.staticflickr.com/4078/4851642241_662acaeab8.jpg","01":"https://farm5.staticflickr.com/4025/4560831706_0372290564.jpg"}}},"prepositions":{"about":{"english":"about","type":"prepositions","bangla":"somondhe","bLetters":"সওমওন্দএ","index":1,"img":{"05":"https://farm3.staticflickr.com/2235/2215218333_b3d94db674.jpg","04":"https://farm3.staticflickr.com/2867/11258060494_fabbc2ba4a.jpg","03":"https://farm8.staticflickr.com/7090/7123103563_695997f37a.jpg","02":"https://farm9.staticflickr.com/8282/7791956344_b6ae00d16c.jpg","01":"https://farm7.staticflickr.com/6217/6852484574_b68a550d86.jpg"}},"above":{"english":"above","type":"prepositions","bangla":"upore","bLetters":"উপওরএ","index":3,"img":{"05":"https://farm4.staticflickr.com/3882/14919197677_5de21f2d44.jpg","04":"https://farm8.staticflickr.com/7492/16076745667_b2e01254ac.jpg","03":"https://farm8.staticflickr.com/7289/8732226918_9e600eef2e.jpg","02":"https://farm8.staticflickr.com/7017/6534848417_5a48c20cc9.jpg","01":"https://farm4.staticflickr.com/3123/2810902473_e585028258.jpg"}},"across":{"english":"across","type":"prepositions","bangla":"opor pare","bLetters":"ওপওর্ পরএ","index":5,"img":{"05":"https://farm4.staticflickr.com/3643/3678247094_da6b464b7d.jpg","04":"https://farm3.staticflickr.com/2082/2348554314_dabcb7771d.jpg","03":"https://farm3.staticflickr.com/2852/9446055067_b904b14f3f.jpg","02":"https://farm8.staticflickr.com/7103/7335396966_042cd3786c.jpg","01":"https://farm7.staticflickr.com/6034/5897171831_3e325aa690.jpg"}},"after":{"english":"after","type":"prepositions","bangla":"pore","bLetters":"পওরএ","index":7,"img":{"05":"https://farm3.staticflickr.com/2006/2357762440_4a08fb3fba.jpg","04":"https://farm4.staticflickr.com/3879/14549916498_99597391f5.jpg","03":"https://farm8.staticflickr.com/7535/16035665421_3df0306d48.jpg","02":"https://farm8.staticflickr.com/7033/6724760355_97f441f0aa.jpg","01":"https://farm8.staticflickr.com/7421/16225078928_7f43c81ffa.jpg"}},"against":{"english":"against","type":"prepositions","bangla":"pokkhe","bLetters":"পওক্খএ","index":9,"img":{"05":"https://farm3.staticflickr.com/2363/2394982465_d1b124f735.jpg","04":"https://farm1.staticflickr.com/202/476538508_b6277f79ec.jpg","03":"https://farm9.staticflickr.com/8475/8147228135_b6ed4cd3ee.jpg","02":"https://farm3.staticflickr.com/2003/3530808952_1f5261edf8.jpg","01":"https://farm4.staticflickr.com/3231/2653579166_93cd9ff48b.jpg"}},"among":{"english":"among","type":"prepositions","bangla":"segulo","bLetters":"সএগুলও","index":11,"img":{"05":"https://farm3.staticflickr.com/2824/9433922128_1fff6ae0b3.jpg","04":"https://farm6.staticflickr.com/5011/5487662185_0d32b6d0d7.jpg","03":"https://farm3.staticflickr.com/2595/4100162789_c91a252b3e.jpg","02":"https://farm1.staticflickr.com/775/20625304393_7042224893.jpg","01":"https://farm8.staticflickr.com/7378/11660405685_b21efd2cda.jpg"}},"around":{"english":"around","type":"prepositions","bangla":"ghora","bLetters":"ঘওর","index":13,"img":{"05":"https://farm8.staticflickr.com/7366/9742141734_efa87e00c9.jpg","04":"https://farm6.staticflickr.com/5053/5547202839_d001bee8c8.jpg","03":"https://farm6.staticflickr.com/5523/10729304454_edc203a5f1.jpg","02":"https://farm4.staticflickr.com/3661/3483026656_e056fb3fa4.jpg","01":"https://farm3.staticflickr.com/2936/14449027227_81c0517a17.jpg"}},"as":{"english":"as","type":"prepositions","bangla":"hisebe","bLetters":"হিসএবএ","index":15,"img":{"05":"https://farm7.staticflickr.com/6223/6330008163_deedd801a5.jpg","04":"https://farm2.staticflickr.com/1260/4724909434_7bb155f876.jpg","03":"https://farm4.staticflickr.com/3344/3639801056_0a11f46c09.jpg","02":"https://farm5.staticflickr.com/4039/5158580474_f30209abd3.jpg","01":"https://farm6.staticflickr.com/5103/5620581113_3a0c4e0270.jpg"}},"at":{"english":"at","type":"prepositions","bangla":"ata, ai bivinno kheter baborito hoy","bLetters":"অট, ঐ বিবিন্নও খএটএর্ ববওরিটও হওয্","index":17,"img":{"05":"https://farm4.staticflickr.com/3331/5833481593_437344d7ea.jpg","04":"https://farm3.staticflickr.com/2680/4266660145_3967053fd0.jpg","03":"https://farm2.staticflickr.com/1631/23647748940_e2a78eaf93.jpg","02":"https://farm4.staticflickr.com/3662/3323388726_d4b57212f7.jpg","01":"https://farm8.staticflickr.com/7408/16316821480_daa36bfe12.jpg"}},"before":{"english":"before","type":"prepositions","bangla":"purbe","bLetters":"পুর্বএ","index":19,"img":{"05":"https://farm4.staticflickr.com/3429/3223927402_e5d221b813.jpg","04":"https://farm3.staticflickr.com/2549/4197857682_0011a0d59b.jpg","03":"https://farm4.staticflickr.com/3288/2931530240_7a15393db5.jpg","02":"https://farm6.staticflickr.com/5042/5363155143_3028168b48.jpg","01":"https://farm8.staticflickr.com/7390/9494914422_7ca18d9cb1.jpg"}},"behind":{"english":"behind","type":"prepositions","bangla":"hondo, pesone","bLetters":"হওন্ডও, পএসওনএ","index":21,"img":{"05":"https://farm9.staticflickr.com/8217/8367613481_525350e44c.jpg","04":"https://farm1.staticflickr.com/483/18605393291_c7cf6b62bf.jpg","03":"https://farm1.staticflickr.com/519/19648301589_5269dbf1c3.jpg","02":"https://farm1.staticflickr.com/250/522683458_b9759c10e0.jpg","01":"https://farm7.staticflickr.com/6182/6133030445_935efeeccf.jpg"}},"below":{"english":"below","type":"prepositions","bangla":"niche","bLetters":"নিচএ","index":23,"img":{"05":"https://farm5.staticflickr.com/4090/4986576088_5e20a69297.jpg","04":"https://farm8.staticflickr.com/7436/14105943666_bbe5db3cf8.jpg","03":"https://farm6.staticflickr.com/5763/22883251329_5632e557d9.jpg","02":"https://farm3.staticflickr.com/2066/2068754859_a0b7770c68.jpg","01":"https://farm3.staticflickr.com/2918/14013891563_a6969f06b2.jpg"}},"beneath":{"english":"beneath","type":"prepositions","bangla":"niche, tole","bLetters":"নিচএ, টওলএ","index":25,"img":{"05":"https://farm9.staticflickr.com/8200/8257945639_5c79409b01.jpg","04":"https://farm8.staticflickr.com/7038/7068161369_b55fa04629.jpg","03":"https://farm5.staticflickr.com/4045/4632904647_f25307a1c2.jpg","02":"https://farm4.staticflickr.com/3379/3443251739_887f960fa6.jpg","01":"https://farm9.staticflickr.com/8255/8621958454_b27296ded0.jpg"}},"beside":{"english":"beside","type":"prepositions","bangla":"parshe","bLetters":"পর্শএ","index":27,"img":{"05":"https://farm6.staticflickr.com/5482/11177934624_82d7cfd6e9.jpg","04":"https://farm9.staticflickr.com/8648/16255683529_a84c5d22bc.jpg","03":"https://farm7.staticflickr.com/6129/5950921033_a09392cb04.jpg","02":"https://farm9.staticflickr.com/8754/17539508116_688062713f.jpg","01":"https://farm2.staticflickr.com/1273/5186572533_2fe6e0bc1a.jpg"}},"between":{"english":"between","type":"prepositions","bangla":"duyer moddho","bLetters":"ডুযএর্ মওড্দও","index":29,"img":{"05":"https://farm8.staticflickr.com/7171/6585294023_9c46e5a065.jpg","04":"https://farm9.staticflickr.com/8476/8101834590_c822ef4339.jpg","03":"https://farm1.staticflickr.com/690/22799291983_59bffa23e9.jpg","02":"https://farm6.staticflickr.com/5593/14860484433_ed00849f3d.jpg","01":"https://farm4.staticflickr.com/3050/2549652870_773ce44c3f.jpg"}},"beyond":{"english":"beyond","type":"prepositions","bangla":"atit, aticrom koria","bLetters":"অটিট্, অটিcরওম্ কওরিঅ","index":31,"img":{"05":"https://farm4.staticflickr.com/3343/4618141694_b2dc959c31.jpg","04":"https://farm5.staticflickr.com/4104/5096443656_9362afd868.jpg","03":"https://farm5.staticflickr.com/4093/4814780038_9be6924b58.jpg","02":"https://farm8.staticflickr.com/7489/15614921749_a3bb0c6347.jpg","01":"https://farm8.staticflickr.com/7361/12984740953_40c97000b0.jpg"}},"but":{"english":"but","type":"prepositions","bangla":"kinto","bLetters":"কিন্টও","index":33,"img":{"05":"https://farm3.staticflickr.com/2434/5795331142_d749c5446f.jpg","04":"https://farm5.staticflickr.com/4082/4741399358_9fbea26cbf.jpg","03":"https://farm2.staticflickr.com/1348/1255878394_6715653a25.jpg","02":"https://farm8.staticflickr.com/7382/16521572635_a3e35b3f7c.jpg","01":"https://farm8.staticflickr.com/7005/6506940893_b58fa946a2.jpg"}},"by":{"english":"by","type":"prepositions","bangla":"dara","bLetters":"ডর","index":35,"img":{"05":"https://farm6.staticflickr.com/5572/14750483514_9d74211901.jpg","04":"https://farm4.staticflickr.com/3628/5813985243_8fd3d0e79b.jpg","03":"https://farm4.staticflickr.com/3719/12678730623_01afd5239e.jpg","02":"https://farm9.staticflickr.com/8641/15467942717_379b1be448.jpg","01":"https://farm5.staticflickr.com/4049/4242972917_ee88612b01.jpg"}},"despite":{"english":"despite","type":"prepositions","bangla":"beddes, abogga","bLetters":"বএড্ডএস্, অবওগ্গ","index":37,"img":{"05":"https://farm6.staticflickr.com/5582/14660231710_ba6ccac5e2.jpg","04":"https://farm7.staticflickr.com/6129/5976139404_0ff6ac22f5.jpg","03":"https://farm8.staticflickr.com/7009/6445625363_384dba3ce9.jpg","02":"https://farm4.staticflickr.com/3883/14518636697_da64310045.jpg","01":"https://farm7.staticflickr.com/6064/6059716894_3f5fe5e959.jpg"}},"down":{"english":"down","type":"prepositions","bangla":"niche","bLetters":"নিচএ","index":39,"img":{"05":"https://farm1.staticflickr.com/111/291836148_997b564d46.jpg","04":"https://farm4.staticflickr.com/3944/15298630277_ae91c50237.jpg","03":"https://farm4.staticflickr.com/3035/2511194448_bd27b6142a.jpg","02":"https://farm4.staticflickr.com/3757/13739663925_0dfdb09df1.jpg","01":"https://farm4.staticflickr.com/3382/5771444661_3ab48109e4.jpg"}},"during":{"english":"during","type":"prepositions","bangla":"cholitese","bLetters":"চওলিটএসএ","index":41,"img":{"05":"https://farm4.staticflickr.com/3588/5738655885_1502f8e5a4.jpg","04":"https://farm4.staticflickr.com/3208/3830631572_29edce1a37.jpg","03":"https://farm6.staticflickr.com/5776/22177215965_4d725cc4a5.jpg","02":"https://farm5.staticflickr.com/4045/4223949477_50a61a2c4d.jpg","01":"https://farm1.staticflickr.com/577/23720997226_a7c5bf9917.jpg"}},"except":{"english":"except","type":"prepositions","bangla":"grohon kora","bLetters":"গ্রওহওন্ কওর","index":43,"img":{"05":"https://farm1.staticflickr.com/188/396779479_968d98a899.jpg","04":"https://farm1.staticflickr.com/138/396779661_457dfe9eff.jpg","03":"https://farm3.staticflickr.com/2601/3736435314_5200da693a.jpg","02":"https://farm2.staticflickr.com/1215/1374965198_10bd6ffcb1.jpg","01":"https://farm4.staticflickr.com/3417/3350424334_1147b3cd99.jpg"}},"for":{"english":"for","type":"prepositions","bangla":"jonno","bLetters":"জওন্নও","index":45,"img":{"05":"https://farm3.staticflickr.com/2517/4099383165_65f1c84dfe.jpg","04":"https://farm4.staticflickr.com/3936/15308369600_6af54f591a.jpg","03":"https://farm5.staticflickr.com/4146/5030241799_94e93ac639.jpg","02":"https://farm4.staticflickr.com/3453/3379147456_4f26eef252.jpg","01":"https://farm4.staticflickr.com/3513/3247081399_bb90404418.jpg"}},"from":{"english":"from","type":"prepositions","bangla":"hoite","bLetters":"হওইটএ","index":47,"img":{"05":"https://farm6.staticflickr.com/5581/14549255011_88fa68b1a4.jpg","04":"https://farm7.staticflickr.com/6144/5974076872_c2a6da6c89.jpg","03":"https://farm7.staticflickr.com/6045/6251088714_79d018ccaa.jpg","02":"https://farm8.staticflickr.com/7089/6928902006_58fa6f3e61.jpg","01":"https://farm3.staticflickr.com/2252/2277220710_c16e825f51.jpg"}},"in":{"english":"in","type":"prepositions","bangla":"moddhe","bLetters":"মওড্দএ","index":49,"img":{"05":"https://farm5.staticflickr.com/4079/4912778109_8155129bd1.jpg","04":"https://farm4.staticflickr.com/3929/15270119248_7c855cf413.jpg","03":"https://farm4.staticflickr.com/3485/3869790661_2203801b68.jpg","02":"https://farm3.staticflickr.com/2942/15330450191_7de67dd2e3.jpg","01":"https://farm5.staticflickr.com/4071/5131162675_e7cf422c81.jpg"}},"inside":{"english":"inside","type":"prepositions","bangla":"vetore","bLetters":"বএটওরএ","index":51,"img":{"05":"https://farm2.staticflickr.com/1269/4703649505_0bde767e64.jpg","04":"https://farm4.staticflickr.com/3795/9507252970_1444b6d809.jpg","03":"https://farm1.staticflickr.com/216/474011718_a62f2978e1.jpg","02":"https://farm8.staticflickr.com/7304/9316267918_877ecff770.jpg","01":"https://farm6.staticflickr.com/5088/5252750905_34752e68c2.jpg"}},"into":{"english":"into","type":"prepositions","bangla":"majhkhane","bLetters":"মঝ্খনএ","index":53,"img":{"05":"https://farm5.staticflickr.com/4134/4830617813_2fa871e462.jpg","04":"https://farm4.staticflickr.com/3125/2882770651_7c502a21de.jpg","03":"https://farm9.staticflickr.com/8601/16049226641_2ce9d600a2.jpg","02":"https://farm8.staticflickr.com/7159/6592525633_97d0e6a7e9.jpg","01":"https://farm8.staticflickr.com/7704/17097358938_e7375e6249.jpg"}},"near":{"english":"near","type":"prepositions","bangla":"nikote","bLetters":"নিকওটএ","index":55,"img":{"05":"https://farm3.staticflickr.com/2544/3884903748_170cf6e02e.jpg","04":"https://farm7.staticflickr.com/6014/6200904500_3b8ceebe00.jpg","03":"https://farm6.staticflickr.com/5008/5225907296_bdff181104.jpg","02":"https://farm8.staticflickr.com/7318/11061283685_5ac4eabc23.jpg","01":"https://farm9.staticflickr.com/8031/8020855060_5a0fcca565.jpg"}},"next":{"english":"next","type":"prepositions","bangla":"pore","bLetters":"পওরএ","index":57,"img":{"05":"https://farm8.staticflickr.com/7002/6762616769_508a080623.jpg","04":"https://farm8.staticflickr.com/7576/15996891910_bffc4b4ff9.jpg","03":"https://farm4.staticflickr.com/3174/3006486888_19a8ac3c5c.jpg","02":"https://farm4.staticflickr.com/3321/3212951091_efafc20f8c.jpg","01":"https://farm4.staticflickr.com/3180/3006486858_4c07b159a0.jpg"}},"of":{"english":"of","type":"prepositions","bangla":"ar, ar jonno","bLetters":"অর্, অর্ জওন্নও","index":59,"img":{"05":"https://farm8.staticflickr.com/7410/10264841545_f881ef5337.jpg","04":"https://farm1.staticflickr.com/26/66759796_f50937d433.jpg","03":"https://farm8.staticflickr.com/7075/7172652330_6e92011a20.jpg","02":"https://farm2.staticflickr.com/1266/4681358773_f5e0f61ee0.jpg","01":"https://farm4.staticflickr.com/3109/2846634396_56dd4417d3.jpg"}},"on":{"english":"on","type":"prepositions","bangla":"ar","bLetters":"অর্","index":61,"img":{"05":"https://farm4.staticflickr.com/3936/15272748059_38b094a81e.jpg","04":"https://farm4.staticflickr.com/3169/2754464979_6176245651.jpg","03":"https://farm3.staticflickr.com/2837/9669426963_586fe4012b.jpg","02":"https://farm8.staticflickr.com/7175/6847931043_e8816c96ec.jpg","01":"https://farm3.staticflickr.com/2780/4059144740_065841d754.jpg"}},"opposite":{"english":"opposite","type":"prepositions","bangla":"biporit","bLetters":"বিপওরিট্","index":63,"img":{"05":"https://farm3.staticflickr.com/2858/9755391201_3d54d3cc36.jpg","04":"https://farm8.staticflickr.com/7298/9743750600_da5d79f9b2.jpg","03":"https://farm9.staticflickr.com/8202/8178941760_5c7035c7ac.jpg","02":"https://farm3.staticflickr.com/2886/10696821946_7c0537ec27.jpg","01":"https://farm5.staticflickr.com/4015/4437753553_42627eace6.jpg"}},"out":{"english":"out","type":"prepositions","bangla":"bahire","bLetters":"বহিরএ","index":65,"img":{"05":"https://farm9.staticflickr.com/8411/8704432890_626c87d45d.jpg","04":"https://farm9.staticflickr.com/8221/8330174290_d75ba239dd.jpg","03":"https://farm4.staticflickr.com/3028/2504395847_96ef53e570.jpg","02":"https://farm8.staticflickr.com/7410/9310541585_076604f422.jpg","01":"https://farm3.staticflickr.com/2870/8912474058_202949a826.jpg"}},"outside":{"english":"outside","type":"prepositions","bangla":"bahire","bLetters":"বহিরএ","index":67,"img":{"05":"https://farm3.staticflickr.com/2470/3960965231_fb30cbab61.jpg","04":"https://farm8.staticflickr.com/7522/16209959905_61a5d2e6c4.jpg","03":"https://farm9.staticflickr.com/8342/8275416569_5d1743279b.jpg","02":"https://farm1.staticflickr.com/590/21379514273_4b407ce2d2.jpg","01":"https://farm9.staticflickr.com/8180/8035705158_5464b7cbcf.jpg"}},"over":{"english":"over","type":"prepositions","bangla":"projoner cheo beshi","bLetters":"প্রওজওনএর্ চএও বএশি","index":69,"img":{"05":"https://farm7.staticflickr.com/6173/6250854511_073d9c8827.jpg","04":"https://farm9.staticflickr.com/8117/8659837261_f947feef92.jpg","03":"https://farm3.staticflickr.com/2317/1797976048_b4824ec29f.jpg","02":"https://farm6.staticflickr.com/5187/5831577147_f3b51e079b.jpg","01":"https://farm8.staticflickr.com/7581/16035552822_f883e27f0f.jpg"}},"per":{"english":"per","type":"prepositions","bangla":"proti, prottek","bLetters":"প্রওটি, প্রওট্টএক্","index":71,"img":{"05":"https://farm4.staticflickr.com/3851/14797944081_1874cf3710.jpg","04":"https://farm9.staticflickr.com/8566/15743555554_7e5de8a109.jpg","03":"https://farm6.staticflickr.com/5012/5505336735_6d0916884c.jpg","02":"https://farm4.staticflickr.com/3475/4575342847_e60d1f72f2.jpg","01":"https://farm8.staticflickr.com/7406/15888177873_5f49e4ff85.jpg"}},"plus":{"english":"plus","type":"prepositions","bangla":"add, jog","bLetters":"অড্ড্, জওগ্","index":73,"img":{"05":"https://farm8.staticflickr.com/7059/13527994235_220617e807.jpg","04":"https://farm6.staticflickr.com/5179/5403734041_5ddcc47275.jpg","03":"https://farm4.staticflickr.com/3948/15291242940_af313a3a55.jpg","02":"https://farm6.staticflickr.com/5643/23415369533_86dff5d58d.jpg","01":"https://farm6.staticflickr.com/5774/20641420355_9ae39e7aa6.jpg"}},"round":{"english":"round","type":"prepositions","bangla":"ghora","bLetters":"ঘওর","index":75,"img":{"05":"https://farm9.staticflickr.com/8355/8388225469_fa9f553b1f.jpg","04":"https://farm8.staticflickr.com/7449/8927620612_905b511ee3.jpg","03":"https://farm9.staticflickr.com/8360/8384474537_aaa3daac2d.jpg","02":"https://farm6.staticflickr.com/5323/9422602919_aecd73eb07.jpg","01":"https://farm4.staticflickr.com/3930/15494614145_8a30750111.jpg"}},"since":{"english":"since","type":"prepositions","bangla":"nirdisto korte bujhay","bLetters":"নির্ডিস্টও কওর্টএ বুঝয্","index":77,"img":{"05":"https://farm5.staticflickr.com/4010/4341189301_31f0465542.jpg","04":"https://farm4.staticflickr.com/3618/3446284569_af831d7eb5.jpg","03":"https://farm3.staticflickr.com/2877/8910456418_fe87879794.jpg","02":"https://farm8.staticflickr.com/7240/7245510954_5634441b1f.jpg","01":"https://farm9.staticflickr.com/8494/8304220419_870499e1c0.jpg"}},"than":{"english":"than","type":"prepositions","bangla":"cheye","bLetters":"চএযএ","index":79,"img":{"05":"https://farm8.staticflickr.com/7188/6854318041_f37f14be61.jpg","04":"https://farm3.staticflickr.com/2702/5847134273_55aea15a9a.jpg","03":"https://farm8.staticflickr.com/7522/15938506521_e14760035c.jpg","02":"https://farm8.staticflickr.com/7365/9031418132_28493b6cab.jpg","01":"https://farm8.staticflickr.com/7034/6815416717_81566415ba.jpg"}},"through":{"english":"through","type":"prepositions","bangla":"nikkhep kora","bLetters":"নিক্খএপ্ কওর","index":81,"img":{"05":"https://farm6.staticflickr.com/5610/15757632182_11f0bc954c.jpg","04":"https://farm4.staticflickr.com/3858/14951294257_f154d22def.jpg","03":"https://farm1.staticflickr.com/165/424692438_b5eaded2fa.jpg","02":"https://farm3.staticflickr.com/2586/3767773323_c9e1efa884.jpg","01":"https://farm2.staticflickr.com/1248/1434233807_db0f291bcf.jpg"}},"till":{"english":"till","type":"prepositions","bangla":"akhono","bLetters":"অখওনও","index":83,"img":{"05":"https://farm3.staticflickr.com/2765/4040998144_f267b7f5bd.jpg","04":"https://farm8.staticflickr.com/7354/16467567491_cb70cbd7a7.jpg","03":"https://farm5.staticflickr.com/4027/5082110336_c55b9af0e3.jpg","02":"https://farm3.staticflickr.com/2878/9113854437_10f35b3816.jpg","01":"https://farm4.staticflickr.com/3160/3045204381_f1f53a7b67.jpg"}},"to":{"english":"to","type":"prepositions","bangla":"hote, theke, cheye","bLetters":"হওটএ, তএকএ, চএযএ","index":85,"img":{"05":"https://farm7.staticflickr.com/6031/6271480297_b4ffcac694.jpg","04":"https://farm4.staticflickr.com/3388/3250738882_f34266bf06.jpg","03":"https://farm3.staticflickr.com/2518/4140600011_f2ca0e81d9.jpg","02":"https://farm8.staticflickr.com/7161/6811529723_368dec3cd7.jpg","01":"https://farm3.staticflickr.com/2093/2120910097_ec308c44f5.jpg"}},"toward":{"english":"toward","type":"prepositions","bangla":"totpor, asonno","bLetters":"টওট্পওর্, অসওন্নও","index":87,"img":{"05":"https://farm8.staticflickr.com/7413/10877610286_db140e877e.jpg","04":"https://farm3.staticflickr.com/2150/2231368287_86e5228767.jpg","03":"https://farm6.staticflickr.com/5128/5330396217_39c5d38f6a.jpg","02":"https://farm9.staticflickr.com/8321/7970128074_a210a89084.jpg","01":"https://farm9.staticflickr.com/8250/8483491863_df9fd2e46a.jpg"}},"under":{"english":"under","type":"prepositions","bangla":"niche","bLetters":"নিচএ","index":89,"img":{"05":"https://farm4.staticflickr.com/3163/2608701126_ff0fe2340f.jpg","04":"https://farm4.staticflickr.com/3101/2435896643_47273a8142.jpg","03":"https://farm5.staticflickr.com/4066/4690410138_20d5d313a8.jpg","02":"https://farm9.staticflickr.com/8418/8844353199_0af4071650.jpg","01":"https://farm4.staticflickr.com/3178/3011696571_765880e329.jpg"}},"unlike":{"english":"unlike","type":"prepositions","bangla":"auposondo, kora","bLetters":"ঔপওসওন্ডও, কওর","index":91,"img":{"05":"https://farm9.staticflickr.com/8360/8314480976_b2cff3c7f0.jpg","04":"https://farm8.staticflickr.com/7076/7233587266_cb0d5c3a4a.jpg","03":"https://farm6.staticflickr.com/5488/9324988429_4f903e4dd8.jpg","02":"https://farm5.staticflickr.com/4050/4378156005_e1fc4565d2.jpg","01":"https://farm4.staticflickr.com/3725/10979375483_dfb4df1dd1.jpg"}},"until":{"english":"until","type":"prepositions","bangla":"porjonto","bLetters":"পওর্জওন্টও","index":93,"img":{"05":"https://farm9.staticflickr.com/8255/8628045041_c72bfafe29.jpg","04":"https://farm3.staticflickr.com/2111/2116734402_a98b3b0310.jpg","03":"https://farm8.staticflickr.com/7500/16003342019_6afbdf3966.jpg","02":"https://farm8.staticflickr.com/7263/7777949280_e22525729e.jpg","01":"https://farm4.staticflickr.com/3514/4032135813_933e274299.jpg"}},"up":{"english":"up","type":"prepositions","bangla":"upore","bLetters":"উপওরএ","index":95,"img":{"05":"https://farm7.staticflickr.com/6100/6308378648_a56469fb04.jpg","04":"https://farm4.staticflickr.com/3702/10872056586_bfa2354c9c.jpg","03":"https://farm4.staticflickr.com/3061/2629345754_634f93eec7.jpg","02":"https://farm8.staticflickr.com/7565/15661586404_1a4630d65f.jpg","01":"https://farm8.staticflickr.com/7727/17164722962_5ba64112fa.jpg"}},"via":{"english":"via","type":"prepositions","bangla":"protilipi","bLetters":"প্রওটিলিপি","index":97,"img":{"05":"https://farm4.staticflickr.com/3652/3450473266_03a1a8c3cc.jpg","04":"https://farm4.staticflickr.com/3046/3057651433_764e2eccfd.jpg","03":"https://farm9.staticflickr.com/8015/7286397056_f9a08fe6a5.jpg","02":"https://farm7.staticflickr.com/6207/6079182196_b37e2b5f09.jpg","01":"https://farm4.staticflickr.com/3505/3176775018_e9326ef0de.jpg"}},"with":{"english":"with","type":"prepositions","bangla":"dara","bLetters":"ডর","index":99,"img":{"05":"https://farm5.staticflickr.com/4131/5039820296_7dfcbd8843.jpg","04":"https://farm8.staticflickr.com/7295/9444101953_e9e3b143e8.jpg","03":"https://farm8.staticflickr.com/7015/6523570835_5d49731b86.jpg","02":"https://farm4.staticflickr.com/3554/3337407688_a39e53cb4c.jpg","01":"https://farm9.staticflickr.com/8503/8301169828_bac1b8e2ea.jpg"}},"within":{"english":"within","type":"prepositions","bangla":"vetore, moddhe","bLetters":"বএটওরএ, মওড্দএ","index":101,"img":{"05":"https://farm3.staticflickr.com/2499/4174521172_8698dd49e3.jpg","04":"https://farm4.staticflickr.com/3617/3385617091_9e6837e73b.jpg","03":"https://farm8.staticflickr.com/7328/11051210273_3cfbebd763.jpg","02":"https://farm9.staticflickr.com/8609/16474667647_cb951f0682.jpg","01":"https://farm4.staticflickr.com/3685/11807497624_ecdd29e83e.jpg"}},"without":{"english":"without","type":"prepositions","bangla":"tasara","bLetters":"টসর","index":103,"img":{"05":"https://farm7.staticflickr.com/6084/6063761782_5aa559a85b.jpg","04":"https://farm9.staticflickr.com/8797/18440442692_99b8b424d2.jpg","03":"https://farm8.staticflickr.com/7173/6563208121_375d00b071.jpg","02":"https://farm4.staticflickr.com/3556/3503892679_c1e6f0ab61.jpg","01":"https://farm5.staticflickr.com/4025/4443782986_e1e8a7d2c6.jpg"}},"two words":{"english":"two words","type":"prepositions","bangla":"duti sobdo","bLetters":"ডুটি সওব্ডও","index":107,"img":{"05":"https://farm1.staticflickr.com/86/222874696_e3358eee4e.jpg","04":"https://farm1.staticflickr.com/141/328008034_408ae4cd26.jpg","03":"https://farm1.staticflickr.com/148/421343770_9eddf74e49.jpg","02":"https://farm4.staticflickr.com/3599/3370725022_92e84150cb.jpg","01":"https://farm3.staticflickr.com/2887/12054875984_4f33e8f4b5.jpg"}},"according to":{"english":"according to","type":"prepositions","bangla":"aunusare","bLetters":"ঔনুসরএ","index":109,"img":{"05":"https://farm6.staticflickr.com/5504/9528301853_525c295eca.jpg","04":"https://farm4.staticflickr.com/3390/3475703003_7408495d30.jpg","03":"https://farm4.staticflickr.com/3773/13187712703_1c51b08c18.jpg","02":"https://farm8.staticflickr.com/7213/7000530241_68b896475f.jpg","01":"https://farm8.staticflickr.com/7172/6439055129_43a6da21d5.jpg"}},"because of":{"english":"because of","type":"prepositions","bangla":"ai karone","bLetters":"ঐ করওনএ","index":111,"img":{"05":"https://farm1.staticflickr.com/50/137095405_3f21f31bd1.jpg","04":"https://farm4.staticflickr.com/3173/3971403614_8d863b3d28.jpg","03":"https://farm6.staticflickr.com/5347/9119905171_df915b4b0f.jpg","02":"https://farm4.staticflickr.com/3072/2568703238_4caf2d125a.jpg","01":"https://farm8.staticflickr.com/7693/16939536728_c783398bbd.jpg"}},"close to":{"english":"close to","type":"prepositions","bangla":"bondo korte","bLetters":"বওন্ডও কওর্টএ","index":113,"img":{"05":"https://farm7.staticflickr.com/6079/6058542166_5087767d86.jpg","04":"https://farm4.staticflickr.com/3417/3471359493_ce77e837a4.jpg","03":"https://farm4.staticflickr.com/3077/2712416516_f9b11005d9.jpg","02":"https://farm4.staticflickr.com/3586/3603245737_25a05db77e.jpg","01":"https://farm9.staticflickr.com/8372/8517235034_905076a8e5.jpg"}},"due to":{"english":"due to","type":"prepositions","bangla":"karon bosoto","bLetters":"করওন্ বওসওটও","index":115,"img":{"05":"https://farm7.staticflickr.com/6062/6116596196_be537df3cd.jpg","04":"https://farm4.staticflickr.com/3857/15130934047_cc0ba79a33.jpg","03":"https://farm3.staticflickr.com/2529/3689306585_d7239db665.jpg","02":"https://farm9.staticflickr.com/8091/8559656337_8961bb3dd0.jpg","01":"https://farm4.staticflickr.com/3738/11664185205_1d77b84a42.jpg"}},"except for":{"english":"except for","type":"prepositions","bangla":"grohon joggo","bLetters":"গ্রওহওন্ জওগ্গও","index":117,"img":{"05":"https://farm2.staticflickr.com/1569/24160342454_386de671b5.jpg","04":"https://farm9.staticflickr.com/8049/8119668470_370cc4a1a4.jpg","03":"https://farm9.staticflickr.com/8423/7750707424_4b18601b8d.jpg","02":"https://farm2.staticflickr.com/1558/24045270180_a0f969e8dd.jpg","01":"https://farm5.staticflickr.com/4142/4774347190_93149a9c3f.jpg"}},"far from":{"english":"far from","type":"prepositions","bangla":"dur hoite","bLetters":"ডুর্ হওইটএ","index":119,"img":{"05":"https://farm7.staticflickr.com/6181/6208056611_f6648aa876.jpg","04":"https://farm8.staticflickr.com/7540/15771327360_b64b2e524c.jpg","03":"https://farm6.staticflickr.com/5527/9197494751_48d0da60bc.jpg","02":"https://farm3.staticflickr.com/2820/9610518416_554bc1be3f.jpg","01":"https://farm9.staticflickr.com/8568/16625273011_8d267770ce.jpg"}},"inside of":{"english":"inside of","type":"prepositions","bangla":"nikot hoite","bLetters":"নিকওট্ হওইটএ","index":121,"img":{"05":"https://farm4.staticflickr.com/3782/13124902685_eee44fef74.jpg","04":"https://farm8.staticflickr.com/7394/16521847131_5535bf79d7.jpg","03":"https://farm8.staticflickr.com/7642/17189733541_c36644bb46.jpg","02":"https://farm7.staticflickr.com/6237/6265449135_d49f894cdf.jpg","01":"https://farm8.staticflickr.com/7544/16094399007_44a0741e55.jpg"}},"instead of":{"english":"instead of","type":"prepositions","bangla":"sthole, bodole, poriborte","bLetters":"স্তওলএ, বওডওলএ, পওরিবওর্টএ","index":123,"img":{"05":"https://farm3.staticflickr.com/2366/3634547739_a7c423f20d.jpg","04":"https://farm9.staticflickr.com/8157/7295136388_e3eeb81dda.jpg","03":"https://farm5.staticflickr.com/4031/4273321780_76a4041bd8.jpg","02":"https://farm3.staticflickr.com/2660/4211705089_9ef79f460b.jpg","01":"https://farm8.staticflickr.com/7161/13941213216_8b919fefe8.jpg"}},"near to":{"english":"near to","type":"prepositions","bangla":"oti nikote","bLetters":"ওটি নিকওটএ","index":125,"img":{"05":"https://farm4.staticflickr.com/3910/14662502273_ff5ca49d97.jpg","04":"https://farm5.staticflickr.com/4151/5001055265_2a40fced67.jpg","03":"https://farm4.staticflickr.com/3281/2457456663_8af698f7cc.jpg","02":"https://farm4.staticflickr.com/3088/2458287582_64532a0304.jpg","01":"https://farm3.staticflickr.com/2294/2458285430_71fe9475af.jpg"}},"next to":{"english":"next to","type":"prepositions","bangla":"porobortite","bLetters":"পওরওবওর্টিটএ","index":127,"img":{"05":"https://farm8.staticflickr.com/7002/6762616769_508a080623.jpg","04":"https://farm8.staticflickr.com/7576/15996891910_bffc4b4ff9.jpg","03":"https://farm4.staticflickr.com/3174/3006486888_19a8ac3c5c.jpg","02":"https://farm4.staticflickr.com/3321/3212951091_efafc20f8c.jpg","01":"https://farm4.staticflickr.com/3180/3006486858_4c07b159a0.jpg"}},"outside of":{"english":"outside of","type":"prepositions","bangla":"bahir hoite","bLetters":"বহির্ হওইটএ","index":129,"img":{"05":"https://farm3.staticflickr.com/2936/13971832212_67f7a91f80.jpg","04":"https://farm3.staticflickr.com/2429/3767071432_124649f001.jpg","03":"https://farm7.staticflickr.com/6099/5911160203_dbd8df3261.jpg","02":"https://farm8.staticflickr.com/7299/16168547958_a1423ae0f4.jpg","01":"https://farm3.staticflickr.com/2033/4512961276_b4d897c321.jpg"}},"prior to":{"english":"prior to","type":"prepositions","bangla":"purbe, age","bLetters":"পুর্বএ, অগএ","index":131,"img":{"05":"https://farm3.staticflickr.com/2683/4434553557_e58012e0a7.jpg","04":"https://farm8.staticflickr.com/7350/16475812605_dd66231c56.jpg","03":"https://farm9.staticflickr.com/8384/8678228500_1589be5a31.jpg","02":"https://farm4.staticflickr.com/3674/13923036135_57057e684e.jpg","01":"https://farm9.staticflickr.com/8883/16841215523_4f778dc8bb.jpg"}},"three words":{"english":"three words","type":"prepositions","bangla":"thinti sobdo","bLetters":"তিন্টি সওব্ডও","index":135,"img":{"05":"https://farm8.staticflickr.com/7379/9704867886_78dcb728eb.jpg","04":"https://farm2.staticflickr.com/1148/3175115590_42314407ec.jpg","03":"https://farm4.staticflickr.com/3429/3400761000_771a58a283.jpg","02":"https://farm2.staticflickr.com/1101/3174334227_edc60fcc72.jpg","01":"https://farm4.staticflickr.com/3333/3175443345_a1a34ba9b4.jpg"}},"as far as":{"english":"as far as","type":"prepositions","bangla":"joto dur, toto dur","bLetters":"জওটও ডুর্, টওটও ডুর্","index":137,"img":{"05":"https://farm8.staticflickr.com/7504/16294057395_b2c476b770.jpg","04":"https://farm7.staticflickr.com/6079/6044268556_44b0b87789.jpg","03":"https://farm4.staticflickr.com/3080/2773730601_5510c1b4dc.jpg","02":"https://farm3.staticflickr.com/2455/3767371738_f24e8caf37.jpg","01":"https://farm8.staticflickr.com/7677/17078361637_fa573be3ec.jpg"}},"as well as":{"english":"as well as","type":"prepositions","bangla":"joto taratari","bLetters":"জওটও টরটরি","index":139,"img":{"05":"https://farm9.staticflickr.com/8582/15931637390_5f90cdc82a.jpg","04":"https://farm8.staticflickr.com/7399/11438957466_7109421c4d.jpg","03":"https://farm6.staticflickr.com/5612/14972361634_318730d5d3.jpg","02":"https://farm9.staticflickr.com/8526/8476335154_a68843285d.jpg","01":"https://farm1.staticflickr.com/168/487231263_e55ff43845.jpg"}},"in addition to":{"english":"in addition to","type":"prepositions","bangla":"asokto korte","bLetters":"অসওক্টও কওর্টএ","index":141,"img":{"05":"https://farm5.staticflickr.com/4005/4200232885_6ddc81efdb.jpg","04":"https://farm3.staticflickr.com/2472/3644590676_d132baeeb6.jpg","03":"https://farm1.staticflickr.com/82/262736035_814868fb7a.jpg","02":"https://farm5.staticflickr.com/4097/4923730606_db5e438a42.jpg","01":"https://farm9.staticflickr.com/8012/6970859384_ae44da32b4.jpg"}},"in front of":{"english":"in front of","type":"prepositions","bangla":"sommukkhe/ samone","bLetters":"সওম্মুক্খএ/ সমওনএ","index":143,"img":{"05":"https://farm9.staticflickr.com/8520/8546124305_b7a464f3df.jpg","04":"https://farm9.staticflickr.com/8529/8489607167_7ec5e3d636.jpg","03":"https://farm8.staticflickr.com/7164/6773291879_b9a27b0596.jpg","02":"https://farm8.staticflickr.com/7402/10497304916_3156fa8916.jpg","01":"https://farm3.staticflickr.com/2056/2525921160_9fa9c5c9b9.jpg"}},"in spite of":{"english":"in spite of","type":"prepositions","bangla":"sotteo, ta sotteo","bLetters":"সওট্টএও, ট সওট্টএও","index":145,"img":{"05":"https://farm2.staticflickr.com/1320/5136944285_9601afc024.jpg","04":"https://farm3.staticflickr.com/2703/4066884116_778d70f095.jpg","03":"https://farm5.staticflickr.com/4039/5136945487_eb551a937f.jpg","02":"https://farm3.staticflickr.com/2300/2682650811_5f9da8fde7.jpg","01":"https://farm4.staticflickr.com/3567/3520121025_3b1dbcb915.jpg"}},"on behalf of":{"english":"on behalf of","type":"prepositions","bangla":"uporokto","bLetters":"উপওরওক্টও","index":147,"img":{"05":"https://farm4.staticflickr.com/3164/2488784531_dd2ac35edb.jpg","04":"https://farm3.staticflickr.com/2296/2488783879_fb664ffb01.jpg","03":"https://farm4.staticflickr.com/3486/3238111839_be1805f319.jpg","02":"https://farm6.staticflickr.com/5216/5454010989_198d119f24.jpg","01":"https://farm2.staticflickr.com/1053/4596472160_e582925491.jpg"}},"on top of":{"english":"on top of","type":"prepositions","bangla":"urdhe","bLetters":"উর্দএ","index":149,"img":{"05":"https://farm4.staticflickr.com/3637/3621046597_5b6999b139.jpg","04":"https://farm2.staticflickr.com/1265/1363780750_b31b6208c7.jpg","03":"https://farm9.staticflickr.com/8214/8340575063_8813b9f664.jpg","02":"https://farm2.staticflickr.com/1351/1363780498_f0bf2b26f9.jpg","01":"https://farm4.staticflickr.com/3902/14733175688_ccd131c4cf.jpg"}},"demonstrative pronouns":{"english":"demonstrative pronouns","type":"prepositions","bangla":"nirdesok sobdo/ utso","bLetters":"নির্ডএসওক্ সওব্ডও/ উট্সও","index":153,"img":{"05":"https://farm4.staticflickr.com/3859/14583482080_4b1e7ee618.jpg","04":"https://farm8.staticflickr.com/7782/17306314606_669fbffe45.jpg","03":"https://farm3.staticflickr.com/2237/2221487988_062cf0bb24.jpg","02":"https://farm9.staticflickr.com/8049/8126937266_2d43a0550b.jpg","01":"https://farm9.staticflickr.com/8195/8126910173_5c559ef1e2.jpg"}},"this":{"english":"this","type":"prepositions","bangla":"ai","bLetters":"ঐ","index":155,"img":{"05":"https://farm8.staticflickr.com/7201/6844369256_595ae57243.jpg","04":"https://farm9.staticflickr.com/8358/8325822064_c1b0eee87d.jpg","03":"https://farm9.staticflickr.com/8759/16634973203_3d556186f1.jpg","02":"https://farm7.staticflickr.com/6218/6231837488_98fff1d447.jpg","01":"https://farm6.staticflickr.com/5499/14516094285_dbee7f3ede.jpg"}},"that":{"english":"that","type":"prepositions","bangla":"oi","bLetters":"ওই","index":157,"img":{"05":"https://farm4.staticflickr.com/3044/4565207618_5fa25b9716.jpg","04":"https://farm5.staticflickr.com/4136/4929900405_be93f931a6.jpg","03":"https://farm3.staticflickr.com/2710/4151097188_cfa2197648.jpg","02":"https://farm4.staticflickr.com/3248/2764138854_b42cdc80c8.jpg","01":"https://farm3.staticflickr.com/2782/4121469821_481412b715.jpg"}},"these":{"english":"these","type":"prepositions","bangla":"ai gulo","bLetters":"ঐ গুলও","index":159,"img":{"05":"https://farm9.staticflickr.com/8285/7802673638_24274af77f.jpg","04":"https://farm9.staticflickr.com/8344/8181958927_234286fc5f.jpg","03":"https://farm4.staticflickr.com/3569/5794769864_b0149c83d1.jpg","02":"https://farm3.staticflickr.com/2598/3992057897_8708269c8b.jpg","01":"https://farm6.staticflickr.com/5213/5409754241_457b1e0fa8.jpg"}},"those":{"english":"those","type":"prepositions","bangla":"oi gulo","bLetters":"ওই গুলও","index":161,"img":{"05":"https://farm3.staticflickr.com/2824/8835908008_9f41d0a952.jpg","04":"https://farm9.staticflickr.com/8680/16234139257_63390a9e0e.jpg","03":"https://farm8.staticflickr.com/7174/6661757757_12db92dc05.jpg","02":"https://farm4.staticflickr.com/3654/3350994870_c6b9e0d1b3.jpg","01":"https://farm4.staticflickr.com/3067/2440901241_2f218dd8c8.jpg"}}},"people":{"people":{"english":"people","type":"people","bangla":"jonogon","bLetters":"&#x99C;&#x993;&#x9A8;&#x993;&#x997;&#x993;&#x9A8;&#x9CD;","index":0,"img":{"05":"https://farm6.staticflickr.com/5583/14167871183_89602b6791.jpg","04":"https://farm4.staticflickr.com/3760/11025469124_d0903fbd35.jpg","03":"https://farm4.staticflickr.com/3737/13148302505_b00b9e055b.jpg","02":"https://farm4.staticflickr.com/3774/13376440614_e7a97bafdf.jpg","01":"https://farm1.staticflickr.com/481/19421180632_2ea1a79f55.jpg"}},"husband":{"english":"husband","type":"people","bangla":"sami, daman","bLetters":"&#x9B8;&#x9AE;&#x9BF;, &#x9A1;&#x9AE;&#x9A8;&#x9CD;","index":1,"img":{"05":"https://farm3.staticflickr.com/2727/4484438788_b9a1f9968e.jpg","04":"https://farm9.staticflickr.com/8691/16790770076_8c52d36eec.jpg","03":"https://farm6.staticflickr.com/5169/5348479150_250c49ee52.jpg","02":"https://farm4.staticflickr.com/3523/3855149334_bf299fbfb4.jpg","01":"https://farm5.staticflickr.com/4065/4631992628_8f6c0dcd67.jpg"}},"wife":{"english":"wife","type":"people","bangla":"bodhu, bou","bLetters":"&#x9AC;&#x993;&#x9A6;&#x9C1;, &#x9AC;&#x993;&#x989;","index":2,"img":{"05":"https://farm1.staticflickr.com/170/427553387_a7d98c9d4b.jpg","04":"https://farm6.staticflickr.com/5086/5226675031_e501c039ce.jpg","03":"https://farm6.staticflickr.com/5127/5226675061_345637ffa7.jpg","02":"https://farm1.staticflickr.com/57/175111188_7f3f5f0016.jpg","01":"https://farm4.staticflickr.com/3621/3521593841_e7cc27feb4.jpg"}},"father":{"english":"father","type":"people","bangla":"baba, abba","bLetters":"&#x9AC;&#x9AC;, &#x985;&#x9AC;&#x9CD;&#x9AC;","index":3,"img":{"05":"https://farm3.staticflickr.com/2593/3864804834_c79c753273.jpg","04":"https://farm5.staticflickr.com/4009/4638837595_95ea2b01b0.jpg","03":"https://farm8.staticflickr.com/7444/8716685895_112a89c25e.jpg","02":"https://farm3.staticflickr.com/2321/2213604048_e9963a3eb0.jpg","01":"https://farm8.staticflickr.com/7195/6925270577_808985d773.jpg"}},"mother":{"english":"mother","type":"people","bangla":"ma, amma","bLetters":"&#x9AE;, &#x985;&#x9AE;&#x9CD;&#x9AE;","index":4,"img":{"05":"https://farm8.staticflickr.com/7217/7047688833_9fc7732049.jpg","04":"https://farm2.staticflickr.com/1076/1012192931_482c179ca5.jpg","03":"https://farm9.staticflickr.com/8070/8204923574_895231a159.jpg","02":"https://farm8.staticflickr.com/7171/6796776617_08f1c9c609.jpg","01":"https://farm5.staticflickr.com/4093/4856958482_fc149effb5.jpg"}},"son":{"english":"son","type":"people","bangla":"putro, sele","bLetters":"&#x9AA;&#x9C1;&#x99F;&#x9CD;&#x9B0;&#x993;, &#x9B8;&#x98F;&#x9B2;&#x98F;","index":5,"img":{"05":"https://farm3.staticflickr.com/2119/1578085111_c1a6d03f0f.jpg","04":"https://farm9.staticflickr.com/8375/8418859874_e401447c67.jpg","03":"https://farm5.staticflickr.com/4113/5030758078_58616f442c.jpg","02":"https://farm5.staticflickr.com/4037/4384038858_90d5db0b50.jpg","01":"https://farm8.staticflickr.com/7225/7315667346_b3581d32f4.jpg"}},"daughter":{"english":"daughter","type":"people","bangla":"konna, mayea","bLetters":"&#x995;&#x993;&#x9A8;&#x9CD;&#x9A8;, &#x9AE;&#x9AF;&#x98F;&#x985;","index":6,"img":{"05":"https://farm5.staticflickr.com/4102/4762683290_5621636e5b.jpg","04":"https://farm4.staticflickr.com/3232/2616835071_f0f20a461d.jpg","03":"https://farm9.staticflickr.com/8463/8405650945_90a19d6b90.jpg","02":"https://farm9.staticflickr.com/8142/6982971076_50c1bb1136.jpg","01":"https://farm8.staticflickr.com/7455/9721224749_6c1bf74b24.jpg"}},"brother":{"english":"brother","type":"people","bangla":"vai","bLetters":"&#x9AC;&#x990;","index":7,"img":{"05":"https://farm3.staticflickr.com/2281/2193880654_79da413485.jpg","04":"https://farm3.staticflickr.com/2275/2128314506_d164147faa.jpg","03":"https://farm3.staticflickr.com/2383/2128310784_7d2696ee05.jpg","02":"https://farm6.staticflickr.com/5604/15450486758_bfe7386d3a.jpg","01":"https://farm1.staticflickr.com/115/293983649_29c333a541.jpg"}},"grandfather":{"english":"grandfather","type":"people","bangla":"dada, nana","bLetters":"&#x9A1;&#x9A1;, &#x9A8;&#x9A8;","index":8,"img":{"05":"https://farm1.staticflickr.com/201/493986197_c216a90bde.jpg","04":"https://farm6.staticflickr.com/5601/15439143657_b01c9cb970.jpg","03":"https://farm3.staticflickr.com/2685/4461381817_a7281dcce9.jpg","02":"https://farm9.staticflickr.com/8378/8376302721_4913631ecc.jpg","01":"https://farm9.staticflickr.com/8459/8068748969_e253e3dae5.jpg"}},"grandmother":{"english":"grandmother","type":"people","bangla":"dadi, nani","bLetters":"&#x9A1;&#x9A1;&#x9BF;, &#x9A8;&#x9A8;&#x9BF;","index":9,"img":{"05":"https://farm5.staticflickr.com/4080/4910239269_6164f8275a.jpg","04":"https://farm7.staticflickr.com/6226/6222466177_8bfdd09036.jpg","03":"https://farm4.staticflickr.com/3035/2457926760_c77d95132b.jpg","02":"https://farm8.staticflickr.com/7044/6854988809_15ac2cb772.jpg","01":"https://farm7.staticflickr.com/6232/6247223369_f640f52eb0.jpg"}}},"weather":{"weather":{"english":"weather","type":"weather","bangla":"abohawa","bLetters":"&#x985;&#x9AC;&#x993;&#x9B9;w&#x985;","index":0,"img":{"05":"https://farm3.staticflickr.com/2458/3682276061_2e179540f0.jpg","04":"https://farm3.staticflickr.com/2380/2449248268_553c55face.jpg","03":"https://farm9.staticflickr.com/8788/16979934657_dc081baebb.jpg","02":"https://farm3.staticflickr.com/2830/12322280583_c146663751.jpg","01":"https://farm2.staticflickr.com/1710/24840755496_2ef35a29c1.jpg"}},"windy":{"english":"windy","type":"weather","bangla":"probaho man","bLetters":"&#x9AA;&#x9CD;&#x9B0;&#x993;&#x9AC;&#x9B9;&#x993; &#x9AE;&#x9A8;&#x9CD;","index":1,"img":{"05":"https://farm8.staticflickr.com/7490/16049000658_9e35080217.jpg","04":"https://farm1.staticflickr.com/36/122917629_397ad7d445.jpg","03":"https://farm4.staticflickr.com/3834/10168674856_0468052575.jpg","02":"https://farm1.staticflickr.com/117/311573098_7a629f7d12.jpg","01":"https://farm8.staticflickr.com/7544/16060936656_50a974758b.jpg"}},"cloudy":{"english":"cloudy","type":"weather","bangla":"meghassonno","bLetters":"&#x9AE;&#x98F;&#x998;&#x9B8;&#x9CD;&#x9B8;&#x993;&#x9A8;&#x9CD;&#x9A8;&#x993;","index":2,"img":{"05":"https://farm5.staticflickr.com/4073/4875370556_b5a82bbd4e.jpg","04":"https://farm4.staticflickr.com/3929/15486546235_15c2363f7e.jpg","03":"https://farm4.staticflickr.com/3408/3221642997_5a91f48077.jpg","02":"https://farm9.staticflickr.com/8655/16043454004_5c326cc83f.jpg","01":"https://farm4.staticflickr.com/3282/2588017706_401bdaa38b.jpg"}},"raining":{"english":"raining","type":"weather","bangla":"bristi pora, bristi hosse","bLetters":"&#x9AC;&#x9CD;&#x9B0;&#x9BF;&#x9B8;&#x9CD;&#x99F;&#x9BF; &#x9AA;&#x993;&#x9B0;, &#x9AC;&#x9CD;&#x9B0;&#x9BF;&#x9B8;&#x9CD;&#x99F;&#x9BF; &#x9B9;&#x993;&#x9B8;&#x9CD;&#x9B8;&#x98F;","index":3,"img":{"05":"https://farm3.staticflickr.com/2492/3841917978_c83f2db67b.jpg","04":"https://farm4.staticflickr.com/3545/3328062020_ede33886b4.jpg","03":"https://farm8.staticflickr.com/7736/17367298716_4959e98c6d.jpg","02":"https://farm9.staticflickr.com/8810/17468998011_e4155c3ec0.jpg","01":"https://farm8.staticflickr.com/7351/14180039174_a57ee2eed7.jpg"}},"cold":{"english":"cold","type":"weather","bangla":"thanda, sordi","bLetters":"&#x9A4;&#x9A8;&#x9CD;&#x9A1;, &#x9B8;&#x993;&#x9B0;&#x9CD;&#x9A1;&#x9BF;","index":4,"img":{"05":"https://farm9.staticflickr.com/8079/8344887197_080d32ee6d.jpg","04":"https://farm8.staticflickr.com/7360/11908386514_c29abc03c4.jpg","03":"https://farm9.staticflickr.com/8074/8277177606_ca036786dd.jpg","02":"https://farm8.staticflickr.com/7517/15956496979_bfc3e595ce.jpg","01":"https://farm8.staticflickr.com/7516/16056458030_858fd4b286.jpg"}},"snowing":{"english":"snowing","type":"weather","bangla":"tusar pat hoitese","bLetters":"&#x99F;&#x9C1;&#x9B8;&#x9B0;&#x9CD; &#x9AA;&#x99F;&#x9CD; &#x9B9;&#x993;&#x987;&#x99F;&#x98F;&#x9B8;&#x98F;","index":5,"img":{"05":"https://farm9.staticflickr.com/8123/8644158155_bff7a9d06c.jpg","04":"https://farm4.staticflickr.com/3803/11746148285_b4fdf27781.jpg","03":"https://farm8.staticflickr.com/7437/16310216569_f942edce52.jpg","02":"https://farm5.staticflickr.com/4018/4486252227_53873b0374.jpg","01":"https://farm9.staticflickr.com/8708/16844090112_d608234aee.jpg"}},"sunny":{"english":"sunny","type":"weather","bangla":"ujjol, alok moy","bLetters":"&#x989;&#x99C;&#x9CD;&#x99C;&#x993;&#x9B2;&#x9CD;, &#x985;&#x9B2;&#x993;&#x995;&#x9CD; &#x9AE;&#x993;&#x9AF;&#x9CD;","index":6,"img":{"05":"https://farm6.staticflickr.com/5508/12687367165_85e7eef499.jpg","04":"https://farm8.staticflickr.com/7073/7275454046_193c5ed077.jpg","03":"https://farm3.staticflickr.com/2701/4345362041_8f97f22321.jpg","02":"https://farm1.staticflickr.com/190/508901620_b48894494b.jpg","01":"https://farm3.staticflickr.com/2902/14375757536_bb31c391df.jpg"}},"hot":{"english":"hot","type":"weather","bangla":"gorom","bLetters":"&#x997;&#x993;&#x9B0;&#x993;&#x9AE;&#x9CD;","index":7,"img":{"05":"https://farm3.staticflickr.com/2772/4469785951_240835a19f.jpg","04":"https://farm3.staticflickr.com/2402/3534292449_fd76f6232c.jpg","03":"https://farm4.staticflickr.com/3408/3592548434_755ea60573.jpg","02":"https://farm4.staticflickr.com/3092/3535107540_778b8d3db7.jpg","01":"https://farm4.staticflickr.com/3066/3095551590_8675efb527.jpg"}},"autumn":{"english":"autumn","type":"weather","bangla":"sorotkal","bLetters":"&#x9B8;&#x993;&#x9B0;&#x993;&#x99F;&#x9CD;&#x995;&#x9B2;&#x9CD;","index":8,"img":{"05":"https://farm2.staticflickr.com/1677/24374921621_ff3b16442b.jpg","04":"https://farm2.staticflickr.com/1451/24511998576_4fbfa1b712.jpg","03":"https://farm2.staticflickr.com/1457/24454448900_32a6946e7e.jpg","02":"https://farm2.staticflickr.com/1517/24424932249_4c432a6682.jpg","01":"https://farm1.staticflickr.com/100/317184224_fffde7547e.jpg"}},"winter":{"english":"winter","type":"weather","bangla":"shitkal","bLetters":"&#x9B6;&#x9BF;&#x99F;&#x9CD;&#x995;&#x9B2;&#x9CD;","index":9,"img":{"05":"https://farm2.staticflickr.com/1550/25016214081_454a85dd48.jpg","04":"https://farm2.staticflickr.com/1521/24754963979_21b3dcf68a.jpg","03":"https://farm2.staticflickr.com/1487/25122231436_0b52e5bd4a.jpg","02":"https://farm2.staticflickr.com/1687/24533978454_c5c75599b9.jpg","01":"https://farm2.staticflickr.com/1681/24541798994_f62a6c2ef9.jpg"}},"spring":{"english":"spring","type":"weather","bangla":"bosonto kal","bLetters":"&#x9AC;&#x993;&#x9B8;&#x993;&#x9A8;&#x9CD;&#x99F;&#x993; &#x995;&#x9B2;&#x9CD;","index":10,"img":{"05":"https://farm1.staticflickr.com/639/23744318455_c1d2a65849.jpg","04":"https://farm1.staticflickr.com/718/23118142554_efa355758b.jpg","03":"https://farm2.staticflickr.com/1567/24027159851_8c41d23fc1.jpg","02":"https://farm2.staticflickr.com/1665/24263629670_94a09441aa.jpg","01":"https://farm2.staticflickr.com/1628/24584020092_6c85ddca14.jpg"}},"summer":{"english":"summer","type":"weather","bangla":"grissokal","bLetters":"&#x997;&#x9CD;&#x9B0;&#x9BF;&#x9B8;&#x9CD;&#x9B8;&#x993;&#x995;&#x9B2;&#x9CD;","index":11,"img":{"05":"https://farm1.staticflickr.com/726/23686768571_e9442b8bb5.jpg","04":"https://farm6.staticflickr.com/5655/23992401266_c55372a9ac.jpg","03":"https://farm2.staticflickr.com/1532/24315935916_d22599c268.jpg","02":"https://farm2.staticflickr.com/1665/24263629670_94a09441aa.jpg","01":"https://farm1.staticflickr.com/28/42572743_9fb8ce5864.jpg"}}},"negation":{"I don't speak":{"english":"I don't speak","type":"negation","bangla":"ami boli na","bLetters":"অমি বওলি ন","index":1,"img":{"05":"https://farm4.staticflickr.com/3493/4049676823_69cc1f7177.jpg","04":"https://farm8.staticflickr.com/7482/16323932505_0b4103d588.jpg","03":"https://farm7.staticflickr.com/6122/6029608643_16e1ac0244.jpg","02":"https://farm4.staticflickr.com/3041/2925005600_c9a3c2c59d.jpg","01":"https://farm3.staticflickr.com/2652/3690374946_aeac894953.jpg"}},"I don't write":{"english":"I don't write","type":"negation","bangla":"ami likhi na","bLetters":"অমি লিখি ন","index":3,"img":{"05":"https://farm6.staticflickr.com/5712/20812956812_509121080e.jpg","04":"https://farm3.staticflickr.com/2772/4044043168_6aaf9c8532.jpg","03":"https://farm4.staticflickr.com/3738/9266261847_5a0e56e69d.jpg","02":"https://farm5.staticflickr.com/4025/4583994596_e4b3734a8c.jpg","01":"https://farm9.staticflickr.com/8485/8259793465_d99913239f.jpg"}},"I don't drive":{"english":"I don't drive","type":"negation","bangla":"ami chali na","bLetters":"অমি চলি ন","index":5,"img":{"05":"https://farm7.staticflickr.com/6212/6249485617_969f4da788.jpg","04":"https://farm5.staticflickr.com/4045/4453517812_45a10ec5f6.jpg","03":"https://farm5.staticflickr.com/4026/4472657184_5893218fee.jpg","02":"https://farm4.staticflickr.com/3643/3436084914_f6ccf35eca.jpg","01":"https://farm3.staticflickr.com/2891/9482738521_bff92b7834.jpg"}},"I don't love":{"english":"I don't love","type":"negation","bangla":"ami valo basi na","bLetters":"অমি বলও বসি ন","index":7,"img":{"05":"https://farm4.staticflickr.com/3196/2930386978_d8d9b8dfcc.jpg","04":"https://farm4.staticflickr.com/3902/15187397857_9bf2e5c1df.jpg","03":"https://farm8.staticflickr.com/7133/7440488422_8eb971265c.jpg","02":"https://farm1.staticflickr.com/197/504485673_47cfd6afff.jpg","01":"https://farm3.staticflickr.com/2862/12936156513_b5ed72db7d.jpg"}},"I don't give":{"english":"I don't give","type":"negation","bangla":"ami dei na","bLetters":"অমি ডএই ন","index":9,"img":{"05":"https://farm4.staticflickr.com/3096/3207715558_553cb3d15a.jpg","04":"https://farm3.staticflickr.com/2695/4183448075_753d305341.jpg","03":"https://farm8.staticflickr.com/7147/6829444867_a48a0a703f.jpg","02":"https://farm1.staticflickr.com/188/387492762_c2c28f0eac.jpg","01":"https://farm3.staticflickr.com/2066/2354421514_89d2ec179c.jpg"}},"I don't smile":{"english":"I don't smile","type":"negation","bangla":"ami hasi na","bLetters":"অমি হসি ন","index":11,"img":{"05":"https://farm5.staticflickr.com/4086/5001635081_e55ffb8f01.jpg","04":"https://farm4.staticflickr.com/3240/2790037114_1595ba8268.jpg","03":"https://farm5.staticflickr.com/4108/5080752619_860062bfca.jpg","02":"https://farm4.staticflickr.com/3597/3448662989_c6710eb40a.jpg","01":"https://farm2.staticflickr.com/1312/591251415_22f0b9e5dd.jpg"}},"I don't take":{"english":"I don't take","type":"negation","bangla":"ami nei na","bLetters":"অমি নএই ন","index":13,"img":{"05":"https://farm4.staticflickr.com/3602/3384086033_e485e09734.jpg","04":"https://farm4.staticflickr.com/3581/3691153664_f6c07ce777.jpg","03":"https://farm8.staticflickr.com/7144/6742548465_17acfa6eb2.jpg","02":"https://farm5.staticflickr.com/4025/4656168259_d2267a7f79.jpg","01":"https://farm3.staticflickr.com/2432/3662673655_d440753edd.jpg"}},"he doesn't  speak":{"english":"he doesn't  speak","type":"negation","bangla":"se bole na","bLetters":"সএ বওলএ ন","index":17,"img":{"05":"https://farm5.staticflickr.com/4081/4930447476_a02226a5d5.jpg","04":"https://farm5.staticflickr.com/4075/4884158928_0722d1710d.jpg","03":"https://farm5.staticflickr.com/4077/4850893172_64b7d5c193.jpg","02":"https://farm7.staticflickr.com/6122/6029608643_16e1ac0244.jpg","01":"https://farm7.staticflickr.com/6095/6325371019_02b3d771dc.jpg"}},"he doesn't  write":{"english":"he doesn't  write","type":"negation","bangla":"se lekhe na","bLetters":"সএ লএখএ ন","index":19,"img":{"05":"https://farm9.staticflickr.com/8484/8226980000_ceea98b882.jpg","04":"https://farm7.staticflickr.com/6122/6029608643_16e1ac0244.jpg","03":"https://farm1.staticflickr.com/95/321377181_9fb6bf163a.jpg","02":"https://farm3.staticflickr.com/2669/3743589305_3b89d6ab59.jpg","01":"https://farm5.staticflickr.com/4115/4911328477_d9cfba9ecc.jpg"}},"he doesn't  drive":{"english":"he doesn't  drive","type":"negation","bangla":"se chaly na","bLetters":"সএ চল্য্ ন","index":21,"img":{"05":"https://farm7.staticflickr.com/6095/6325371019_02b3d771dc.jpg","04":"https://farm3.staticflickr.com/2161/2402608152_7b5cf334d2.jpg","03":"https://farm3.staticflickr.com/2566/5839826740_d70989a906.jpg","02":"https://farm4.staticflickr.com/3002/3095163310_4cef05e6f9.jpg","01":"https://farm5.staticflickr.com/4115/4911328477_d9cfba9ecc.jpg"}},"he doesn't  love":{"english":"he doesn't  love","type":"negation","bangla":"se valo base na","bLetters":"সএ বলও বসএ ন","index":23,"img":{"05":"https://farm4.staticflickr.com/3344/3236341237_4d28df30f0.jpg","04":"https://farm1.staticflickr.com/231/524422846_e29c37cc44.jpg","03":"https://farm4.staticflickr.com/3462/3976672829_4ff885fb4c.jpg","02":"https://farm4.staticflickr.com/3092/2605071528_37b7aef081.jpg","01":"https://farm4.staticflickr.com/3229/2599360506_9efc12848c.jpg"}},"he doesn't  give":{"english":"he doesn't  give","type":"negation","bangla":"se dey na","bLetters":"সএ ডএয্ ন","index":25,"img":{"05":"https://farm1.staticflickr.com/734/21589214424_b04a49ac1b.jpg","04":"https://farm3.staticflickr.com/2130/2426823290_0ba7ab6e30.jpg","03":"https://farm5.staticflickr.com/4060/4452719382_9e8072927d.jpg","02":"https://farm5.staticflickr.com/4090/5055818900_38432619b7.jpg","01":"https://farm1.staticflickr.com/758/22208057728_ac487334a7.jpg"}},"he doesn't  smile":{"english":"he doesn't  smile","type":"negation","bangla":"se hase na","bLetters":"সএ হসএ ন","index":27,"img":{"05":"https://farm7.staticflickr.com/6132/5961370417_a7a8186eb5.jpg","04":"https://farm4.staticflickr.com/3039/2692391869_a027584065.jpg","03":"https://farm9.staticflickr.com/8256/8664900651_620ee7697e.jpg","02":"https://farm9.staticflickr.com/8568/16031663452_70e2b8238b.jpg","01":"https://farm6.staticflickr.com/5178/5438892369_65d6f6aa3f.jpg"}},"he doesn't  take":{"english":"he doesn't  take","type":"negation","bangla":"se ney na","bLetters":"সএ নএয্ ন","index":29,"img":{"05":"https://farm5.staticflickr.com/4115/4911328477_d9cfba9ecc.jpg","04":"https://farm5.staticflickr.com/4064/4292405699_1c7c55d827.jpg","03":"https://farm3.staticflickr.com/2634/3822559732_905cb787f6.jpg","02":"https://farm9.staticflickr.com/8539/8621080601_209c86f3b8.jpg","01":"https://farm4.staticflickr.com/3412/3601345858_decc050bdd.jpg"}},"we don't speak":{"english":"we don't speak","type":"negation","bangla":"amora bolbo na","bLetters":"অমওর বওল্বও ন","index":33,"img":{"05":"https://farm1.staticflickr.com/434/20078517519_4ab1c21710.jpg","04":"https://farm4.staticflickr.com/3794/8947092274_8e449c626f.jpg","03":"https://farm3.staticflickr.com/2945/15213541157_226a661a21.jpg","02":"https://farm6.staticflickr.com/5057/5399279379_21d940f3c2.jpg","01":"https://farm9.staticflickr.com/8428/7532962698_475f25aacd.jpg"}},"we don't write":{"english":"we don't write","type":"negation","bangla":"amora likhbo na","bLetters":"অমওর লিখ্বও ন","index":35,"img":{"05":"https://farm6.staticflickr.com/5136/5574002456_6e61e92370.jpg","04":"https://farm4.staticflickr.com/3541/3391994210_a649097b11.jpg","03":"https://farm6.staticflickr.com/5151/6937083904_226a2c66d5.jpg","02":"https://farm4.staticflickr.com/3020/2909645011_5314620d77.jpg","01":"https://farm3.staticflickr.com/2814/11235590665_c4fe5fae71.jpg"}},"we don't drive":{"english":"we don't drive","type":"negation","bangla":"amora chalabo na","bLetters":"অমওর চলবও ন","index":37,"img":{"05":"https://farm4.staticflickr.com/3069/2786277723_b708ca030e.jpg","04":"https://farm6.staticflickr.com/5102/5683902749_3c524d8062.jpg","03":"https://farm1.staticflickr.com/26/56824719_95051eaef1.jpg","02":"https://farm1.staticflickr.com/160/430189279_9fd84e106c.jpg","01":"https://farm6.staticflickr.com/5606/15214437664_5619339c6c.jpg"}},"we don't love":{"english":"we don't love","type":"negation","bangla":"amora valobasbona","bLetters":"অমওর বলওবস্বওন","index":39,"img":{"05":"https://farm1.staticflickr.com/206/500922105_c411be2675.jpg","04":"https://farm9.staticflickr.com/8105/8660787862_c6906cab4d.jpg","03":"https://farm4.staticflickr.com/3234/3019633843_e16b072b1c.jpg","02":"https://farm8.staticflickr.com/7238/7252470794_33fd927dcf.jpg","01":"https://farm4.staticflickr.com/3202/5848942814_01c5d300c0.jpg"}},"we don't give":{"english":"we don't give","type":"negation","bangla":"amora debo na","bLetters":"অমওর ডএবও ন","index":41,"img":{"05":"https://farm8.staticflickr.com/7368/11769012456_38a5556e02.jpg","04":"https://farm9.staticflickr.com/8110/8497183219_203e4c2b25.jpg","03":"https://farm7.staticflickr.com/6235/6309971055_0be36726c0.jpg","02":"https://farm7.staticflickr.com/6092/6309979651_34e1bfe2b6.jpg","01":"https://farm9.staticflickr.com/8166/7294521144_6f9db63416.jpg"}},"we don't smile":{"english":"we don't smile","type":"negation","bangla":"amora hasbo na","bLetters":"অমওর হস্বও ন","index":43,"img":{"05":"https://farm4.staticflickr.com/3883/14566682894_f7cecbf1ce.jpg","04":"https://farm4.staticflickr.com/3706/9368012970_952860287a.jpg","03":"https://farm2.staticflickr.com/1213/5137423652_93001d14a1.jpg","02":"https://farm9.staticflickr.com/8083/8319462270_59feb23c03.jpg","01":"https://farm8.staticflickr.com/7412/13125878624_d884d49091.jpg"}},"we don't take":{"english":"we don't take","type":"negation","bangla":"amora nebo na","bLetters":"অমওর নএবও ন","index":45,"img":{"05":"https://farm8.staticflickr.com/7444/10837632216_a89337a424.jpg","04":"https://farm8.staticflickr.com/7548/16026376789_af4246cb5f.jpg","03":"https://farm4.staticflickr.com/3023/2714802759_021c7710e2.jpg","02":"https://farm3.staticflickr.com/2377/13061385733_f048862d04.jpg","01":"https://farm8.staticflickr.com/7388/10060292966_e85eccdc7b.jpg"}}},"questions":{"where is he?":{"english":"where is he?","type":"questions","bangla":"se kothay?","bLetters":"সএ কওতয্?","index":1,"img":{"05":"https://farm8.staticflickr.com/7359/14135163202_17e2bc3934.jpg","04":"https://farm6.staticflickr.com/5186/5648606701_29a537470a.jpg","03":"https://farm8.staticflickr.com/7381/10896575816_6c19a89b73.jpg","02":"https://farm9.staticflickr.com/8231/8516674661_0e83ac9aa1.jpg","01":"https://farm9.staticflickr.com/8199/8179304874_47ec6de920.jpg"}},"what is this?":{"english":"what is this?","type":"questions","bangla":"ata ki?","bLetters":"অট কি?","index":3,"img":{"05":"https://farm4.staticflickr.com/3022/2911323164_60e7c95235.jpg","04":"https://farm9.staticflickr.com/8605/16672828101_8bd3d88632.jpg","03":"https://farm5.staticflickr.com/4111/5048390992_85942b0075.jpg","02":"https://farm8.staticflickr.com/7015/6547923565_c9b182c582.jpg","01":"https://farm6.staticflickr.com/5289/5225670951_a8ca31d72c.jpg"}},"why are you sad?":{"english":"why are you sad?","type":"questions","bangla":"tumi keno dukkhito?","bLetters":"টুমি কএনও ডুক্খিটও?","index":5,"img":{"05":"https://farm7.staticflickr.com/6205/6063384122_ee08a74b25.jpg","04":"https://farm5.staticflickr.com/4020/4392956394_c12732bbab.jpg","03":"https://farm5.staticflickr.com/4103/5052976258_5ed5414633.jpg","02":"https://farm3.staticflickr.com/2347/2337670494_ea7301be0c.jpg","01":"https://farm6.staticflickr.com/5153/5843215551_52910ecf4a.jpg"}},"how do you want to pay?":{"english":"how do you want to pay?","type":"questions","bangla":"kivabe tumi amake prodan korte chao?","bLetters":"কিববএ টুমি অমকএ প্রওডন্ কওর্টএ চও?","index":7,"img":{"05":"https://farm6.staticflickr.com/5030/5546525710_2890626df6.jpg","04":"https://farm3.staticflickr.com/2849/11092870665_88882c62ef.jpg","03":"https://farm3.staticflickr.com/2037/2233894888_701b679797.jpg","02":"https://farm5.staticflickr.com/4011/4246529186_0c27136797.jpg","01":"https://farm4.staticflickr.com/3866/14745415784_ec480dabfd.jpg"}},"can I come?":{"english":"can I come?","type":"questions","bangla":"ami ki aste pari?","bLetters":"অমি কি অস্টএ পরি?","index":11,"img":{"05":"https://farm8.staticflickr.com/7226/7308761230_daa3219c1c.jpg","04":"https://farm9.staticflickr.com/8374/8413421793_4569a8e119.jpg","03":"https://farm3.staticflickr.com/2270/2275552818_9684049837.jpg","02":"https://farm4.staticflickr.com/3881/15062984718_f64928e14d.jpg","01":"https://farm1.staticflickr.com/669/23204632060_cfbcb54807.jpg"}},"is he sleeping?":{"english":"is he sleeping?","type":"questions","bangla":"se ki ghumate pare?","bLetters":"সএ কি ঘুমটএ পরএ?","index":13,"img":{"05":"https://farm4.staticflickr.com/3076/2792923283_8d5155becb.jpg","04":"https://farm1.staticflickr.com/494/17815725633_89a7fcd59d.jpg","03":"https://farm4.staticflickr.com/3874/15273628386_586ebdae4d.jpg","02":"https://farm1.staticflickr.com/194/451902754_7d9841e690.jpg","01":"https://farm7.staticflickr.com/6138/5918490318_81a32ae4a0.jpg"}},"do you know me?":{"english":"do you know me?","type":"questions","bangla":"tumi ki amake cheno?","bLetters":"টুমি কি অমকএ চএনও?","index":15,"img":{"05":"https://farm5.staticflickr.com/4095/4863846809_a740e703f1.jpg","04":"https://farm3.staticflickr.com/2152/2057741371_3b3ad07ca8.jpg","03":"https://farm6.staticflickr.com/5274/5897012363_45bd1edc46.jpg","02":"https://farm4.staticflickr.com/3387/4642070147_61cd4c07b1.jpg","01":"https://farm3.staticflickr.com/2624/4050958134_425bf8a785.jpg"}},"do you have my book?":{"english":"do you have my book?","type":"questions","bangla":"tumi ki amar boi niaso?","bLetters":"টুমি কি অমর্ বওই নিঅসও?","index":17,"img":{"05":"https://farm5.staticflickr.com/4002/5165975757_8006ccac5e.jpg","04":"https://farm7.staticflickr.com/6169/6186132933_73f84c3350.jpg","03":"https://farm1.staticflickr.com/58/193907061_1707f4633f.jpg","02":"https://farm4.staticflickr.com/3156/3041271342_39184f3f75.jpg","01":"https://farm1.staticflickr.com/157/412967048_14c561df4b.jpg"}},"how big is it?":{"english":"how big is it?","type":"questions","bangla":"ata ki vabe boro holo?","bLetters":"অট কি ববএ বওরও হওলও?","index":19,"img":{"05":"https://farm5.staticflickr.com/4041/4251856861_c2a180b66e.jpg","04":"https://farm6.staticflickr.com/5273/14258881676_6ceb2fcab4.jpg","03":"https://farm8.staticflickr.com/7101/6975135608_c15a6262f5.jpg","02":"https://farm4.staticflickr.com/3916/14661507825_ace5bd55cb.jpg","01":"https://farm1.staticflickr.com/504/20056389259_fd2403db0c.jpg"}},"can I help you?":{"english":"can I help you?","type":"questions","bangla":"ami tomake sahajjo korte pari?","bLetters":"অমি টওমকএ সহজ্জও কওর্টএ পরি?","index":21,"img":{"05":"https://farm4.staticflickr.com/3825/9776357916_5e2a98bb8e.jpg","04":"https://farm4.staticflickr.com/3252/3019624936_9198568a46.jpg","03":"https://farm9.staticflickr.com/8389/8652853077_982a306a54.jpg","02":"https://farm7.staticflickr.com/6159/6177158920_2ddba1b5e1.jpg","01":"https://farm1.staticflickr.com/266/18506581176_f722262699.jpg"}},"can you help me?":{"english":"can you help me?","type":"questions","bangla":"tumi amake sohajjo korte paro?","bLetters":"টুমি অমকএ সওহজ্জও কওর্টএ পরও?","index":23,"img":{"05":"https://farm4.staticflickr.com/3191/2293051236_f4aeebe166.jpg","04":"https://farm4.staticflickr.com/3324/3295715161_bb5f49bfac.jpg","03":"https://farm4.staticflickr.com/3184/2438346957_43fcefaf86.jpg","02":"https://farm8.staticflickr.com/7134/7066752985_78ecef519d.jpg","01":"https://farm8.staticflickr.com/7155/13981704251_e2e79b6acd.jpg"}},"do you speak English?":{"english":"do you speak English?","type":"questions","bangla":"tumi ki english bolte paro?","bLetters":"টুমি কি এন্গ্লিশ্ বওল্টএ পরও?","index":25,"img":{"05":"https://farm9.staticflickr.com/8231/8486239990_9ba61d2c69.jpg","04":"https://farm6.staticflickr.com/5143/5663077902_34b9735f77.jpg","03":"https://farm2.staticflickr.com/1299/1393553996_42f4387487.jpg","02":"https://farm5.staticflickr.com/4081/4930447476_a02226a5d5.jpg","01":"https://farm8.staticflickr.com/7012/6644116931_b628a9d845.jpg"}},"how far is this?":{"english":"how far is this?","type":"questions","bangla":"eha koto dur","bLetters":"এহ কওটও ডুর্","index":27,"img":{"05":"https://farm9.staticflickr.com/8157/7195087948_62899361f1.jpg","04":"https://farm7.staticflickr.com/6062/6145527999_e1422390f4.jpg","03":"https://farm3.staticflickr.com/2707/4352118672_43d655d77c.jpg","02":"https://farm4.staticflickr.com/3122/2641241373_b634562374.jpg","01":"https://farm9.staticflickr.com/8679/16112818715_975d67543b.jpg"}},"what time is it?":{"english":"what time is it?","type":"questions","bangla":"akhon somoy koto?","bLetters":"অখওন্ সওমওয্ কওটও?","index":29,"img":{"05":"https://farm8.staticflickr.com/7460/16164120710_552481c6f1.jpg","04":"https://farm4.staticflickr.com/3926/15059968628_4629e26c78.jpg","03":"https://farm9.staticflickr.com/8083/8430589948_afbd56afde.jpg","02":"https://farm6.staticflickr.com/5185/5691264370_54cdd15a49.jpg","01":"https://farm8.staticflickr.com/7376/15758041814_2a6a961051.jpg"}},"how much is this?":{"english":"how much is this?","type":"questions","bangla":"ata koto?","bLetters":"অট কওটও?","index":31,"img":{"05":"https://farm3.staticflickr.com/2479/3947537265_57cac7c6c1.jpg","04":"https://farm8.staticflickr.com/7228/7220278742_f40ef5155f.jpg","03":"https://farm8.staticflickr.com/7020/6649849571_52a9d7bd4f.jpg","02":"https://farm4.staticflickr.com/3095/2724229892_ebfafeefc5.jpg","01":"https://farm4.staticflickr.com/3929/15222200797_fb6f1f5fd3.jpg"}},"what is your name?":{"english":"what is your name?","type":"questions","bangla":"tomar nam ki?","bLetters":"টওমর্ নম্ কি?","index":33,"img":{"05":"https://farm3.staticflickr.com/2458/3950187149_acd9a8b6dc.jpg","04":"https://farm8.staticflickr.com/7169/6839085795_216bb9f834.jpg","03":"https://farm3.staticflickr.com/2314/1998811305_d0a64157a3.jpg","02":"https://farm1.staticflickr.com/168/410344281_6e5b383158.jpg","01":"https://farm3.staticflickr.com/2055/2183366880_1b6624d819.jpg"}},"where do you live?":{"english":"where do you live?","type":"questions","bangla":"tumi kothay bosobas koro?","bLetters":"টুমি কওতয্ বওসওবস্ কওরও?","index":35,"img":{"05":"https://farm8.staticflickr.com/7177/6905152279_7fd06d551c.jpg","04":"https://farm9.staticflickr.com/8540/8667436001_1c746aafae.jpg","03":"https://farm5.staticflickr.com/4152/5039055491_6127526e81.jpg","02":"https://farm6.staticflickr.com/5605/15398467877_56524096d9.jpg","01":"https://farm9.staticflickr.com/8119/8661116142_50a34148e9.jpg"}}},"animals":{"cat":{"english":"cat","type":"animals","bangla":"biral","bLetters":"&#x9AC;&#x9BF;&#x9B0;&#x9B2;&#x9CD;","index":0,"img":{"05":"https://farm6.staticflickr.com/5704/20443802614_d0b0c0b5c5.jpg","04":"https://farm8.staticflickr.com/7786/17202266828_46e1464ef1.jpg","03":"https://farm3.staticflickr.com/2602/3977203168_b9d02a0233.jpg","02":"https://farm9.staticflickr.com/8065/8168159947_94b3a89a2a.jpg","01":"https://farm8.staticflickr.com/7401/16393044637_72e93d96b6.jpg"}},"dog":{"english":"dog","type":"animals","bangla":"kukur","bLetters":"&#x995;&#x9C1;&#x995;&#x9C1;&#x9B0;&#x9CD;","index":1,"img":{"05":"https://farm4.staticflickr.com/3833/11142920583_ed24465d2b.jpg","04":"https://farm2.staticflickr.com/1521/24443378954_cf4548cb56.jpg","03":"https://farm2.staticflickr.com/1613/24066106230_5169269428.jpg","02":"https://farm9.staticflickr.com/8079/8391224056_96da82499d.jpg","01":"https://farm2.staticflickr.com/1650/23938221134_5da30b9d99.jpg"}},"mouse":{"english":"mouse","type":"animals","bangla":"idur","bLetters":"&#x987;&#x9A1;&#x9C1;&#x9B0;&#x9CD;","index":2,"img":{"05":"https://farm8.staticflickr.com/7446/9698334635_b907632de5.jpg","04":"https://farm8.staticflickr.com/7052/6898771053_4d15808fc5.jpg","03":"https://farm8.staticflickr.com/7162/6620107219_fb93bae29c.jpg","02":"https://farm6.staticflickr.com/5108/5643983263_9e156bdd7f.jpg","01":"https://farm9.staticflickr.com/8076/8365895042_95f8ec379d.jpg"}},"cow":{"english":"cow","type":"animals","bangla":"gavi","bLetters":"&#x997;&#x9AC;&#x9BF;","index":3,"img":{"05":"https://farm4.staticflickr.com/3156/2957382365_86f10cf8d9.jpg","04":"https://farm4.staticflickr.com/3134/2519080020_056af1c36d.jpg","03":"https://farm8.staticflickr.com/7107/7442171028_79e58a5a45.jpg","02":"https://farm4.staticflickr.com/3260/2902422030_bb5321c452.jpg","01":"https://farm3.staticflickr.com/2923/14302980989_73d5802120.jpg"}},"horse":{"english":"horse","type":"animals","bangla":"ghora","bLetters":"&#x998;&#x993;&#x9B0;","index":4,"img":{"05":"https://farm5.staticflickr.com/4069/4231428890_982f85f6df.jpg","04":"https://farm5.staticflickr.com/4105/5022317471_2f9a0558c8.jpg","03":"https://farm9.staticflickr.com/8111/8497866256_bcabcdcf2d.jpg","02":"https://farm9.staticflickr.com/8158/7261285256_ac0f4fbc54.jpg","01":"https://farm6.staticflickr.com/5173/5412377622_2f5cb4156d.jpg"}},"alligator":{"english":"alligator","type":"animals","bangla":"american kumir","bLetters":"&#x985;&#x9AE;&#x98F;&#x9B0;&#x9BF;c&#x985;&#x9A8;&#x9CD; &#x995;&#x9C1;&#x9AE;&#x9BF;&#x9B0;&#x9CD;","index":5,"img":{"05":"https://farm8.staticflickr.com/7646/17250018551_eaf395294d.jpg","04":"https://farm6.staticflickr.com/5112/14332022865_c31ed7e9f4.jpg","03":"https://farm8.staticflickr.com/7323/8734363025_f2401f825a.jpg","02":"https://farm4.staticflickr.com/3951/15580655009_19a5f34f7b.jpg","01":"https://farm2.staticflickr.com/1409/992216795_73bec2f9c5.jpg"}},"rabbit":{"english":"rabbit","type":"animals","bangla":"khorgos","bLetters":"&#x996;&#x993;&#x9B0;&#x9CD;&#x997;&#x993;&#x9B8;&#x9CD;","index":6,"img":{"05":"https://farm1.staticflickr.com/27/268655305_5c5d929645.jpg","04":"https://farm6.staticflickr.com/5487/14265926166_f85db28b92.jpg","03":"https://farm3.staticflickr.com/2571/3952842119_017fc590bf.jpg","02":"https://farm8.staticflickr.com/7131/7459856246_c77dbb5748.jpg","01":"https://farm3.staticflickr.com/2914/14759385173_a483418e27.jpg"}},"bird":{"english":"bird","type":"animals","bangla":"pakhi","bLetters":"&#x9AA;&#x996;&#x9BF;","index":7,"img":{"05":"https://farm7.staticflickr.com/6049/6288258621_017c47e364.jpg","04":"https://farm8.staticflickr.com/7213/7392533840_8ff216f92f.jpg","03":"https://farm5.staticflickr.com/4075/4791631090_98c494c88c.jpg","02":"https://farm6.staticflickr.com/5700/21708839280_4e1444709b.jpg","01":"https://farm6.staticflickr.com/5478/14435672836_f182a912f1.jpg"}},"bear":{"english":"bear","type":"animals","bangla":"bohon kora","bLetters":"&#x9AC;&#x993;&#x9B9;&#x993;&#x9A8;&#x9CD; &#x995;&#x993;&#x9B0;","index":8,"img":{"05":"https://farm9.staticflickr.com/8298/7902256600_7c63415893.jpg","04":"https://farm3.staticflickr.com/2931/14103335792_73e58948c4.jpg","03":"https://farm8.staticflickr.com/7120/7577395740_f9f3f0ba82.jpg","02":"https://farm8.staticflickr.com/7259/7577390134_b1cda83627.jpg","01":"https://farm6.staticflickr.com/5142/5624569781_4dd65ba2d5.jpg"}},"eagle":{"english":"eagle","type":"animals","bangla":"igol pakhi","bLetters":"&#x987;&#x997;&#x993;&#x9B2;&#x9CD; &#x9AA;&#x996;&#x9BF;","index":9,"img":{"05":"https://farm4.staticflickr.com/3096/3223507845_130e37c681.jpg","04":"https://farm9.staticflickr.com/8717/17129201342_e5d7207be9.jpg","03":"https://farm8.staticflickr.com/7274/7489630742_af0146a93e.jpg","02":"https://farm4.staticflickr.com/3946/15399146127_6d64cf820b.jpg","01":"https://farm9.staticflickr.com/8097/8464486007_79f4e69569.jpg"}},"elephant":{"english":"elephant","type":"animals","bangla":"hati","bLetters":"&#x9B9;&#x99F;&#x9BF;","index":10,"img":{"05":"https://farm5.staticflickr.com/4113/4838416767_bb01ceda8c.jpg","04":"https://farm5.staticflickr.com/4088/4839030072_37362ef891.jpg","03":"https://farm5.staticflickr.com/4112/4839032436_3ba7167102.jpg","02":"https://farm5.staticflickr.com/4103/4839031518_3765f997a4.jpg","01":"https://farm5.staticflickr.com/4131/4838418209_f962448bd8.jpg"}},"giraffe":{"english":"giraffe","type":"animals","bangla":"ziraff z","bLetters":"z&#x987;&#x9B0;ff ","index":11,"img":{"05":"https://farm9.staticflickr.com/8204/8269195775_a0a6d8f450.jpg","04":"https://farm8.staticflickr.com/7209/6925344809_dd01c229b3.jpg","03":"https://farm8.staticflickr.com/7430/14211763203_77cc7fa3b3.jpg","02":"https://farm3.staticflickr.com/2947/15326847250_11855946f2.jpg","01":"https://farm5.staticflickr.com/4023/4511365064_75cee9bef5.jpg"}},"lion":{"english":"lion","type":"animals","bangla":"singho","bLetters":"&#x9B8;&#x9BF;&#x9A8;&#x9CD;&#x998;&#x993;","index":12,"img":{"05":"https://farm7.staticflickr.com/6096/6363664889_4968c4e641.jpg","04":"https://farm5.staticflickr.com/4126/4838381651_cbb7bdafcb.jpg","03":"https://farm9.staticflickr.com/8186/8094150557_70e59fc72c.jpg","02":"https://farm9.staticflickr.com/8316/8040094305_e70ba3f3cf.jpg","01":"https://farm5.staticflickr.com/4144/4977443186_9e934e230b.jpg"}},"monkey":{"english":"monkey","type":"animals","bangla":"banor","bLetters":"&#x9AC;&#x9A8;&#x993;&#x9B0;&#x9CD;","index":13,"img":{"05":"https://farm4.staticflickr.com/3880/14726979464_efdde35e5d.jpg","04":"https://farm4.staticflickr.com/3581/3316644163_4b84471d39.jpg","03":"https://farm9.staticflickr.com/8106/8615943656_97f2d41ffc.jpg","02":"https://farm3.staticflickr.com/2942/15225712080_598dc88b6b.jpg","01":"https://farm8.staticflickr.com/7436/12947227375_7dfb055e82.jpg"}},"snake":{"english":"snake","type":"animals","bangla":"sap","bLetters":"&#x9B8;&#x9AA;&#x9CD;","index":14,"img":{"05":"https://farm3.staticflickr.com/2346/1553471288_be56c349a2.jpg","04":"https://farm4.staticflickr.com/3286/2425754622_c29700db84.jpg","03":"https://farm4.staticflickr.com/3715/8893270845_753c115cc9.jpg","02":"https://farm6.staticflickr.com/5106/5569660792_0b17551cbc.jpg","01":"https://farm8.staticflickr.com/7331/16273942650_104e4c0776.jpg"}},"tiger":{"english":"tiger","type":"animals","bangla":"bagh","bLetters":"&#x9AC;&#x998;&#x9CD;","index":15,"img":{"05":"https://farm5.staticflickr.com/4041/5159256935_6d65db4d81.jpg","04":"https://farm4.staticflickr.com/3169/2988799601_2f187a7bb8.jpg","03":"https://farm8.staticflickr.com/7523/15506377508_a45616ff27.jpg","02":"https://farm9.staticflickr.com/8588/15912220596_0efe5578be.jpg","01":"https://farm9.staticflickr.com/8373/8389456987_8c15ec272f.jpg"}}},"colors":{"colors":{"english":"colors","type":"colors","bangla":"rong","bLetters":"&#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":0,"img":{"05":"https://farm3.staticflickr.com/2946/15485876632_19370d9f2c.jpg","04":"https://farm8.staticflickr.com/7507/16297974341_047d65807e.jpg","03":"https://farm8.staticflickr.com/7571/16340269815_948eb20807.jpg","02":"https://farm4.staticflickr.com/3692/11818579534_baa4e49db6.jpg","01":"https://farm3.staticflickr.com/2870/13220354895_335ecc2c41.jpg"}},"black":{"english":"black","type":"colors","bangla":"kalo","bLetters":"&#x995;&#x9B2;&#x993;","index":1,"img":{"05":"https://farm6.staticflickr.com/5546/9447222957_e8bf0db5a5.jpg","04":"https://farm3.staticflickr.com/2089/2100231822_0c7244400b.jpg","03":"https://farm7.staticflickr.com/6024/6208603709_a4c5f14464.jpg","02":"https://farm9.staticflickr.com/8073/8282458437_8b15e5a149.jpg","01":"https://farm9.staticflickr.com/8480/8257495691_c4c01149d0.jpg"}},"white":{"english":"white","type":"colors","bangla":"sada rong","bLetters":"&#x9B8;&#x9A1; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":2,"img":{"05":"https://farm8.staticflickr.com/7166/6475382227_42a32e647a.jpg","04":"https://farm8.staticflickr.com/7648/16737191599_0d95a4825e.jpg","03":"https://farm4.staticflickr.com/3597/3385391418_86b350e89a.jpg","02":"https://farm8.staticflickr.com/7607/16595957847_38b88ff13d.jpg","01":"https://farm4.staticflickr.com/3003/2584193181_e92a54e37d.jpg"}},"gray":{"english":"gray","type":"colors","bangla":"dhusor rong","bLetters":"&#x9A6;&#x9C1;&#x9B8;&#x993;&#x9B0;&#x9CD; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":3,"img":{"05":"https://farm4.staticflickr.com/3669/10576207974_7497849476.jpg","04":"https://farm8.staticflickr.com/7006/6789949843_14dcdc10de.jpg","03":"https://farm9.staticflickr.com/8311/7980633158_3c138685aa.jpg","02":"https://farm6.staticflickr.com/5344/7414945902_1fccc24776.jpg","01":"https://farm6.staticflickr.com/5558/15206662751_530fec149c.jpg"}},"blue":{"english":"blue","type":"colors","bangla":"nil rong","bLetters":"&#x9A8;&#x9BF;&#x9B2;&#x9CD; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":4,"img":{"05":"https://farm8.staticflickr.com/7229/7349070180_f636f2dd65.jpg","04":"https://farm3.staticflickr.com/2502/4130935465_267cd34bc2.jpg","03":"https://farm4.staticflickr.com/3513/3205529049_80ae57b57e.jpg","02":"https://farm8.staticflickr.com/7380/9166594078_72fe8069c6.jpg","01":"https://farm4.staticflickr.com/3162/2961078287_7dd13217cc.jpg"}},"green":{"english":"green","type":"colors","bangla":"sobuj rong","bLetters":"&#x9B8;&#x993;&#x9AC;&#x9C1;&#x99C;&#x9CD; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":5,"img":{"05":"https://farm4.staticflickr.com/3936/15385538298_5ee2dedc9b.jpg","04":"https://farm9.staticflickr.com/8596/16263184599_61c8c6d3df.jpg","03":"https://farm8.staticflickr.com/7009/6524799865_4a7207d133.jpg","02":"https://farm8.staticflickr.com/7072/7316969880_5622cd0489.jpg","01":"https://farm2.staticflickr.com/1413/5150506566_e696291301.jpg"}},"brown":{"english":"brown","type":"colors","bangla":"badami rong","bLetters":"&#x9AC;&#x9A1;&#x9AE;&#x9BF; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":6,"img":{"05":"https://farm3.staticflickr.com/2806/11407821456_bb7706e7bf.jpg","04":"https://farm9.staticflickr.com/8051/8080609153_a9111a8814.jpg","03":"https://farm6.staticflickr.com/5684/22465028033_f990e6ee23.jpg","02":"https://farm3.staticflickr.com/2869/10275947314_e2e57b20a7.jpg","01":"https://farm8.staticflickr.com/7003/6519158257_fb776bd949.jpg"}},"purple":{"english":"purple","type":"colors","bangla":"beguni rong","bLetters":"&#x9AC;&#x98F;&#x997;&#x9C1;&#x9A8;&#x9BF; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":7,"img":{"05":"https://farm4.staticflickr.com/3655/3320084584_9b408a8e36.jpg","04":"https://farm9.staticflickr.com/8771/17068535642_a8c1ba5bc8.jpg","03":"https://farm6.staticflickr.com/5469/17598303190_db06d8aec8.jpg","02":"https://farm9.staticflickr.com/8058/8268915128_5702174591.jpg","01":"https://farm2.staticflickr.com/1345/5149897589_02d273974f.jpg"}},"red":{"english":"red","type":"colors","bangla":"lal rong","bLetters":"&#x9B2;&#x9B2;&#x9CD; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":8,"img":{"05":"https://farm6.staticflickr.com/5534/9127978269_26184ed92e.jpg","04":"https://farm9.staticflickr.com/8640/15942580281_f4dec69039.jpg","03":"https://farm8.staticflickr.com/7461/16271024421_8887b51069.jpg","02":"https://farm4.staticflickr.com/3855/15149528631_73b38c7fa3.jpg","01":"https://farm9.staticflickr.com/8440/7978985440_02eb0d7b88.jpg"}},"orange":{"english":"orange","type":"colors","bangla":"comola rongc","bLetters":"c&#x993;&#x9AE;&#x993;&#x9B2; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":9,"img":{"05":"https://farm8.staticflickr.com/7289/16578433411_ef413f1632.jpg","04":"https://farm3.staticflickr.com/2654/4111054661_c294681b54.jpg","03":"https://farm6.staticflickr.com/5285/5256018586_3c33a85064.jpg","02":"https://farm6.staticflickr.com/5585/14429015795_a242373123.jpg","01":"https://farm8.staticflickr.com/7209/6952101543_22ca32bcc3.jpg"}},"yellow":{"english":"yellow","type":"colors","bangla":"holud rong","bLetters":"&#x9B9;&#x993;&#x9B2;&#x9C1;&#x9A1;&#x9CD; &#x9B0;&#x993;&#x9A8;&#x9CD;&#x997;&#x9CD;","index":10,"img":{"05":"https://farm3.staticflickr.com/2896/13942617067_d5829e849c.jpg","04":"https://farm4.staticflickr.com/3273/3103907114_b444abc2ea.jpg","03":"https://farm3.staticflickr.com/2948/15184358029_d804b75c7f.jpg","02":"https://farm9.staticflickr.com/8640/15846662050_e41fb895d5.jpg","01":"https://farm3.staticflickr.com/2410/2105079810_a53c8b55a2.jpg"}}}}
},{}],166:[function(require,module,exports){
var React = require('react');
var Router = require('director').Router;


module.exports = React.createClass({displayName: "exports",
    render: function() {
        return (
            React.createElement("div", {id: "results", className: "search-results"}, 
                this.props.data
            )
        );
    }
});

},{"director":2,"react":163}],167:[function(require,module,exports){
var React = require('react');
var imgObj = require('./dataWimages_NEW'); 
var data = Object.keys(imgObj).reduce(function( arr, currentItem) {
			arr.push( currentItem);
			return arr;
	}, []);

console.log(data)
module.exports = React.createClass({displayName: "exports",
	render: function() {
		var firstKey;
		var image;
		var categoryButtons = data.map(function(title) {
			
				
			if (title === "food") {
				 firstKey = (Object.keys(imgObj[title])[1]);
				 image = imgObj[title][firstKey].img["03"];
			}
			else if (title === "adverbs") {
				
				 firstKey = (Object.keys(imgObj[title])[0]);
				 image = imgObj[title][firstKey].img["01"];
				 title = "Adverbs of Time"
			}

			else if (title === "nouns") {
				console.log(imgObj[title])
				 firstKey = (Object.keys(imgObj[title])[1]);
				 image = imgObj[title][firstKey].img["01"];
				 title = "Body II"
			}
			else if (title === "colors") {
				 firstKey = (Object.keys(imgObj[title])[0]);
				 image = imgObj[title][firstKey].img["04"];
			}
			else if (title === "numbers") {
				 firstKey = (Object.keys(imgObj[title])[0]);
				 image = imgObj[title][firstKey].img["05"];
			}
			else if (title === "clothes") {
				 firstKey = (Object.keys(imgObj[title])[3]);
				 image = imgObj[title][firstKey].img["01"];
			}
			else if (title === "objects") {
				 firstKey = (Object.keys(imgObj[title])[0]);
				 image = imgObj[title][firstKey].img["01"];
			}
			else if (title === "body") {
				 firstKey = (Object.keys(imgObj[title])[3]);
				 image = imgObj[title][firstKey].img["01"];
			}
			else {
				 firstKey = (Object.keys(imgObj[title])[0]);
				 image = imgObj[title][firstKey].img["04"];
			}
			
				
			
	  		return (
	  			React.createElement("div", {className: "card"}, 
			      React.createElement("div", {className: "image image--card", style: {minHeight: '150px', backgroundImage: 'url('+image+')'}}, 
			      	React.createElement("img", {src: image})
			      ), 
			     React.createElement("div", {className: "content"}, 
			        React.createElement("a", {href: "#levelOne/"+title, className: "header"}, title)
			      )
			  	)
		      );
	  	});
	    return (
	     React.createElement("div", {className: "ui three stackable cards"}, 
	  		categoryButtons
	  	)
		);

		
	}


});



//return (<a href="/#foo/1">Click here</a>);

},{"./dataWimages_NEW":165,"react":163}],168:[function(require,module,exports){
var Router = require('director').Router;
var React = require('react');
var imgObj = require('./dataWimages_NEW'); 
var ReactDOM = require('react-dom');
var Home = require('./homePage');
var LevelOne = require('./levelOne');
var LevelTwo = require('./levelTwo');
var LevelThree = require('./levelThree')
//two pages home and play 


var routes = {
	'/home': function() {
		(console.log("foo"))
		ReactDOM.render(
		  React.createElement(Home, null),
		  document.getElementById('container')
		);
	},
	'/levelOne/:id': function( id ) {
		console.log( id, imgObj )
		ReactDOM.render(
		  React.createElement(LevelOne, {id: id, data: imgObj}),
		  document.getElementById('container')
		);
	},
	'/levelTwo/:id': function(id) {
		console.log( id )
		ReactDOM.render(
		  React.createElement(LevelTwo, {id: id, data: imgObj}),
		  document.getElementById('container')
		);
	},
	'/levelThree/:id': function(id) {
		console.log(id)
		ReactDOM.render(
		  React.createElement(LevelThree, {id: id, data: imgObj}),
		  document.getElementById('container')
		);
	}
}

// console.log( routes, Router);

var router = Router( routes );
router.init('/home');

},{"./dataWimages_NEW":165,"./homePage":167,"./levelOne":169,"./levelThree":170,"./levelTwo":171,"director":2,"react":163,"react-dom":7}],169:[function(require,module,exports){
var React = require('react');
var BLetters = require('./bLetters');
var Title = require('./title');

module.exports = React.createClass({displayName: "exports",
	//Get the data object for that category - save as an array 
	//set state for object arr and current card
	getInitialState: function() {
		var category = this.props.data[this.props.id];
		var list = Object.keys(category).reduce(function(arr, currentItem) {
			arr.push( category[currentItem]);
			return arr;
		}, []);
			
		return {
			//Get the data object for that category - save as an array 
			data: list,
			score: { total: list.length,
					  completed: 0
					},
			currentCard: null,
			Index: null,
			
		}
	},
	
	componentDidMount:function () {
		this.getRandom()
	}, 
	//Get a random item and set current card to that item 
	getRandom:function (){
		var listLength = (this.state.data.length)-1; 
			var index =	Math.floor(Math.random()*(listLength));
			console.log( this.state.data[ index ])
			this.setState({
				currentCard: this.state.data[index],
				Index:index
			}, function() {
				var words = this.state.data.reduce(function( arr, currentItem) {
				arr.push( currentItem.english);
				return arr;
				}, []);
				console.log("remaining", words)
			});
	},
	//Draw Current Card
	levelOne: function() {
		console.log( this.state )
		if (this.state.currentCard !== null) {
			if (this.state.data.length === 0) {
				return (React.createElement("a", {href: "#levelTwo/"+this.props.id}, "Level Two"))
			}
			else {
				var imgObj = this.state.currentCard.img;
				var urls = Object.keys(imgObj).reduce(function( arr, currentItem) {
					arr.push( imgObj[currentItem]);
					return arr;
				}, []);
				urls = urls.splice(0,3)
				// console.log(images)
				var images = urls.map (function (el){
					var divStyle = {
						backgroundImage: 'url(' + el + ')',
					}
					return (
						React.createElement("div", {style: divStyle, className: "twoCol_thumbnail"}))
				});
				// console.log(urls)
				console.log('!!!')
				// console.log( currentCard );
				return (
				React.createElement("div", {className: "ui two column centered grid"}, 
					React.createElement("div", {className: "column"}, 
						images
					), 
					React.createElement("div", {className: "column"}, 
						React.createElement("p", null, React.createElement("em", null, "English: "), " ", this.state.currentCard.english), 
						React.createElement("p", null, React.createElement("em", null, "Bangla: "), this.state.currentCard.bangla), 
						React.createElement(BLetters, {data: this.state.currentCard}), 
						React.createElement("div", {className: "ui input"}, 
 						 React.createElement("input", {onKeyPress: this.getInput, type: "text", placeholder: "Enter Bengali Pronuciation"})
						)
					)
				))
			}
			
		}
	},
	//See if they wrote word correctly
	getInput:function (e) {
		//get input 
		if ( e.which === 13 ) {
			var input = e.target.value
			input = input.toLowerCase();
			e.target.value = ""
			//if input matches english
			if (input === this.state.currentCard.bangla.toLowerCase()) {
				var i = this.state.index;
				var oldList = this.state.data; 
				oldList.splice(this.state.Index, 1);
				
				var newScore = this.state.score.completed + 1;
				var total = this.state.score.total;
				// console.log(oldList.length)
				this.setState ({
					data: oldList,
					score: { total: total,
					  		  completed: newScore
					},
				}, function () {
					this.getRandom()
				})
			}
			else {
				this.getRandom()
			}
		}
	},

	render: function() {
		// console.log("here", this.state.score.total)
		return (
			React.createElement("div", null, 
				React.createElement(Title, {id: this.props.id, score: this.state.score, data: this.props.data}), 
				this.levelOne()
			)

			)
	}
})



// <div className="ui indicating progress">
// 				  <div className="bar"></div>
// 				</div>

},{"./bLetters":164,"./title":172,"react":163}],170:[function(require,module,exports){
var React = require('react');
var BLetters = require('./bLetters');
var Title = require('./title');
var Hint = require('./hint');


module.exports = React.createClass({displayName: "exports",
	//Get the data object for that category - save as an array 
	//set state for object arr and current card
	getInitialState: function() {
		var category = this.props.data[this.props.id];
		var list = Object.keys(category).reduce(function(arr, currentItem) {
			arr.push( category[currentItem]);
			return arr;
		}, []);
			
		return {
			//Get the data object for that category - save as an array 
			data: list,
			currentCard: null,
			Index: null,
			showHint: false
		}
	},
	
	componentDidMount:function () {
		this.getRandom()
	}, 
	//Get a random item and set current card to that item 
	getRandom:function (){
		var listLength = (this.state.data.length)-1; 
			var index =	Math.floor(Math.random()*(listLength));
			this.setState({
				currentCard: this.state.data[index], 
				Index:index,
				showHint: false
			}, function() {
				var words = this.state.data.reduce(function( arr, currentItem) {
				arr.push( currentItem.english);
				return arr;
				}, []);
				console.log("remaining", words)
			});
	},
	//set hint to true
	onClick:function () {
		this.setState({ showHint: true });
	},
	//Draw Current Card
	drawQuestion: function() {
		if (this.state.currentCard !== null) {
			if (this.state.data.length === 0) {
				return (React.createElement("h2", null, " Congrats! ") )
			}
			else {
				var imgObj = this.state.currentCard.img;
				var urls = Object.keys(imgObj).reduce(function( arr, currentItem) {
					arr.push( imgObj[currentItem]);
					return arr;
				}, []);
				urls = urls.splice(0,3)
				// console.log(images)
				var images = urls.map (function (el){
					var divStyle = {
						backgroundImage: 'url(' + el + ')',
					}
					return (
						React.createElement("div", {style: divStyle, className: "twoCol_thumbnail"}))
				});
				// console.log(urls)
				return (
				React.createElement("div", {className: "ui two column centered grid"}, 
					React.createElement("div", {className: "column"}, 
						images
					), 
					React.createElement("div", {className: "column"}, 
						React.createElement("p", null, React.createElement("em", null, "English: "), " ", this.state.currentCard.english), 
						 this.state.showHint ? React.createElement(Hint, {data: this.state.currentCard.bangla}) : null, 
						React.createElement("div", {className: "ui input"}, 
 						 React.createElement("input", {onKeyPress: this.getInput, type: "text", placeholder: "Enter Bengali Pronuciation"})
						), 

						React.createElement("button", {onClick: this.onClick, className: "hint ui button"}, "hint")
					
					)
				))
			}
			
		}
	},
	//See if they wrote word correctly
	getInput:function (e) {
		//get input 
		if ( e.which === 13 ) {
			var input = e.target.value
			input = input.toLowerCase();
			e.target.value = ""
			//if input matches english
			if (input === this.state.currentCard.bangla.toLowerCase()) {
				var i = this.state.index;
				var oldList = this.state.data; 
				oldList.splice(this.state.Index, 1)
				// console.log(oldList.length)
				this.setState ({
					data: oldList
				}, function (){
					this.getRandom()
				})
			}
			else {
				this.getRandom()
			}
		}
	},

	render: function() {
		return (
			React.createElement("div", null, 
			React.createElement(Title, {id: this.props.id, data: this.props.data}), 
			this.drawQuestion()
			))
	}
})

},{"./bLetters":164,"./hint":166,"./title":172,"react":163}],171:[function(require,module,exports){
var React = require('react');
var BLetters = require('./bLetters');
var Title = require('./title');
var Hint = require('./hint');

module.exports = React.createClass({displayName: "exports",
	getInitialState: function() {
		var category = this.props.data[this.props.id];
		var list = Object.keys(category).reduce(function(arr, currentItem) {
			arr.push( category[currentItem]);
			return arr;
		}, []);
			
		return {
			//Get the data object for that category - save as an array 
			data: list,
			length: list.length,
			currentCard: null,
			Index: null,
			showHint: false,
			completed: 0
		}
	},
	componentDidMount:function () {
		this.getRandom()
	}, 
	//Get a random item and set current card to that item 
	getRandom:function (){
		var listLength = (this.state.data.length)-1; 
			var index =	Math.floor(Math.random()*(listLength));
			this.setState({
				currentCard: this.state.data[index], 
				Index:index,
				showHint: false
			}, function() {
				var words = this.state.data.reduce(function( arr, currentItem) {
				arr.push( currentItem.english);
				return arr;
				}, []);
				console.log(words)
			});
	},
	//set hint to true
	onClick:function () {
		this.setState({ showHint: true });
	},
	//Draw card
	levelTwo: function() {

		if (this.state.currentCard !== null) {
			// console.log(this.state.currentCard.english)
			if (this.state.data.length === 0) {
				return (React.createElement("a", {href: "#levelThree/"+this.props.id}, "Level Three"))
			}
			else {
			return (
				React.createElement("div", null, 
					React.createElement("div", null, 
						React.createElement("p", null, React.createElement("em", null, "Bangla: "), this.state.currentCard.bangla), 
						
					React.createElement(BLetters, {data: this.state.currentCard}), 
						
						 this.state.showHint ? React.createElement(Hint, {data: this.state.currentCard.english}) : null, 
						
						React.createElement("div", {className: "ui input"}, 
 						 React.createElement("input", {onKeyPress: this.getInput, type: "text", placeholder: "Enter English"})
						), 
						React.createElement("button", {onClick: this.onClick, className: "ui right floated button"}, "Hint")
						
					)
				))
			}
		}
	},
	
	//See if they wrote word correctly
	getInput:function (e) {
		//get input 
		if ( e.which === 13 ) {
			var input = e.target.value
			input = input.toLowerCase();
			e.target.value = ""
			//if input matches english
			if (input === this.state.currentCard.english.toLowerCase() && this.state.showHint === false) {
				var i = this.state.index;
				var oldList = this.state.data; 
				oldList.splice(this.state.Index, 1)
				var newScore = this.state.completed + 1;
				// console.log(oldList.length)
				this.setState ({
					data: oldList,
					completed: newScore
				}, function (){
					this.getRandom()
				})
			}
			else {
				this.getRandom()
			}
		}
	},

	render: function() {
		return (
			React.createElement("div", null, 
			React.createElement(Title, {id: this.props.id, data: this.props.data}), 
			React.createElement("div", {className: "ui breadcrumb"}, 
				  React.createElement("a", {className: "section"}, this.state.completed), 
				  React.createElement("div", {className: "divider"}, " / "), 
				  React.createElement("div", {className: "active section"}, this.state.length)
			), 
			this.levelTwo()
			))
	}
}); 

},{"./bLetters":164,"./hint":166,"./title":172,"react":163}],172:[function(require,module,exports){
var React = require('react');
var BLetters = require('./bLetters');

module.exports = React.createClass ({displayName: "exports",
	titleCase: function (string) { 
			return string.charAt(0).toUpperCase() + string.slice(1)
		},
	render:function(){
		var title = this.titleCase(this.props.id)
		var titleObj = this.props.data[this.props.id][title];
		// console.log(titleObj.bLetters)
		return(
		React.createElement("h3", {className: "ui dividing header"}, 
  			title, 
  			React.createElement("div", {className: "ui breadcrumb"}, 
				  React.createElement("a", {className: "section"}, this.props.score.completed), 
				  React.createElement("div", {className: "divider"}, " / "), 
				  React.createElement("div", {className: "active section"}, this.props.score.total)
				)
		))
	}
		
});

// <BLetters data={titleObj} />

},{"./bLetters":164,"react":163}]},{},[168])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
